/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayPeeringObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayPeeringParameters struct {

	// Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid tunnel_count. Conflicts with enable_peering_over_private_network and enable_single_tunnel_mode. Type: Boolean. Default: false. Available as of provider version R2.19+.
	// (Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid `tunnel_count`. Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Boolean. Default: false. Available as of provider version R2.19+.
	// +kubebuilder:validation:Optional
	EnableInsaneModeEncryptionOverInternet *bool `json:"enableInsaneModeEncryptionOverInternet,omitempty" tf:"enable_insane_mode_encryption_over_internet,omitempty"`

	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
	// +kubebuilder:validation:Optional
	EnableMaxPerformance *bool `json:"enableMaxPerformance,omitempty" tf:"enable_max_performance,omitempty"`

	// Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with enable_insane_mode_encryption_over_internet and tunnel_count. Type: Boolean. Default: false. Available in provider version R2.17.1+.
	// (Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available in provider version R2.17.1+
	// +kubebuilder:validation:Optional
	EnablePeeringOverPrivateNetwork *bool `json:"enablePeeringOverPrivateNetwork,omitempty" tf:"enable_peering_over_private_network,omitempty"`

	// Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with enable_peering_over_private_network. Conflicts with enable_insane_mode_encryption_over_internet and tunnel_count. Type: Boolean. Default: false. Available as of provider version R2.18+.
	// (Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with `enable_peering_over_private_network`. Conflicts with `enable_insane_mode_encryption_over_internet` and `tunnel_count`. Type: Boolean. Default: false. Available as of provider version R2.18+.
	// +kubebuilder:validation:Optional
	EnableSingleTunnelMode *bool `json:"enableSingleTunnelMode,omitempty" tf:"enable_single_tunnel_mode,omitempty"`

	// List of excluded network CIDRs for the first transit gateway.
	// List of excluded network CIDRs for the first transit gateway.
	// +kubebuilder:validation:Optional
	Gateway1ExcludedNetworkCidrs []*string `json:"gateway1ExcludedNetworkCidrs,omitempty" tf:"gateway1_excluded_network_cidrs,omitempty"`

	// List of excluded TGW connections for the first transit gateway.
	// List of excluded TGW connections for the first transit gateway.
	// +kubebuilder:validation:Optional
	Gateway1ExcludedTgwConnections []*string `json:"gateway1ExcludedTgwConnections,omitempty" tf:"gateway1_excluded_tgw_connections,omitempty"`

	// List of excluded network CIDRs for the second transit gateway.
	// List of excluded network CIDRs for the second transit gateway.
	// +kubebuilder:validation:Optional
	Gateway2ExcludedNetworkCidrs []*string `json:"gateway2ExcludedNetworkCidrs,omitempty" tf:"gateway2_excluded_network_cidrs,omitempty"`

	// List of excluded TGW connections for the second transit gateway.
	// List of excluded TGW connections for the second transit gateway.
	// +kubebuilder:validation:Optional
	Gateway2ExcludedTgwConnections []*string `json:"gateway2ExcludedTgwConnections,omitempty" tf:"gateway2_excluded_tgw_connections,omitempty"`

	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name1.
	// +kubebuilder:validation:Optional
	PrependAsPath1 []*string `json:"prependAsPath1,omitempty" tf:"prepend_as_path1,omitempty"`

	// AS Path Prepend for BGP connection. Can only use the transit's own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit_gateway_name2.
	// +kubebuilder:validation:Optional
	PrependAsPath2 []*string `json:"prependAsPath2,omitempty" tf:"prepend_as_path2,omitempty"`

	// The second transit gateway name to make a peer pair.
	// The second transit gateway name to make a peer pair.
	// +kubebuilder:validation:Required
	TransitGatewayName2 *string `json:"transitGatewayName2" tf:"transit_gateway_name2,omitempty"`

	// Advanced option. Number of public tunnels. Required with enable_insane_mode_encryption_over_internet. Conflicts with enable_peering_over_private_network and enable_single_tunnel_mode. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	// (Optional) Advanced option. Number of public tunnels. Required with `enable_insane_mode_encryption_over_internet`. Conflicts with `enable_peering_over_private_network` and `enable_single_tunnel_mode`. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.
	// +kubebuilder:validation:Optional
	TunnelCount *float64 `json:"tunnelCount,omitempty" tf:"tunnel_count,omitempty"`
}

// GatewayPeeringSpec defines the desired state of GatewayPeering
type GatewayPeeringSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayPeeringParameters `json:"forProvider"`
}

// GatewayPeeringStatus defines the observed state of GatewayPeering.
type GatewayPeeringStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayPeeringObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayPeering is the Schema for the GatewayPeerings API. Creates and manages Aviatrix transit gateway peerings
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aviatrix}
type GatewayPeering struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayPeeringSpec   `json:"spec"`
	Status            GatewayPeeringStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayPeeringList contains a list of GatewayPeerings
type GatewayPeeringList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayPeering `json:"items"`
}

// Repository type metadata.
var (
	GatewayPeering_Kind             = "GatewayPeering"
	GatewayPeering_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayPeering_Kind}.String()
	GatewayPeering_KindAPIVersion   = GatewayPeering_Kind + "." + CRDGroupVersion.String()
	GatewayPeering_GroupVersionKind = CRDGroupVersion.WithKind(GatewayPeering_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayPeering{}, &GatewayPeeringList{})
}

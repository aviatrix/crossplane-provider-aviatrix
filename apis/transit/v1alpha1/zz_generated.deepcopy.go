//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGPLanInterfacesObservation) DeepCopyInto(out *BGPLanInterfacesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BGPLanInterfacesObservation.
func (in *BGPLanInterfacesObservation) DeepCopy() *BGPLanInterfacesObservation {
	if in == nil {
		return nil
	}
	out := new(BGPLanInterfacesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGPLanInterfacesParameters) DeepCopyInto(out *BGPLanInterfacesParameters) {
	*out = *in
	if in.Subnet != nil {
		in, out := &in.Subnet, &out.Subnet
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BGPLanInterfacesParameters.
func (in *BGPLanInterfacesParameters) DeepCopy() *BGPLanInterfacesParameters {
	if in == nil {
		return nil
	}
	out := new(BGPLanInterfacesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Gateway) DeepCopyInto(out *Gateway) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Gateway.
func (in *Gateway) DeepCopy() *Gateway {
	if in == nil {
		return nil
	}
	out := new(Gateway)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Gateway) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayList) DeepCopyInto(out *GatewayList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Gateway, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayList.
func (in *GatewayList) DeepCopy() *GatewayList {
	if in == nil {
		return nil
	}
	out := new(GatewayList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GatewayList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayObservation) DeepCopyInto(out *GatewayObservation) {
	*out = *in
	if in.BGPLanIPList != nil {
		in, out := &in.BGPLanIPList, &out.BGPLanIPList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.CloudInstanceID != nil {
		in, out := &in.CloudInstanceID, &out.CloudInstanceID
		*out = new(string)
		**out = **in
	}
	if in.HaBGPLanIPList != nil {
		in, out := &in.HaBGPLanIPList, &out.HaBGPLanIPList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.HaCloudInstanceID != nil {
		in, out := &in.HaCloudInstanceID, &out.HaCloudInstanceID
		*out = new(string)
		**out = **in
	}
	if in.HaGwName != nil {
		in, out := &in.HaGwName, &out.HaGwName
		*out = new(string)
		**out = **in
	}
	if in.HaLanInterfaceCidr != nil {
		in, out := &in.HaLanInterfaceCidr, &out.HaLanInterfaceCidr
		*out = new(string)
		**out = **in
	}
	if in.HaPrivateIP != nil {
		in, out := &in.HaPrivateIP, &out.HaPrivateIP
		*out = new(string)
		**out = **in
	}
	if in.HaPublicIP != nil {
		in, out := &in.HaPublicIP, &out.HaPublicIP
		*out = new(string)
		**out = **in
	}
	if in.HaSecurityGroupID != nil {
		in, out := &in.HaSecurityGroupID, &out.HaSecurityGroupID
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.LanInterfaceCidr != nil {
		in, out := &in.LanInterfaceCidr, &out.LanInterfaceCidr
		*out = new(string)
		**out = **in
	}
	if in.PrivateIP != nil {
		in, out := &in.PrivateIP, &out.PrivateIP
		*out = new(string)
		**out = **in
	}
	if in.PublicIP != nil {
		in, out := &in.PublicIP, &out.PublicIP
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupID != nil {
		in, out := &in.SecurityGroupID, &out.SecurityGroupID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayObservation.
func (in *GatewayObservation) DeepCopy() *GatewayObservation {
	if in == nil {
		return nil
	}
	out := new(GatewayObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayParameters) DeepCopyInto(out *GatewayParameters) {
	*out = *in
	if in.AccountName != nil {
		in, out := &in.AccountName, &out.AccountName
		*out = new(string)
		**out = **in
	}
	if in.AllocateNewEIP != nil {
		in, out := &in.AllocateNewEIP, &out.AllocateNewEIP
		*out = new(bool)
		**out = **in
	}
	if in.ApprovedLearnedCidrs != nil {
		in, out := &in.ApprovedLearnedCidrs, &out.ApprovedLearnedCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.AvailabilityDomain != nil {
		in, out := &in.AvailabilityDomain, &out.AvailabilityDomain
		*out = new(string)
		**out = **in
	}
	if in.AzureEIPNameResourceGroup != nil {
		in, out := &in.AzureEIPNameResourceGroup, &out.AzureEIPNameResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.BGPEcmp != nil {
		in, out := &in.BGPEcmp, &out.BGPEcmp
		*out = new(bool)
		**out = **in
	}
	if in.BGPHoldTime != nil {
		in, out := &in.BGPHoldTime, &out.BGPHoldTime
		*out = new(float64)
		**out = **in
	}
	if in.BGPLanInterfaces != nil {
		in, out := &in.BGPLanInterfaces, &out.BGPLanInterfaces
		*out = make([]BGPLanInterfacesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.BGPLanInterfacesCount != nil {
		in, out := &in.BGPLanInterfacesCount, &out.BGPLanInterfacesCount
		*out = new(float64)
		**out = **in
	}
	if in.BGPManualSpokeAdvertiseCidrs != nil {
		in, out := &in.BGPManualSpokeAdvertiseCidrs, &out.BGPManualSpokeAdvertiseCidrs
		*out = new(string)
		**out = **in
	}
	if in.BGPPollingTime != nil {
		in, out := &in.BGPPollingTime, &out.BGPPollingTime
		*out = new(string)
		**out = **in
	}
	if in.CloudType != nil {
		in, out := &in.CloudType, &out.CloudType
		*out = new(float64)
		**out = **in
	}
	if in.ConnectedTransit != nil {
		in, out := &in.ConnectedTransit, &out.ConnectedTransit
		*out = new(bool)
		**out = **in
	}
	if in.CustomerManagedKeysSecretRef != nil {
		in, out := &in.CustomerManagedKeysSecretRef, &out.CustomerManagedKeysSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.CustomizedSpokeVPCRoutes != nil {
		in, out := &in.CustomizedSpokeVPCRoutes, &out.CustomizedSpokeVPCRoutes
		*out = new(string)
		**out = **in
	}
	if in.CustomizedTransitVPCRoutes != nil {
		in, out := &in.CustomizedTransitVPCRoutes, &out.CustomizedTransitVPCRoutes
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.EIP != nil {
		in, out := &in.EIP, &out.EIP
		*out = new(string)
		**out = **in
	}
	if in.EnableActiveStandby != nil {
		in, out := &in.EnableActiveStandby, &out.EnableActiveStandby
		*out = new(bool)
		**out = **in
	}
	if in.EnableActiveStandbyPreemptive != nil {
		in, out := &in.EnableActiveStandbyPreemptive, &out.EnableActiveStandbyPreemptive
		*out = new(bool)
		**out = **in
	}
	if in.EnableAdvertiseTransitCidr != nil {
		in, out := &in.EnableAdvertiseTransitCidr, &out.EnableAdvertiseTransitCidr
		*out = new(bool)
		**out = **in
	}
	if in.EnableBGPOverLan != nil {
		in, out := &in.EnableBGPOverLan, &out.EnableBGPOverLan
		*out = new(bool)
		**out = **in
	}
	if in.EnableEgressTransitFirenet != nil {
		in, out := &in.EnableEgressTransitFirenet, &out.EnableEgressTransitFirenet
		*out = new(bool)
		**out = **in
	}
	if in.EnableEncryptVolume != nil {
		in, out := &in.EnableEncryptVolume, &out.EnableEncryptVolume
		*out = new(bool)
		**out = **in
	}
	if in.EnableFirenet != nil {
		in, out := &in.EnableFirenet, &out.EnableFirenet
		*out = new(bool)
		**out = **in
	}
	if in.EnableGatewayLoadBalancer != nil {
		in, out := &in.EnableGatewayLoadBalancer, &out.EnableGatewayLoadBalancer
		*out = new(bool)
		**out = **in
	}
	if in.EnableGroGso != nil {
		in, out := &in.EnableGroGso, &out.EnableGroGso
		*out = new(bool)
		**out = **in
	}
	if in.EnableHybridConnection != nil {
		in, out := &in.EnableHybridConnection, &out.EnableHybridConnection
		*out = new(bool)
		**out = **in
	}
	if in.EnableJumboFrame != nil {
		in, out := &in.EnableJumboFrame, &out.EnableJumboFrame
		*out = new(bool)
		**out = **in
	}
	if in.EnableLearnedCidrsApproval != nil {
		in, out := &in.EnableLearnedCidrsApproval, &out.EnableLearnedCidrsApproval
		*out = new(bool)
		**out = **in
	}
	if in.EnableMonitorGatewaySubnets != nil {
		in, out := &in.EnableMonitorGatewaySubnets, &out.EnableMonitorGatewaySubnets
		*out = new(bool)
		**out = **in
	}
	if in.EnableMultiTierTransit != nil {
		in, out := &in.EnableMultiTierTransit, &out.EnableMultiTierTransit
		*out = new(bool)
		**out = **in
	}
	if in.EnablePreserveAsPath != nil {
		in, out := &in.EnablePreserveAsPath, &out.EnablePreserveAsPath
		*out = new(bool)
		**out = **in
	}
	if in.EnablePrivateOob != nil {
		in, out := &in.EnablePrivateOob, &out.EnablePrivateOob
		*out = new(bool)
		**out = **in
	}
	if in.EnableS2CRxBalancing != nil {
		in, out := &in.EnableS2CRxBalancing, &out.EnableS2CRxBalancing
		*out = new(bool)
		**out = **in
	}
	if in.EnableSegmentation != nil {
		in, out := &in.EnableSegmentation, &out.EnableSegmentation
		*out = new(bool)
		**out = **in
	}
	if in.EnableSpotInstance != nil {
		in, out := &in.EnableSpotInstance, &out.EnableSpotInstance
		*out = new(bool)
		**out = **in
	}
	if in.EnableTransitFirenet != nil {
		in, out := &in.EnableTransitFirenet, &out.EnableTransitFirenet
		*out = new(bool)
		**out = **in
	}
	if in.EnableTransitSummarizeCidrToTgw != nil {
		in, out := &in.EnableTransitSummarizeCidrToTgw, &out.EnableTransitSummarizeCidrToTgw
		*out = new(bool)
		**out = **in
	}
	if in.EnableVPCDNSServer != nil {
		in, out := &in.EnableVPCDNSServer, &out.EnableVPCDNSServer
		*out = new(bool)
		**out = **in
	}
	if in.ExcludedAdvertisedSpokeRoutes != nil {
		in, out := &in.ExcludedAdvertisedSpokeRoutes, &out.ExcludedAdvertisedSpokeRoutes
		*out = new(string)
		**out = **in
	}
	if in.FaultDomain != nil {
		in, out := &in.FaultDomain, &out.FaultDomain
		*out = new(string)
		**out = **in
	}
	if in.FilteredSpokeVPCRoutes != nil {
		in, out := &in.FilteredSpokeVPCRoutes, &out.FilteredSpokeVPCRoutes
		*out = new(string)
		**out = **in
	}
	if in.GwSize != nil {
		in, out := &in.GwSize, &out.GwSize
		*out = new(string)
		**out = **in
	}
	if in.HaAvailabilityDomain != nil {
		in, out := &in.HaAvailabilityDomain, &out.HaAvailabilityDomain
		*out = new(string)
		**out = **in
	}
	if in.HaAzureEIPNameResourceGroup != nil {
		in, out := &in.HaAzureEIPNameResourceGroup, &out.HaAzureEIPNameResourceGroup
		*out = new(string)
		**out = **in
	}
	if in.HaBGPLanInterfaces != nil {
		in, out := &in.HaBGPLanInterfaces, &out.HaBGPLanInterfaces
		*out = make([]HaBGPLanInterfacesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HaEIP != nil {
		in, out := &in.HaEIP, &out.HaEIP
		*out = new(string)
		**out = **in
	}
	if in.HaFaultDomain != nil {
		in, out := &in.HaFaultDomain, &out.HaFaultDomain
		*out = new(string)
		**out = **in
	}
	if in.HaGwSize != nil {
		in, out := &in.HaGwSize, &out.HaGwSize
		*out = new(string)
		**out = **in
	}
	if in.HaImageVersion != nil {
		in, out := &in.HaImageVersion, &out.HaImageVersion
		*out = new(string)
		**out = **in
	}
	if in.HaInsaneModeAz != nil {
		in, out := &in.HaInsaneModeAz, &out.HaInsaneModeAz
		*out = new(string)
		**out = **in
	}
	if in.HaOobAvailabilityZone != nil {
		in, out := &in.HaOobAvailabilityZone, &out.HaOobAvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.HaOobManagementSubnet != nil {
		in, out := &in.HaOobManagementSubnet, &out.HaOobManagementSubnet
		*out = new(string)
		**out = **in
	}
	if in.HaPrivateModeSubnetZone != nil {
		in, out := &in.HaPrivateModeSubnetZone, &out.HaPrivateModeSubnetZone
		*out = new(string)
		**out = **in
	}
	if in.HaSoftwareVersion != nil {
		in, out := &in.HaSoftwareVersion, &out.HaSoftwareVersion
		*out = new(string)
		**out = **in
	}
	if in.HaSubnet != nil {
		in, out := &in.HaSubnet, &out.HaSubnet
		*out = new(string)
		**out = **in
	}
	if in.HaZone != nil {
		in, out := &in.HaZone, &out.HaZone
		*out = new(string)
		**out = **in
	}
	if in.ImageVersion != nil {
		in, out := &in.ImageVersion, &out.ImageVersion
		*out = new(string)
		**out = **in
	}
	if in.InsaneMode != nil {
		in, out := &in.InsaneMode, &out.InsaneMode
		*out = new(bool)
		**out = **in
	}
	if in.InsaneModeAz != nil {
		in, out := &in.InsaneModeAz, &out.InsaneModeAz
		*out = new(string)
		**out = **in
	}
	if in.LanPrivateSubnet != nil {
		in, out := &in.LanPrivateSubnet, &out.LanPrivateSubnet
		*out = new(string)
		**out = **in
	}
	if in.LanVPCID != nil {
		in, out := &in.LanVPCID, &out.LanVPCID
		*out = new(string)
		**out = **in
	}
	if in.LearnedCidrsApprovalMode != nil {
		in, out := &in.LearnedCidrsApprovalMode, &out.LearnedCidrsApprovalMode
		*out = new(string)
		**out = **in
	}
	if in.LocalAsNumber != nil {
		in, out := &in.LocalAsNumber, &out.LocalAsNumber
		*out = new(string)
		**out = **in
	}
	if in.MonitorExcludeList != nil {
		in, out := &in.MonitorExcludeList, &out.MonitorExcludeList
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.OobAvailabilityZone != nil {
		in, out := &in.OobAvailabilityZone, &out.OobAvailabilityZone
		*out = new(string)
		**out = **in
	}
	if in.OobManagementSubnet != nil {
		in, out := &in.OobManagementSubnet, &out.OobManagementSubnet
		*out = new(string)
		**out = **in
	}
	if in.PrependAsPath != nil {
		in, out := &in.PrependAsPath, &out.PrependAsPath
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrivateModeLBVPCID != nil {
		in, out := &in.PrivateModeLBVPCID, &out.PrivateModeLBVPCID
		*out = new(string)
		**out = **in
	}
	if in.PrivateModeSubnetZone != nil {
		in, out := &in.PrivateModeSubnetZone, &out.PrivateModeSubnetZone
		*out = new(string)
		**out = **in
	}
	if in.RxQueueSize != nil {
		in, out := &in.RxQueueSize, &out.RxQueueSize
		*out = new(string)
		**out = **in
	}
	if in.SingleAzHa != nil {
		in, out := &in.SingleAzHa, &out.SingleAzHa
		*out = new(bool)
		**out = **in
	}
	if in.SingleIPSnat != nil {
		in, out := &in.SingleIPSnat, &out.SingleIPSnat
		*out = new(bool)
		**out = **in
	}
	if in.SoftwareVersion != nil {
		in, out := &in.SoftwareVersion, &out.SoftwareVersion
		*out = new(string)
		**out = **in
	}
	if in.SpotPrice != nil {
		in, out := &in.SpotPrice, &out.SpotPrice
		*out = new(string)
		**out = **in
	}
	if in.Subnet != nil {
		in, out := &in.Subnet, &out.Subnet
		*out = new(string)
		**out = **in
	}
	if in.Tags != nil {
		in, out := &in.Tags, &out.Tags
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.TunnelDetectionTime != nil {
		in, out := &in.TunnelDetectionTime, &out.TunnelDetectionTime
		*out = new(float64)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
	if in.VPCReg != nil {
		in, out := &in.VPCReg, &out.VPCReg
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayParameters.
func (in *GatewayParameters) DeepCopy() *GatewayParameters {
	if in == nil {
		return nil
	}
	out := new(GatewayParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayPeering) DeepCopyInto(out *GatewayPeering) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayPeering.
func (in *GatewayPeering) DeepCopy() *GatewayPeering {
	if in == nil {
		return nil
	}
	out := new(GatewayPeering)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GatewayPeering) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayPeeringList) DeepCopyInto(out *GatewayPeeringList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GatewayPeering, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayPeeringList.
func (in *GatewayPeeringList) DeepCopy() *GatewayPeeringList {
	if in == nil {
		return nil
	}
	out := new(GatewayPeeringList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GatewayPeeringList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayPeeringObservation) DeepCopyInto(out *GatewayPeeringObservation) {
	*out = *in
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayPeeringObservation.
func (in *GatewayPeeringObservation) DeepCopy() *GatewayPeeringObservation {
	if in == nil {
		return nil
	}
	out := new(GatewayPeeringObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayPeeringParameters) DeepCopyInto(out *GatewayPeeringParameters) {
	*out = *in
	if in.EnableInsaneModeEncryptionOverInternet != nil {
		in, out := &in.EnableInsaneModeEncryptionOverInternet, &out.EnableInsaneModeEncryptionOverInternet
		*out = new(bool)
		**out = **in
	}
	if in.EnableMaxPerformance != nil {
		in, out := &in.EnableMaxPerformance, &out.EnableMaxPerformance
		*out = new(bool)
		**out = **in
	}
	if in.EnablePeeringOverPrivateNetwork != nil {
		in, out := &in.EnablePeeringOverPrivateNetwork, &out.EnablePeeringOverPrivateNetwork
		*out = new(bool)
		**out = **in
	}
	if in.EnableSingleTunnelMode != nil {
		in, out := &in.EnableSingleTunnelMode, &out.EnableSingleTunnelMode
		*out = new(bool)
		**out = **in
	}
	if in.Gateway1ExcludedNetworkCidrs != nil {
		in, out := &in.Gateway1ExcludedNetworkCidrs, &out.Gateway1ExcludedNetworkCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Gateway1ExcludedTgwConnections != nil {
		in, out := &in.Gateway1ExcludedTgwConnections, &out.Gateway1ExcludedTgwConnections
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Gateway2ExcludedNetworkCidrs != nil {
		in, out := &in.Gateway2ExcludedNetworkCidrs, &out.Gateway2ExcludedNetworkCidrs
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Gateway2ExcludedTgwConnections != nil {
		in, out := &in.Gateway2ExcludedTgwConnections, &out.Gateway2ExcludedTgwConnections
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrependAsPath1 != nil {
		in, out := &in.PrependAsPath1, &out.PrependAsPath1
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PrependAsPath2 != nil {
		in, out := &in.PrependAsPath2, &out.PrependAsPath2
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.TransitGatewayName2 != nil {
		in, out := &in.TransitGatewayName2, &out.TransitGatewayName2
		*out = new(string)
		**out = **in
	}
	if in.TunnelCount != nil {
		in, out := &in.TunnelCount, &out.TunnelCount
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayPeeringParameters.
func (in *GatewayPeeringParameters) DeepCopy() *GatewayPeeringParameters {
	if in == nil {
		return nil
	}
	out := new(GatewayPeeringParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayPeeringSpec) DeepCopyInto(out *GatewayPeeringSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayPeeringSpec.
func (in *GatewayPeeringSpec) DeepCopy() *GatewayPeeringSpec {
	if in == nil {
		return nil
	}
	out := new(GatewayPeeringSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayPeeringStatus) DeepCopyInto(out *GatewayPeeringStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayPeeringStatus.
func (in *GatewayPeeringStatus) DeepCopy() *GatewayPeeringStatus {
	if in == nil {
		return nil
	}
	out := new(GatewayPeeringStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewaySpec) DeepCopyInto(out *GatewaySpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewaySpec.
func (in *GatewaySpec) DeepCopy() *GatewaySpec {
	if in == nil {
		return nil
	}
	out := new(GatewaySpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GatewayStatus) DeepCopyInto(out *GatewayStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GatewayStatus.
func (in *GatewayStatus) DeepCopy() *GatewayStatus {
	if in == nil {
		return nil
	}
	out := new(GatewayStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HaBGPLanInterfacesObservation) DeepCopyInto(out *HaBGPLanInterfacesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HaBGPLanInterfacesObservation.
func (in *HaBGPLanInterfacesObservation) DeepCopy() *HaBGPLanInterfacesObservation {
	if in == nil {
		return nil
	}
	out := new(HaBGPLanInterfacesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HaBGPLanInterfacesParameters) DeepCopyInto(out *HaBGPLanInterfacesParameters) {
	*out = *in
	if in.Subnet != nil {
		in, out := &in.Subnet, &out.Subnet
		*out = new(string)
		**out = **in
	}
	if in.VPCID != nil {
		in, out := &in.VPCID, &out.VPCID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HaBGPLanInterfacesParameters.
func (in *HaBGPLanInterfacesParameters) DeepCopy() *HaBGPLanInterfacesParameters {
	if in == nil {
		return nil
	}
	out := new(HaBGPLanInterfacesParameters)
	in.DeepCopyInto(out)
	return out
}

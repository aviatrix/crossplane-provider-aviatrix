/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SnatConnectionPolicyObservation struct {

	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry *bool `json:"applyRouteEntry,omitempty" tf:"apply_route_entry,omitempty"`

	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `json:"connection,omitempty" tf:"connection,omitempty"`

	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `json:"dstCidr,omitempty" tf:"dst_cidr,omitempty"`

	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `json:"dstPort,omitempty" tf:"dst_port,omitempty"`

	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `json:"excludeRtb,omitempty" tf:"exclude_rtb,omitempty"`

	// based connection in a policy.
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark *string `json:"mark,omitempty" tf:"mark,omitempty"`

	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps *string `json:"snatIps,omitempty" tf:"snat_ips,omitempty"`

	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort *string `json:"snatPort,omitempty" tf:"snat_port,omitempty"`

	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `json:"srcCidr,omitempty" tf:"src_cidr,omitempty"`

	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `json:"srcPort,omitempty" tf:"src_port,omitempty"`
}

type SnatConnectionPolicyParameters struct {
}

type SnatInterfacePolicyObservation struct {

	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	ApplyRouteEntry *bool `json:"applyRouteEntry,omitempty" tf:"apply_route_entry,omitempty"`

	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	Connection *string `json:"connection,omitempty" tf:"connection,omitempty"`

	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	DstCidr *string `json:"dstCidr,omitempty" tf:"dst_cidr,omitempty"`

	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	DstPort *string `json:"dstPort,omitempty" tf:"dst_port,omitempty"`

	// This field specifies which VPC private route table will not be programmed with the default route entry.
	ExcludeRtb *string `json:"excludeRtb,omitempty" tf:"exclude_rtb,omitempty"`

	// based connection in a policy.
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	Mark *string `json:"mark,omitempty" tf:"mark,omitempty"`

	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatIps *string `json:"snatIps,omitempty" tf:"snat_ips,omitempty"`

	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	SnatPort *string `json:"snatPort,omitempty" tf:"snat_port,omitempty"`

	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	SrcCidr *string `json:"srcCidr,omitempty" tf:"src_cidr,omitempty"`

	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	SrcPort *string `json:"srcPort,omitempty" tf:"src_port,omitempty"`
}

type SnatInterfacePolicyParameters struct {
}

type SnatObservation struct {

	// Computed attribute to store the previous connection policy.
	ConnectionPolicy []SnatConnectionPolicyObservation `json:"connectionPolicy,omitempty" tf:"connection_policy,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Computed attribute to store the previous interface policy.
	InterfacePolicy []SnatInterfacePolicyObservation `json:"interfacePolicy,omitempty" tf:"interface_policy,omitempty"`
}

type SnatParameters struct {

	// NAT mode. Valid values: "customized_snat". Default value: "customized_snat".
	// Nat mode. Currently only supports 'customized_snat'.
	// +kubebuilder:validation:Optional
	SnatMode *string `json:"snatMode,omitempty" tf:"snat_mode,omitempty"`

	// Policy rule applied for enabling source NAT (mode: "customized_snat"). Currently only supports AWS(1) and Azure(8).
	// Policy rules applied for 'snat_mode‚Äù of 'customized_snat'.'
	// +kubebuilder:validation:Optional
	SnatPolicy []SnatPolicyParameters `json:"snatPolicy,omitempty" tf:"snat_policy,omitempty"`

	// Whether to sync the policies to the HA gateway.
	// +kubebuilder:validation:Optional
	SyncToHa *bool `json:"syncToHa,omitempty" tf:"sync_to_ha,omitempty"`
}

type SnatPolicyObservation struct {
}

type SnatPolicyParameters struct {

	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.
	// This is an option to program the route entry 'DST CIDR pointing to Aviatrix Gateway' into Cloud platform routing table. Type: Boolean. Default: True.
	// +kubebuilder:validation:Optional
	ApplyRouteEntry *bool `json:"applyRouteEntry,omitempty" tf:"apply_route_entry,omitempty"`

	// This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".
	// This is a qualifier condition that specifies output connection where the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	Connection *string `json:"connection,omitempty" tf:"connection,omitempty"`

	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.
	// This is a qualifier condition that specifies a destination IP address range where the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	DstCidr *string `json:"dstCidr,omitempty" tf:"dst_cidr,omitempty"`

	// This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.
	// This is a qualifier condition that specifies a destination port where the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	DstPort *string `json:"dstPort,omitempty" tf:"dst_port,omitempty"`

	// This field specifies which VPC private route table will not be programmed with the default route entry.
	// This field specifies which VPC private route table will not be programmed with the default route entry.
	// +kubebuilder:validation:Optional
	ExcludeRtb *string `json:"excludeRtb,omitempty" tf:"exclude_rtb,omitempty"`

	// based connection in a policy.
	// This is a qualifier condition that specifies output interface where the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	Interface *string `json:"interface,omitempty" tf:"interface,omitempty"`

	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.
	// This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	Mark *string `json:"mark,omitempty" tf:"mark,omitempty"`

	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: 'all', 'tcp', 'udp', 'icmp'. 'Default: 'all'.
	// This is a qualifier condition that specifies a destination port protocol where the rule applies. Default: all.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	// This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When left blank, this field is not used. One of the rule fields must be specified for this rule to take effect.
	// +kubebuilder:validation:Optional
	SnatIps *string `json:"snatIps,omitempty" tf:"snat_ips,omitempty"`

	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.
	// This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When left blank, this field is not used. One of the rule fields must be specified for this rule to take effect.
	// +kubebuilder:validation:Optional
	SnatPort *string `json:"snatPort,omitempty" tf:"snat_port,omitempty"`

	// This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.
	// This is a qualifier condition that specifies a source IP address range where the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	SrcCidr *string `json:"srcCidr,omitempty" tf:"src_cidr,omitempty"`

	// This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.
	// This is a qualifier condition that specifies a source port that the rule applies. When left blank, this field is not used.
	// +kubebuilder:validation:Optional
	SrcPort *string `json:"srcPort,omitempty" tf:"src_port,omitempty"`
}

// SnatSpec defines the desired state of Snat
type SnatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SnatParameters `json:"forProvider"`
}

// SnatStatus defines the observed state of Snat.
type SnatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SnatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Snat is the Schema for the Snats API. Configure customized SNAT policies for an Aviatrix gateway
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aviatrix}
type Snat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SnatSpec   `json:"spec"`
	Status            SnatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SnatList contains a list of Snats
type SnatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Snat `json:"items"`
}

// Repository type metadata.
var (
	Snat_Kind             = "Snat"
	Snat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Snat_Kind}.String()
	Snat_KindAPIVersion   = Snat_Kind + "." + CRDGroupVersion.String()
	Snat_GroupVersionKind = CRDGroupVersion.WithKind(Snat_Kind)
)

func init() {
	SchemeBuilder.Register(&Snat{}, &SnatList{})
}

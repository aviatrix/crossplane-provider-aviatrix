/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkDomainObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkDomainParameters struct {
}

// NetworkDomainSpec defines the desired state of NetworkDomain
type NetworkDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkDomainParameters `json:"forProvider"`
}

// NetworkDomainStatus defines the observed state of NetworkDomain.
type NetworkDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDomain is the Schema for the NetworkDomains API. Creates and manages an Aviatrix Segmentation Network Domain
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aviatrix}
type NetworkDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkDomainSpec   `json:"spec"`
	Status            NetworkDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDomainList contains a list of NetworkDomains
type NetworkDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkDomain `json:"items"`
}

// Repository type metadata.
var (
	NetworkDomain_Kind             = "NetworkDomain"
	NetworkDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkDomain_Kind}.String()
	NetworkDomain_KindAPIVersion   = NetworkDomain_Kind + "." + CRDGroupVersion.String()
	NetworkDomain_GroupVersionKind = CRDGroupVersion.WithKind(NetworkDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkDomain{}, &NetworkDomainList{})
}

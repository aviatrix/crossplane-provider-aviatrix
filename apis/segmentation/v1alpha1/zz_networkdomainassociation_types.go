/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkDomainAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NetworkDomainAssociationParameters struct {

	// Name of the transit gateway attachment, Spoke or Edge, to associate with the network domain.
	// Attachment name, either Spoke or Edge.
	// +kubebuilder:validation:Required
	AttachmentName *string `json:"attachmentName" tf:"attachment_name,omitempty"`

	// Name of the Segmentation Network Domain.
	// Network Domain name.
	// +kubebuilder:validation:Required
	NetworkDomainName *string `json:"networkDomainName" tf:"network_domain_name,omitempty"`

	// Name of the Transit Gateway.
	// Transit Gateway name.
	// +kubebuilder:validation:Required
	TransitGatewayName *string `json:"transitGatewayName" tf:"transit_gateway_name,omitempty"`
}

// NetworkDomainAssociationSpec defines the desired state of NetworkDomainAssociation
type NetworkDomainAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkDomainAssociationParameters `json:"forProvider"`
}

// NetworkDomainAssociationStatus defines the observed state of NetworkDomainAssociation.
type NetworkDomainAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkDomainAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDomainAssociation is the Schema for the NetworkDomainAssociations API. Creates and manages an Aviatrix Segmentation Network Domain Association
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aviatrix}
type NetworkDomainAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkDomainAssociationSpec   `json:"spec"`
	Status            NetworkDomainAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkDomainAssociationList contains a list of NetworkDomainAssociations
type NetworkDomainAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkDomainAssociation `json:"items"`
}

// Repository type metadata.
var (
	NetworkDomainAssociation_Kind             = "NetworkDomainAssociation"
	NetworkDomainAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkDomainAssociation_Kind}.String()
	NetworkDomainAssociation_KindAPIVersion   = NetworkDomainAssociation_Kind + "." + CRDGroupVersion.String()
	NetworkDomainAssociation_GroupVersionKind = CRDGroupVersion.WithKind(NetworkDomainAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkDomainAssociation{}, &NetworkDomainAssociationList{})
}

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this Account
func (mg *Account) GetTerraformResourceType() string {
	return "aviatrix_account"
}

// GetConnectionDetailsMapping for this Account
func (tr *Account) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"alicloud_access_key": "spec.forProvider.alicloudAccessKeySecretRef", "alicloud_secret_key": "spec.forProvider.alicloudSecretKeySecretRef", "arm_application_id": "spec.forProvider.armApplicationIdSecretRef", "arm_application_key": "spec.forProvider.armApplicationKeySecretRef", "arm_directory_id": "spec.forProvider.armDirectoryIdSecretRef", "aws_access_key": "spec.forProvider.awsAccessKeySecretRef", "aws_secret_key": "spec.forProvider.awsSecretKeySecretRef", "awschina_access_key": "spec.forProvider.awschinaAccessKeySecretRef", "awschina_secret_key": "spec.forProvider.awschinaSecretKeySecretRef", "awsgov_access_key": "spec.forProvider.awsgovAccessKeySecretRef", "awsgov_secret_key": "spec.forProvider.awsgovSecretKeySecretRef", "awss_ca_chain_cert": "spec.forProvider.awssCaChainCertSecretRef", "awss_cap_cert": "spec.forProvider.awssCapCertSecretRef", "awss_cap_cert_key": "spec.forProvider.awssCapCertKeySecretRef", "awsts_ca_chain_cert": "spec.forProvider.awstsCaChainCertSecretRef", "awsts_cap_cert": "spec.forProvider.awstsCapCertSecretRef", "awsts_cap_cert_key": "spec.forProvider.awstsCapCertKeySecretRef", "azurechina_application_id": "spec.forProvider.azurechinaApplicationIdSecretRef", "azurechina_application_key": "spec.forProvider.azurechinaApplicationKeySecretRef", "azurechina_directory_id": "spec.forProvider.azurechinaDirectoryIdSecretRef", "azuregov_application_id": "spec.forProvider.azuregovApplicationIdSecretRef", "azuregov_application_key": "spec.forProvider.azuregovApplicationKeySecretRef", "azuregov_directory_id": "spec.forProvider.azuregovDirectoryIdSecretRef", "edge_csp_password": "spec.forProvider.edgeCspPasswordSecretRef", "oci_api_private_key_filepath": "spec.forProvider.ociApiPrivateKeyFilepathSecretRef", "oci_compartment_id": "spec.forProvider.ociCompartmentIdSecretRef", "oci_tenancy_id": "spec.forProvider.ociTenancyIdSecretRef", "oci_user_id": "spec.forProvider.ociUserIdSecretRef"}
}

// GetObservation of this Account
func (tr *Account) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Account
func (tr *Account) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Account
func (tr *Account) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Account
func (tr *Account) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Account
func (tr *Account) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Account using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Account) LateInitialize(attrs []byte) (bool, error) {
	params := &AccountParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Account) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VPC
func (mg *VPC) GetTerraformResourceType() string {
	return "aviatrix_vpc"
}

// GetConnectionDetailsMapping for this VPC
func (tr *VPC) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VPC
func (tr *VPC) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VPC
func (tr *VPC) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VPC
func (tr *VPC) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VPC
func (tr *VPC) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VPC
func (tr *VPC) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VPC using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VPC) LateInitialize(attrs []byte) (bool, error) {
	params := &VPCParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VPC) GetTerraformSchemaVersion() int {
	return 1
}

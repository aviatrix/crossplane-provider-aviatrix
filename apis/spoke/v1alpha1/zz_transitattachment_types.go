/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TransitAttachmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether the spoke gateway is BGP enabled or not.
	// Indicates whether the spoke gateway is BGP enabled or not.
	SpokeBGPEnabled *bool `json:"spokeBgpEnabled,omitempty" tf:"spoke_bgp_enabled,omitempty"`
}

type TransitAttachmentParameters struct {

	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.
	// Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each launched in Insane Mode and in the same cloud type. Available as of provider version R2.22.2+.
	// +kubebuilder:validation:Optional
	EnableMaxPerformance *bool `json:"enableMaxPerformance,omitempty" tf:"enable_max_performance,omitempty"`

	// Learned routes will be propagated to these route tables. Example: ["rtb-212ff547","rtb-04539787"].
	// Learned routes will be propagated to these route tables.
	// +kubebuilder:validation:Optional
	RouteTables []*string `json:"routeTables,omitempty" tf:"route_tables,omitempty"`

	// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on spoke_gateway_name. Available as of provider version R2.23+.
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on spoke gateway.
	// +kubebuilder:validation:Optional
	SpokePrependAsPath []*string `json:"spokePrependAsPath,omitempty" tf:"spoke_prepend_as_path,omitempty"`

	// Name of the transit gateway to attach the spoke gateway to.
	// Name of the transit gateway to attach the spoke gateway to.
	// +kubebuilder:validation:Required
	TransitGwName *string `json:"transitGwName" tf:"transit_gw_name,omitempty"`

	// Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway's own local AS number, repeated up to 25 times. Applies on transit_gateway_name. Available as of provider version R2.23+.
	// AS Path Prepend customized by specifying AS PATH for a BGP connection. Applies on transit gateway.
	// +kubebuilder:validation:Optional
	TransitPrependAsPath []*string `json:"transitPrependAsPath,omitempty" tf:"transit_prepend_as_path,omitempty"`
}

// TransitAttachmentSpec defines the desired state of TransitAttachment
type TransitAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransitAttachmentParameters `json:"forProvider"`
}

// TransitAttachmentStatus defines the observed state of TransitAttachment.
type TransitAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransitAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransitAttachment is the Schema for the TransitAttachments API. Creates and manages Aviatrix Spoke-to-Transit attachments
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aviatrix}
type TransitAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitAttachmentSpec   `json:"spec"`
	Status            TransitAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitAttachmentList contains a list of TransitAttachments
type TransitAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitAttachment `json:"items"`
}

// Repository type metadata.
var (
	TransitAttachment_Kind             = "TransitAttachment"
	TransitAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitAttachment_Kind}.String()
	TransitAttachment_KindAPIVersion   = TransitAttachment_Kind + "." + CRDGroupVersion.String()
	TransitAttachment_GroupVersionKind = CRDGroupVersion.WithKind(TransitAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&TransitAttachment{}, &TransitAttachmentList{})
}

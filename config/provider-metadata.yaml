name: AviatrixSystems/terraform-provider-aviatrix
resources:
    aviatrix_account:
        subCategory: Accounts
        description: Creates and manages Aviatrix cloud accounts
        name: aviatrix_account
        title: aviatrix_account
        examples:
            - name: temp_acc_aws
              manifest: |-
                {
                  "account_name": "username",
                  "aws_account_number": "123456789012",
                  "aws_iam": true,
                  "aws_role_app": "arn:aws:iam::123456789012:role/aviatrix-role-app",
                  "aws_role_ec2": "arn:aws:iam::123456789012:role/aviatrix-role-ec2",
                  "cloud_type": 1
                }
            - name: temp_acc_aws
              manifest: |-
                {
                  "account_name": "username",
                  "aws_access_key": "ABCDEFGHIJKL",
                  "aws_account_number": "123456789012",
                  "aws_iam": false,
                  "aws_secret_key": "ABCDEFGHIJKLabcdefghijkl",
                  "cloud_type": 1
                }
            - name: temp_acc_gcp
              manifest: |-
                {
                  "account_name": "username",
                  "cloud_type": 4,
                  "gcloud_project_credentials_filepath": "/home/ubuntu/test_gcp/aviatrix-abc123.json",
                  "gcloud_project_id": "aviatrix-123456"
                }
            - name: temp_acc_azure
              manifest: |-
                {
                  "account_name": "username",
                  "arm_application_id": "1234abcd-12ab-34cd-56ef-abcdef123456",
                  "arm_application_key": "213df1SDF1231Gsaf/fa23-4A/324j12390801+FSwe=",
                  "arm_directory_id": "abcdefgh-1234-5678-9100-abc123456789",
                  "arm_subscription_id": "12345678-abcd-efgh-ijkl-123456789abc",
                  "cloud_type": 8
                }
            - name: temp_acc_oci
              manifest: |-
                {
                  "account_name": "username",
                  "cloud_type": 16,
                  "oci_api_private_key_filepath": "/Users/public/Documents/oci_api_key.pem",
                  "oci_compartment_id": "ocid1.tenancy.oc1..aaaaaaaaxo",
                  "oci_tenancy_id": "ocid1.tenancy.oc1..aaaaaaaa",
                  "oci_user_id": "ocid1.user.oc1..aaaaaaaazly"
                }
            - name: temp_acc_azure_gov
              manifest: |-
                {
                  "account_name": "username",
                  "azuregov_application_id": "1234abcd-12ab-34cd-56ef-abcdef123456",
                  "azuregov_application_key": "213df1SDF1231Gsaf/fa23-4A/324j12390801+FSwe=",
                  "azuregov_directory_id": "abcdefgh-1234-5678-9100-abc123456789",
                  "azuregov_subscription_id": "12345678-abcd-efgh-ijkl-123456789abc",
                  "cloud_type": 32
                }
            - name: temp_acc_awsgov
              manifest: |-
                {
                  "account_name": "username",
                  "awsgov_access_key": "ABCDEFGHIJKL",
                  "awsgov_account_number": "123456789012",
                  "awsgov_secret_key": "ABCDEFGHIJKLabcdefghijkl",
                  "cloud_type": 256
                }
            - name: temp_acc_aww_china_iam
              manifest: |-
                {
                  "account_name": "username",
                  "awschina_account_number": "123456789012",
                  "awschina_iam": true,
                  "awschina_role_app": "arn:aws-cn:iam::123456789012:role/aviatrix-role-app",
                  "awschina_role_ec2": "arn:aws-cn:iam::123456789012:role/aviatrix-role-ec2",
                  "cloud_type": 1024
                }
            - name: temp_acc_awschina
              manifest: |-
                {
                  "account_name": "username",
                  "awschina_access_key": "ABCDEFGHIJKL",
                  "awschina_account_number": "123456789012",
                  "awschina_iam": false,
                  "awschina_secret_key": "ABCDEFGHIJKLabcdefghijkl",
                  "cloud_type": 1024
                }
            - name: temp_acc_azurechina
              manifest: |-
                {
                  "account_name": "username",
                  "azurechina_application_id": "1234abcd-12ab-34cd-56ef-abcdef123456",
                  "azurechina_application_key": "213df1SDF1231Gsaf/fa23-4A/324j12390801+FSwe=",
                  "azurechina_directory_id": "abcdefgh-1234-5678-9100-abc123456789",
                  "azurechina_subscription_id": "12345678-abcd-efgh-ijkl-123456789abc",
                  "cloud_type": 2048
                }
            - name: temp_acc_alibaba
              manifest: |-
                {
                  "account_name": "username",
                  "alicloud_access_key": "ABCDEFGHIJKL",
                  "alicloud_account_id": "123456789012",
                  "alicloud_secret_key": "ABCDEFGHIJKLabcdefghijkl",
                  "cloud_type": 8192
                }
            - name: temp_acc_aws_top_secret
              manifest: |-
                {
                  "account_name": "username",
                  "awsts_account_number": "123456789012",
                  "awsts_ca_chain_cert": "path/to/cap_chain_cert_file",
                  "awsts_cap_agency": "ABCDEFG",
                  "awsts_cap_cert": "path/to/cap_cert_file",
                  "awsts_cap_cert_key": "path/to/cap_cert_key_file",
                  "awsts_cap_mission": "Test-C2S-dev",
                  "awsts_cap_role_name": "C2S-role-TestRole",
                  "awsts_cap_url": "https://some.domain.com",
                  "cloud_type": 16384
                }
            - name: temp_acc_aws_secret
              manifest: |-
                {
                  "account_name": "username",
                  "awss_account_number": "123456789012",
                  "awss_ca_chain_cert": "path/to/cap_chain_cert_file",
                  "awss_cap_account_name": "Test-SC2S-dev",
                  "awss_cap_agency": "ABCDEFG",
                  "awss_cap_cert": "path/to/cap_cert_file",
                  "awss_cap_cert_key": "path/to/cap_cert_key_file",
                  "awss_cap_role_name": "SC2S-role-TestRole",
                  "awss_cap_url": "https://some.domain.com",
                  "cloud_type": 32768
                }
            - name: temp_acc_aws
              manifest: |-
                {
                  "account_name": "username",
                  "aws_account_number": "123456789012",
                  "aws_iam": true,
                  "aws_role_app": "arn:aws:iam::123456789012:role/aviatrix-role-app",
                  "aws_role_ec2": "arn:aws:iam::123456789012:role/aviatrix-role-ec2",
                  "cloud_type": 1,
                  "rbac_groups": [
                    "group-c"
                  ]
                }
        argumentDocs:
            account_name: '- (Required) Account name. This can be used for logging in to CloudN console or UserConnect controller.'
            alicloud_access_key: '- (Optional) Alibaba Cloud Access Key. Required when creating an account for Alibaba Cloud.'
            alicloud_account_id: '- (Optional) Alibaba Cloud Account number to associate with Aviatrix account. Required when creating an account for Alibaba Cloud.'
            alicloud_secret_key: '- (Optional) Alibaba Cloud Secret Key. Required when creating an account for Alibaba Cloud.'
            arm_application_id: '- (Optional) Azure ARM Application ID. Required when creating an account for Azure.'
            arm_application_key: '- (Optional) Azure ARM Application key. Required when creating an account for Azure.'
            arm_directory_id: '- (Optional) Azure ARM Directory ID. Required when creating an account for Azure.'
            arm_subscription_id: '- (Optional) Azure ARM Subscription ID. Required when creating an account for Azure.'
            audit_account: '- (Optional) Specify whether to enable the audit account feature. If this feature is enabled, terraform will give a warning if there is an issue with the account credentials. Changing audit_account to "false" will not prevent the Controller from performing account audits. It will only prevent Terraform from displaying a warning. Valid values: true, false. Default: false. Available as of provider version 2.19+. Note: The warning may still appear for a few hours after fixing the underlying issue.'
            aws_access_key: '- (Optional) AWS Access Key. Required when aws_iam is "false" and when creating an account for AWS.'
            aws_account_number: '- (Optional) AWS Account number to associate with Aviatrix account. Required when creating an account for AWS.'
            aws_ca_cert_path: '- (Optional) AWS Top Secret Region or Secret Region Custom Certificate Authority file name on the controller. Available as of provider R2.19.5+.'
            aws_gateway_role_app: '- (Optional) A separate AWS App role ARN to assign to gateways created by the controller. Required when aws_gateway_role_ec2 is set. Only allowed when aws_iam, awsgov_iam, or awschina_iam is "true" when creating an account for AWS, AWSGov or AWSChina, respectively. Available as of provider version R2.19+.'
            aws_gateway_role_ec2: '- (Optional) A separate AWS EC2 role ARN to assign to gateways created by the controller. Required when aws_gateway_role_app is set. Only allowed when aws_iam, awsgov_iam, or awschina_iam is "true" when creating an account for AWS, AWSGov or AWSChina, respectively. Available as of provider version R2.19+.'
            aws_iam: '- (Optional) AWS IAM-role based flag, this option is for UserConnect.'
            aws_role_app: '- (Optional) AWS App role ARN, this option is for UserConnect. Required when aws_iam is "true" and when creating an account for AWS.'
            aws_role_ec2: '- (Optional) AWS EC2 role ARN, this option is for UserConnect. Required when aws_iam is "true" and when creating an account for AWS.'
            aws_secret_key: '- (Optional) AWS Secret Key. Required when aws_iam is "false" and when creating an account for AWS.'
            awschina_access_key: '- (Optional) AWSChina Access Key. Required when awschina_iam is "false" and when creating an account for AWSChina. Available as of provider version 2.19+.'
            awschina_account_number: '- (Optional) AWSChina Account number to associate with Aviatrix account. Required when creating an account for AWSChina. Available as of provider version 2.19+.'
            awschina_iam: '- (Optional) AWSChina IAM-role based flag. Available as of provider version 2.19+.'
            awschina_role_app: '- (Optional) AWSChina App role ARN. Available when awschina_iam is "true" and when creating an account for AWSChina. If left empty, the ARN will be computed. Available as of provider version 2.19+.'
            awschina_role_ec2: '- (Optional) AWSChina EC2 role ARN. Available when awschina_iam is "true" and when creating an account for AWSChina. If left empty, the ARN will be computed. Available as of provider version 2.19+.'
            awschina_secret_key: '- (Optional) AWSChina Secret Key. Required when awschina_iam is "false" and when creating an account for AWSChina. Available as of provider version 2.19+.'
            awsgov_access_key: '- (Optional) AWS Access Key. Required when creating an account for AWSGov.'
            awsgov_account_number: '- (Optional) AWSGov Account number to associate with Aviatrix account. Required when creating an account for AWSGov.'
            awsgov_iam: '- (Optional) AWSGov IAM-role based flag. Available as of provider version 2.19+.'
            awsgov_role_app: '- (Optional) AWSGov App role ARN. Available when awsgov_iam is "true" and when creating an account for AWSGov. If left empty, the ARN will be computed. Available as of provider version 2.19+.'
            awsgov_role_ec2: '- (Optional) AWSGov EC2 role ARN. Available when awsgov_iam is "true" and when creating an account for AWSGov. If left empty, the ARN will be computed. Available as of provider version 2.19+.'
            awsgov_secret_key: '- (Optional) AWS Secret Key. Required when creating an account for AWSGov.'
            awss_account_number: '- (Optional) AWS Secret Region Account Number. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_ca_chain_cert: '- (Optional) AWS Secret Region Custom Certificate Authority local file path. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_cap_account_name: '- (Optional) AWS Secret Region Account Name. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_cap_agency: '- (Optional) AWS Secret Region CAP Agency. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_cap_cert: '- (Optional) AWS Secret Region CAP Certificate local file path. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_cap_cert_key: '- (Optional) AWS Secret Region CAP Certificate Key local file path. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_cap_cert_key_path: '- (Optional) AWS Secret Region CAP Certificate Key file name on the controller. Available as of provider R2.19.5+.'
            awss_cap_cert_path: '- (Optional) AWS Secret Region CAP Certificate file name on the controller. Available as of provider R2.19.5+.'
            awss_cap_role_name: '- (Optional) AWS Secret Region Role Name. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awss_cap_url: '- (Optional) AWS Secret Region CAP Url. Required when creating an account in AWS Secret Region. Available as of provider version R2.19.5+.'
            awsts_account_number: '- (Optional) AWS Top Secret Region Account Number. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_ca_chain_cert: '- (Optional) AWS Top Secret Region Custom Certificate Authority local file path. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_cap_agency: '- (Optional) AWS Top Secret Region CAP Agency. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_cap_cert: '- (Optional) AWS Top Secret Region CAP Certificate local file path. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_cap_cert_key: '- (Optional) AWS Top Secret Region CAP Certificate Key local file path. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_cap_cert_key_path: '- (Optional) AWS Top Secret Region CAP Certificate Key file name on the controller. Available as of provider R2.19.5+.'
            awsts_cap_cert_path: '- (Optional) AWS Top Secret Region CAP Certificate file name on the controller. Available as of provider R2.19.5+.'
            awsts_cap_mission: '- (Optional) AWS Top Secret Region Mission. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_cap_role_name: '- (Optional) AWS Top Secret Region Role Name. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            awsts_cap_url: '- (Optional) AWS Top Secret Region CAP Url. Required when creating an account in AWS Top Secret Region. Available as of provider version R2.19.5+.'
            azurechina_application_id: '- (Optional) AzureChina ARM Application ID. Required when creating an account for AzureChina. Available as of provider version 2.19+.'
            azurechina_application_key: '- (Optional) AzureChina ARM Application key. Required when creating an account for AzureChina. Available as of provider version 2.19+.'
            azurechina_directory_id: '- (Optional) AzureChina ARM Directory ID. Required when creating an account for AzureChina. Available as of provider version 2.19+.'
            azurechina_subscription_id: '- (Optional) AzureChina ARM Subscription ID. Required when creating an account for AzureChina. Available as of provider version 2.19+.'
            azuregov_application_id: '- (Optional) AzureGov ARM Application ID. Required when creating an account for AzureGov. Available as of provider version R2.19+.'
            azuregov_application_key: '- (Optional) AzureGov ARM Application key. Required when creating an account for AzureGov. Available as of provider version R2.19+.'
            azuregov_directory_id: '- (Optional) AzureGov ARM Directory ID. Required when creating an account for AzureGov. Available as of provider version R2.19+.'
            azuregov_subscription_id: '- (Optional) AzureGov ARM Subscription ID. Required when creating an account for AzureGov. Available as of provider version R2.19+.'
            cloud_type: '- (Required) Type of cloud service provider. Only AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud and Edge CSP are supported currently. Enter 1 for AWS, 4 for GCP, 8 for Azure, 16 for OCI, 32 for AzureGov, 256 for AWSGov, 1024 for AWSChina or 2048 for AzureChina, 8192 for Alibaba Cloud, 65536 for Edge CSP.'
            edge_csp_password: '- (Optional) Edge CSP password. Required when creating an Edge CSP account.'
            edge_csp_username: '- (Optional) Edge CSP username. Required when creating an Edge CSP account.'
            gcloud_project_credentials_filepath: '- (Optional) GCloud Project Credentials [local filepath].json. Required when creating an account for GCP.'
            gcloud_project_id: '- (Optional) GCloud Project ID.'
            oci_api_private_key_filepath: '- (Optional) Oracle OCI API Private Key local file path. Required when creating an account for OCI.'
            oci_compartment_id: '- (Optional) Oracle OCI Compartment ID. Required when creating an account for OCI.'
            oci_tenancy_id: '- (Optional) Oracle OCI Tenancy ID. Required when creating an account for OCI.'
            oci_user_id: '- (Optional) Oracle OCI User ID. Required when creating an account for OCI.'
            rbac_groups: '- (Optional) A list of existing RBAC group names. This attribute should only be used when creating an account. Updating this attribute will have no effect. Available as of provider version R2.23.0+.'
        importStatements: []
    aviatrix_account_user:
        subCategory: Accounts
        description: Creates and manages Aviatrix user accounts
        name: aviatrix_account_user
        title: aviatrix_account_user
        examples:
            - name: test_accountuser
              manifest: |-
                {
                  "email": "username1@testdomain.com",
                  "password": "passwordforuser1-1234",
                  "username": "username1"
                }
        argumentDocs:
            account_name: '- (Required) Cloud account name of user to be created. Deprecated as of Aviatrix provider R2.13 (Controller 5.4) due to RBAC implementation.'
            email: '- (Required) Email of address of account user to be created.'
            password: '- (Required) Login password for the account user to be created. If password is changed, current account will be destroyed and a new account will be created.'
            username: '- (Required) Name of account user to be created. It can only include alphanumeric characters(lower case only), hyphens, dots or underscores. 1 to 80 in length. No spaces are allowed.'
        importStatements: []
    aviatrix_aws_guard_duty:
        subCategory: Security
        description: Manage AWS GuardDuty configuration
        name: aviatrix_aws_guard_duty
        title: aviatrix_aws_guard_duty
        examples:
            - name: test_aws_guard_duty
              manifest: |-
                {
                  "account_name": "${aviatrix_account.account_1.account_name}",
                  "excluded_ips": [
                    "127.0.0.1",
                    "10.0.0.1"
                  ],
                  "region": "us-west-1"
                }
              references:
                account_name: aviatrix_account.account_1.account_name
        argumentDocs:
            account_name: '- (Required) Account name.'
            excluded_ips: '- (Optional) Set of excluded IPs.'
            region: '- (Required) Region.'
        importStatements: []
    aviatrix_aws_peer:
        subCategory: Peering
        description: Creates and manages native AWS VPC peerings
        name: aviatrix_aws_peer
        title: aviatrix_aws_peer
        examples:
            - name: test_awspeer
              manifest: |-
                {
                  "account_name1": "test1-account",
                  "account_name2": "test2-account",
                  "rtb_list1": [
                    "rtb-abcd1234"
                  ],
                  "rtb_list2": [
                    "rtb-wxyz5678"
                  ],
                  "vpc_id1": "vpc-abcd1234",
                  "vpc_id2": "vpc-rdef3333",
                  "vpc_reg1": "us-east-1",
                  "vpc_reg2": "us-west-1"
                }
        argumentDocs:
            account_name1: '- (Required) Account name of AWS VPC1.'
            account_name2: '- (Required) Account name of AWS VPC2.'
            rtb_list1: '- (Optional) List of Route table IDs of VPC1. Example: ["rtb-abcd1234", "rtb-wxyz5678"].'
            rtb_list2: '- (Optional) List of Route table IDs of VPC2. Example: ["rtb-abcd1234", "rtb-wxyz5678"].'
            vpc_id1: '- (Required) VPC ID of AWS VPC1. Example: AWS: "vpc-abcd1234".'
            vpc_id2: '- (Required) VPC ID of AWS VPC2. Example: AWS: "vpc-abcd1234".'
            vpc_reg1: '- (Required) Region of AWS VPC1. Example: AWS: "us-east-1".'
            vpc_reg2: '- (Required) Region of AWS VPC2. Example: AWS: "us-east-1".'
        importStatements: []
    aviatrix_aws_tgw:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix AWS TGWs
        name: aviatrix_aws_tgw
        title: aviatrix_aws_tgw
        examples:
            - name: test_aws_tgw
              manifest: |-
                {
                  "account_name": "devops",
                  "aws_side_as_number": "64512",
                  "region": "us-east-1",
                  "tgw_name": "test-AWS-TGW"
                }
            - name: test_aws_gov_tgw
              manifest: |-
                {
                  "account_name": "devops",
                  "aws_side_as_number": "64512",
                  "cloud_type": 256,
                  "region": "us-gov-east-1",
                  "tgw_name": "test-AWSGov-TGW"
                }
        argumentDocs:
            account_name: '- (Required) Name of the cloud account in the Aviatrix controller.'
            attached_aviatrix_transit_gateway: '- (Optional) A list of names of Aviatrix Transit Gateway(s) (transit VPCs) to attach to the Aviatrix_Edge_Domain.'
            attached_vpc: '- (Optional) A list of VPCs attached to the domain (name: security_domain_name) together with its creation. This list needs to be null for "Aviatrix_Edge_Domain".'
            aviatrix_firewall: '- (Optional) Set to true if the security domain is to be used as an Aviatrix Firewall Domain for the Aviatrix Firewall Network. Valid values: true, false. Default value: false.'
            aws_side_as_number: '- (Required) BGP Local ASN (Autonomous System Number). Integer between 1-4294967294. Example: "65001".'
            cidrs: '- (Optional) Set of TGW CIDRs. For example, cidrs = ["10.0.10.0/24", "10.1.10.0/24"]. Available as of provider version R2.18.1+.'
            cloud_type: '- (Optional) Type of cloud service provider, requires an integer value. Supported for AWS (1) and AWSGov (256). Default value: 1.'
            connected_domains: '- (Optional) A list of domains connected to the domain (name: security_domain_name) together with its creation.'
            customized_route_advertisement: '- (Optional) Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".'
            customized_routes: '- (Optional) Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table targeting the TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".'
            disable_local_route_propagation: '- (Optional) Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same security domain. Valid values: true, false. Default value: false.'
            enable_multicast: '- (Optional) Enable multicast. Default value: false. Valid values: true, false. Available in provider version R2.17+.'
            inspection_mode: '- (Optional) Inspection mode. Valid values: "Domain-based", "Connection-based". Default value: "Domain-based". Available as of provider version R2.23+.'
            manage_security_domain: '- (Optional) This parameter is a switch used to determine whether or not to manage security domains using the aviatrix_aws_tgw resource. If this is set to false, creation and management of security domains must be done using the aviatrix_aws_tgw_security_domain resource. Valid values: true, false. Default value: true.'
            manage_transit_gateway_attachment: '- (Optional) This parameter is a switch used to determine whether or not to manage transit gateway attachments to the TGW using the aviatrix_aws_tgw resource. If this is set to false, attachment of transit gateways must be done using the aviatrix_aws_tgw_transit_gateway_attachment resource. Valid values: true, false. Default value: true.'
            manage_vpc_attachment: '- (Optional) This parameter is a switch used to determine whether or not to manage VPC attachments to the TGW using the aviatrix_aws_tgw resource. If this is set to false, attachment of VPCs must be done using the aviatrix_aws_tgw_vpc_attachment resource. Valid values: true, false. Default value: true.'
            native_egress: '- (Optional) Set to true if the security domain is to be used as a native egress domain (for non-Aviatrix Firewall Network-based central Internet bound traffic). Valid values: true, false. Default value: false.'
            native_firewall: '- (Optional) Set to true if the security domain is to be used as a native firewall domain (for non-Aviatrix Firewall Network-based firewall traffic inspection). Valid values: true, false. Default value: false.'
            region: '- (Required) AWS region of AWS TGW to be created in'
            route_tables: '- (Optional) Advanced option. Route tables separated by '','' to participate in TGW Orchestrator, i.e., learned routes will be propagated to these route tables. Example: "rtb-212ff547,rtb-045397874c170c745".'
            security_domain_name: '- (Required) Three default domains ("Aviatrix_Edge_Domain", "Default_Domain" and "Shared_Service_Domain") are required with AWS TGW''s creation.'
            security_domains: '- (Required if manage_security_domain is true) Security Domains to create together with AWS TGW''s creation. Three default domains, along with the connections between them, are created automatically. These three domains can''t be deleted, but the connection between any two of them can be.'
            subnets: '- (Optional) Advanced option. VPC subnets separated by '','' to attach to the VPC. If left blank, the Aviatrix Controller automatically selects a subnet representing each AZ for the VPC attachment. Example: "subnet-214f5646,subnet-085e8c81a89d70846".'
            tgw_id: '- TGW ID. Available as of provider version R2.19+.'
            tgw_name: '- (Required) Name of the AWS TGW to be created'
            vpc_account_name: '- (Required) Cloud account name of the VPC in the Aviatrix controller.'
            vpc_id: '- (Required) VPC ID of the VPC to be attached to the security domain'
            vpc_region: '- (Required) Region of the VPC, needs to be consistent with AWS TGW''s region.'
        importStatements: []
    aviatrix_aws_tgw_connect:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix AWS TGW Connect connections
        name: aviatrix_aws_tgw_connect
        title: aviatrix_aws_tgw_connect
        examples:
            - name: test_aws_tgw_connect
              manifest: |-
                {
                  "connection_name": "aws-tgw-connect",
                  "network_domain_name": "${aviatrix_aws_tgw_vpc_attachment.test_aws_tgw_vpc_attachment.network_domain_name}",
                  "tgw_name": "${aviatrix_aws_tgw.test_aws_tgw.tgw_name}",
                  "transport_vpc_id": "${aviatrix_aws_tgw_vpc_attachment.test_aws_tgw_vpc_attachment.vpc_id}"
                }
              references:
                network_domain_name: aviatrix_aws_tgw_vpc_attachment.test_aws_tgw_vpc_attachment.network_domain_name
                tgw_name: aviatrix_aws_tgw.test_aws_tgw.tgw_name
                transport_vpc_id: aviatrix_aws_tgw_vpc_attachment.test_aws_tgw_vpc_attachment.vpc_id
        argumentDocs:
            connect_attachment_id: '- Connect Attachment ID.'
            connection_name: '- (Required) Connection name.'
            network_domain_name: '- (Required) Network Domain name.'
            security_domain_name: '- (Optional) Security Domain name.'
            tgw_name: '- (Required) AWS TGW name.'
            transport_attachment_id: '- Transport Attachment ID.'
            transport_vpc_id: '- (Required) Transport Attachment VPC ID.'
        importStatements: []
    aviatrix_aws_tgw_connect_peer:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix AWS TGW Connect peers
        name: aviatrix_aws_tgw_connect_peer
        title: aviatrix_aws_tgw_connect_peer
        examples:
            - name: test
              manifest: |-
                {
                  "bgp_inside_cidrs": [
                    "169.254.6.0/29"
                  ],
                  "connect_attachment_id": "${aviatrix_aws_tgw_connect.test_aws_tgw_connect.connect_attachment_id}",
                  "connect_peer_name": "connect-peer-test",
                  "connection_name": "${aviatrix_aws_tgw_connect.test_aws_tgw_connect.connection_name}",
                  "peer_as_number": "65001",
                  "peer_gre_address": "172.31.1.11",
                  "tgw_gre_address": "10.0.0.32",
                  "tgw_name": "${aviatrix_aws_tgw.test_aws_tgw.tgw_name}"
                }
              references:
                connect_attachment_id: aviatrix_aws_tgw_connect.test_aws_tgw_connect.connect_attachment_id
                connection_name: aviatrix_aws_tgw_connect.test_aws_tgw_connect.connection_name
                tgw_name: aviatrix_aws_tgw.test_aws_tgw.tgw_name
        argumentDocs:
            bgp_inside_cidrs: '- (Required) Set of BGP Inside CIDR Block(s).'
            connect_attachment_id: '- (Required) Connect Attachment ID.'
            connect_peer_id: '- Connect Peer ID.'
            connect_peer_name: '- (Required) TGW Connect peer name.'
            connection_name: '- (Required) TGW Connect connection name.'
            peer_as_number: '- (Required) Peer AS Number.'
            peer_gre_address: '- (Required) Peer GRE IP Address.'
            tgw_gre_address: '- (Optional) AWS TGW GRE IP Address.'
            tgw_name: '- (Required) AWS TGW name.'
        importStatements: []
    aviatrix_aws_tgw_directconnect:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix AWS TGW DirectConnect connections
        name: aviatrix_aws_tgw_directconnect
        title: aviatrix_aws_tgw_directconnect
        examples:
            - name: test_aws_tgw_directconnect
              manifest: |-
                {
                  "allowed_prefix": "10.12.0.0/24",
                  "directconnect_account_name": "username",
                  "dx_gateway_id": "30321d76-dd01-49bf",
                  "network_domain_name": "my-ndn-1",
                  "tgw_name": "my-aws-tgw-1"
                }
        argumentDocs:
            allowed_prefix: '- (Required) A list of comma separated CIDRs for DXGW to advertise to remote(on-prem).'
            directconnect_account_name: '- (Required) This parameter represents the name of an Account in Aviatrix controller.'
            dx_gateway_id: '- (Required) This parameter represents the name of a Direct Connect Gateway ID.'
            enable_learned_cidrs_approval: '- (Optional) Switch to enable/disable encrypted transit approval for AWS TGW DirectConnect. Valid values: true, false. Default value: false.'
            network_domain_name: '- (Required) The name of a network domain, to which the direct connect gateway will be attached.'
            security_domain_name: '- (Optional) The name of a security domain, to which the direct connect gateway will be attached.'
            tgw_name: '- (Required) This parameter represents the name of an AWS TGW.'
        importStatements: []
    aviatrix_aws_tgw_intra_domain_inspection:
        subCategory: TGW Orchestrator
        description: Creates and manages the intra domain inspection of network domains in an AWS TGW
        name: aviatrix_aws_tgw_intra_domain_inspection
        title: aviatrix_aws_tgw_intra_domain_inspection
        examples:
            - name: test
              manifest: |-
                {
                  "firewall_domain_name": "firewall-domain",
                  "route_domain_name": "mysd",
                  "tgw_name": "test-AWS-TGW"
                }
        argumentDocs:
            firewall_domain_name: '- (Required) The name of a firewall network domain.'
            route_domain_name: '- (Required) The name of a network domain.'
            tgw_name: '- (Required) The AWS TGW name.'
        importStatements: []
    aviatrix_aws_tgw_network_domain:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix network domains
        name: aviatrix_aws_tgw_network_domain
        title: aviatrix_aws_tgw_network_domain
        examples:
            - name: Default_Domain
              manifest: |-
                {
                  "name": "Default_Domain",
                  "tgw_name": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                }
              references:
                tgw_name: aviatrix_aws_tgw.test_aws_tgw.id
              dependencies:
                aviatrix_aws_tgw.test_aws_tgw: |-
                    {
                      "account_name": "devops",
                      "aws_side_as_number": "64512",
                      "region": "us-east-1",
                      "tgw_name": "test-AWS-TGW"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn1: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn2: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn3: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
            - name: Shared_Service_Domain
              manifest: |-
                {
                  "name": "Shared_Service_Domain",
                  "tgw_name": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                }
              references:
                tgw_name: aviatrix_aws_tgw.test_aws_tgw.id
              dependencies:
                aviatrix_aws_tgw.test_aws_tgw: |-
                    {
                      "account_name": "devops",
                      "aws_side_as_number": "64512",
                      "region": "us-east-1",
                      "tgw_name": "test-AWS-TGW"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn1: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn2: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn3: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
            - name: Aviatrix_Edge_Domain
              manifest: |-
                {
                  "name": "Aviatrix_Edge_Domain",
                  "tgw_name": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                }
              references:
                tgw_name: aviatrix_aws_tgw.test_aws_tgw.id
              dependencies:
                aviatrix_aws_tgw.test_aws_tgw: |-
                    {
                      "account_name": "devops",
                      "aws_side_as_number": "64512",
                      "region": "us-east-1",
                      "tgw_name": "test-AWS-TGW"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn1: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn2: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn3: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
            - name: test
              manifest: |-
                {
                  "depends_on": [
                    "${aviatrix_aws_tgw_network_domain.Default_Domain}",
                    "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain}",
                    "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain}"
                  ],
                  "name": "test_domain",
                  "tgw_name": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                }
              references:
                tgw_name: aviatrix_aws_tgw.test_aws_tgw.id
              dependencies:
                aviatrix_aws_tgw.test_aws_tgw: |-
                    {
                      "account_name": "devops",
                      "aws_side_as_number": "64512",
                      "region": "us-east-1",
                      "tgw_name": "test-AWS-TGW"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn1: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn2: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Aviatrix_Edge_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
                aviatrix_aws_tgw_peering_domain_conn.default_sd_conn3: |-
                    {
                      "domain_name1": "${aviatrix_aws_tgw_network_domain.Default_Domain.name}",
                      "domain_name2": "${aviatrix_aws_tgw_network_domain.Shared_Service_Domain.name}",
                      "tgw_name1": "${aviatrix_aws_tgw.test_aws_tgw.id}",
                      "tgw_name2": "${aviatrix_aws_tgw.test_aws_tgw.id}"
                    }
        argumentDocs:
            aviatrix_firewall: '- (Optional) Set to true if the network domain is to be used as an Aviatrix Firewall Domain for the Aviatrix Firewall Network. Valid values: true, false. Default value: false.'
            name: '- (Required) The name of the network domain.'
            native_egress: '- (Optional) Set to true if the network domain is to be used as a native egress domain (for non-Aviatrix Firewall Network-based central Internet bound traffic). Valid values: true, false. Default value: false.'
            native_firewall: '- (Optional) Set to true if the network domain is to be used as a native firewall domain (for non-Aviatrix Firewall Network-based firewall traffic inspection). Valid values: true, false. Default value: false.'
            tgw_name: '- (Required) The AWS TGW name of the network domain.'
        importStatements: []
    aviatrix_aws_tgw_peering:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix inter-region AWS TGW peerings
        name: aviatrix_aws_tgw_peering
        title: aviatrix_aws_tgw_peering
        examples:
            - name: test
              manifest: |-
                {
                  "tgw_name1": "tgw1",
                  "tgw_name2": "tgw2"
                }
        argumentDocs:
            tgw_name1: '- (Required) This parameter represents name of the first AWS TGW to make a peer pair.'
            tgw_name2: '- (Required) This parameter represents name of the second AWS TGW to make a peer pair.'
        importStatements: []
    aviatrix_aws_tgw_peering_domain_conn:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix domain connections between peered AWS TGWs
        name: aviatrix_aws_tgw_peering_domain_conn
        title: aviatrix_aws_tgw_peering_domain_conn
        examples:
            - name: test
              manifest: |-
                {
                  "domain_name1": "Default_Domain",
                  "domain_name2": "Default_Domain",
                  "tgw_name1": "tgw1",
                  "tgw_name2": "tgw2"
                }
        argumentDocs:
            domain_name1: '- (Required) The name of the source domain to make a connection.'
            domain_name2: '- (Required) The name of the destination domain to make a connection.'
            tgw_name1: '- (Required) The AWS TGW name of the source domain to make a connection.'
            tgw_name2: '- (Required) The AWS TGW name of the destination domain to make a connection.'
        importStatements: []
    aviatrix_aws_tgw_transit_gateway_attachment:
        subCategory: TGW Orchestrator
        description: Manages attachment of transit gateways to the AWS TGW
        name: aviatrix_aws_tgw_transit_gateway_attachment
        title: aviatrix_aws_tgw_transit_gateway_attachment
        examples:
            - name: test_transit_gateway_attachment
              manifest: |-
                {
                  "region": "us-east-1",
                  "tgw_name": "test-tgw",
                  "transit_gateway_name": "transit-gw-1",
                  "vpc_account_name": "test-account",
                  "vpc_id": "vpc-0e2fac2b91c6697b3"
                }
        argumentDocs:
            region: '- (Required) AWS Region of the TGW.'
            tgw_name: '- (Required) Name of the AWS TGW.'
            transit_gateway_name: '- (Required) Name of the transit gateway to be attached to the AWS TGW.'
            vpc_account_name: '- (Required) The name of the cloud account in the Aviatrix controller, which is associated with the VPC.'
            vpc_id: '- (Required) VPC ID of the VPC, where transit gateway is launched.'
        importStatements: []
    aviatrix_aws_tgw_vpc_attachment:
        subCategory: TGW Orchestrator
        description: Manages attaching/detaching VPC to/from an AWS TGW, and FireNet Gateway to TGW Firewall Domain
        name: aviatrix_aws_tgw_vpc_attachment
        title: aviatrix_aws_tgw_vpc_attachment
        examples:
            - name: test_aws_tgw_vpc_attachment
              manifest: |-
                {
                  "network_domain_name": "my-ndn",
                  "region": "us-east-1",
                  "tgw_name": "test-tgw",
                  "vpc_account_name": "test-account",
                  "vpc_id": "vpc-0e2fac2b91c6697b3"
                }
        argumentDocs:
            customized_route_advertisement: '- (Optional and ForceNew) Advanced option. Customized route(s) to be advertised to other VPCs that are connected to the same TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".'
            customized_routes: '- (Optional) Advanced option. Customized Spoke VPC Routes. It allows the admin to enter non-RFC1918 routes in the VPC route table targeting the TGW. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".'
            disable_local_route_propagation: '- (Optional and ForceNew) Advanced option. If set to true, it disables automatic route propagation of this VPC to other VPCs within the same network domain. Valid values: true, false. Default value: false.'
            edge_attachment: '- (Optional) Advanced option. To allow access to the private IP of the MGMT interface of the Firewalls, set this attribute to enable Management Access From Onprem. This feature advertises the Firewalls private MGMT subnet to your Edge domain. Example: "vpn-0068bb31917ff2289".'
            network_domain_name: '- (Required) The name of the network domain, to which the VPC will be attached to. If changed, the VPC will be detached from the old domain, and attached to the new domain.'
            region: '- (Required) AWS Region of the TGW.'
            route_tables: '- (Optional and ForceNew) Advanced option. Route tables separated by '','' to participate in TGW Orchestrator, i.e., learned routes will be propagated to these route tables. Example: "rtb-212ff547,rtb-045397874c170c745".'
            security_domain_name: '- (optional) The name of the security domain, to which the VPC will be attached to. If changed, the VPC will be detached from the old domain, and attached to the new domain.'
            subnets: '- (Optional and ForceNew) Advanced option. VPC subnets separated by '','' to attach to the VPC. If omitted, the Aviatrix Controller automatically computes a subnet representing each AZ for the VPC attachment and Terraform will not manage this attribute. Example: "subnet-214f5646,subnet-085e8c81a89d70846".'
            tgw_name: '- (Required) Name of the AWS TGW.'
            vpc_account_name: '- (Required) The name of the cloud account in the Aviatrix controller, which is associated with the VPC.'
            vpc_id: '- (Required) VPC ID of the VPC to be attached to the specified network_domain_name.'
        importStatements: []
    aviatrix_aws_tgw_vpn_conn:
        subCategory: TGW Orchestrator
        description: Creates and manages Aviatrix AWS TGW VPN connections
        name: aviatrix_aws_tgw_vpn_conn
        title: aviatrix_aws_tgw_vpn_conn
        examples:
            - name: test_aws_tgw_vpn_conn
              manifest: |-
                {
                  "connection_name": "my-conn1",
                  "connection_type": "dynamic",
                  "public_ip": "40.0.0.0",
                  "remote_as_number": "12",
                  "route_domain_name": "Default_Domain",
                  "tgw_name": "test-tgw1"
                }
            - name: test_aws_tgw_vpn_conn
              manifest: |-
                {
                  "connection_name": "my-conn1",
                  "connection_type": "static",
                  "public_ip": "40.0.0.0",
                  "remote_cidr": "16.0.0.0/16,16.1.0.0/16",
                  "route_domain_name": "Default_Domain",
                  "tgw_name": "test-tgw1"
                }
        argumentDocs:
            connection_name: '- (Required) Unique name of the connection.'
            connection_type: '- (Optional) Connection type. Valid values: ''dynamic'', ''static''. ''dynamic'' stands for a BGP VPN connection; ''static'' stands for a static VPN connection. Default value: ''dynamic''.'
            enable_global_acceleration: '- (Optional) Enable Global Acceleration. Type: Boolean. Default: false.'
            enable_learned_cidrs_approval: '- (Optional) Switch to enable/disable encrypted transit approval for AWS TGW VPN connection. Valid values: true, false. Default value: false.'
            inside_ip_cidr_tun_1: '- (Optional) Inside IP CIDR for Tunnel 1. A /30 CIDR in 169.254.0.0/16.'
            inside_ip_cidr_tun_2: '- (Optional) Inside IP CIDR for Tunnel 2. A /30 CIDR in 169.254.0.0/16.'
            pre_shared_key_tun_1: '- (Optional) Pre-Shared Key for Tunnel 1. A 8-64 character string with alphanumeric underscore(_) and dot(.). It cannot start with 0.'
            pre_shared_key_tun_2: '- (Optional) Pre-Shared Key for Tunnel 2. A 8-64 character string with alphanumeric underscore(_) and dot(.). It cannot start with 0.'
            public_ip: '- (Required) Public IP address. Example: "40.0.0.0".'
            remote_as_number: '- (Optional) AWS side as a number. Integer between 1-4294967294. Example: "12". Required for a dynamic VPN connection.'
            remote_cidr: '- (Optional) Remote CIDRs separated by ",". Example: AWS: "16.0.0.0/16,16.1.0.0/16". Required for a static VPN connection.'
            route_domain_name: '- (Required) The name of a route domain, to which the vpn will be attached.'
            tgw_name: '- (Required) This parameter represents the name of an AWS TGW.'
            vpn_id: '- ID of the VPN generated by creation of the connection.'
            vpn_tunnel_data: '- AWS TGW VPN tunnel data.'
        importStatements: []
    aviatrix_azure_peer:
        subCategory: Peering
        description: Creates and manages of the Aviatrix peerings between Azure VNets
        name: aviatrix_azure_peer
        title: aviatrix_azure_peer
        examples:
            - name: test_azurepeer
              manifest: |-
                {
                  "account_name1": "test1-account",
                  "account_name2": "test2-account",
                  "vnet_name_resource_group1": "Foo_VNet1:Bar_RG1:GUID1",
                  "vnet_name_resource_group2": "Foo_VNet2:Bar_RG2:GUID2",
                  "vnet_reg1": "Central US",
                  "vnet_reg2": "East US"
                }
        argumentDocs:
            account_name1: '- (Required) Name of the Azure cloud account in the Aviatrix controller for VNet 1.'
            account_name2: '- (Required) Name of the Azure cloud account in the Aviatrix controller for VNet 2.'
            vnet_cidr1: '- List of VNet CIDR of vnet_name_resource_group1.'
            vnet_cidr2: '- List of VNet CIDR of vnet_name_resource_group2.'
            vnet_name_resource_group1: '- (Required) Azure VNet 1''s name. Example: "VNet_Name1:Resource_Group_Name1:GUID1".'
            vnet_name_resource_group2: '- (Required) Azure VNet 2''s name. Example: "VNet_Name2:Resource_Group_Name2:GUID2".'
            vnet_reg1: '- (Required) Region of Azure VNet 1. Example: "East US 2".'
            vnet_reg2: '- (Required) Region of Azure VNet 2. Example: "East US 2".'
        importStatements: []
    aviatrix_azure_spoke_native_peering:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix Azure spoke native peerings
        name: aviatrix_azure_spoke_native_peering
        title: aviatrix_azure_spoke_native_peering
        examples:
            - name: test
              manifest: |-
                {
                  "spoke_account_name": "devops-azure",
                  "spoke_region": "West US",
                  "spoke_vpc_id": "Foo_VNet:Bar_RG:GUID",
                  "transit_gateway_name": "transit-gw-azure"
                }
        argumentDocs:
            spoke_account_name: '- (Required) An Aviatrix account that corresponds to a subscription in Azure.'
            spoke_region: '- (Required) Spoke VNet region. Example: "West US".'
            spoke_vpc_id: '- (Required) Combination of the Spoke''s VNet name, resource group and GUID. Example: "Foo_VNet:Bar_RG:GUID".'
            transit_gateway_name: '- (Required) Name of an Transit FireNet-enabled Azure transit gateway.'
        importStatements: []
    aviatrix_azure_vng_conn:
        subCategory: Multi-Cloud Transit
        description: Creates and manages the connection between Aviatrix Transit Gateway and Azure VNG
        name: aviatrix_azure_vng_conn
        title: aviatrix_azure_vng_conn
        examples:
            - name: test
              manifest: |-
                {
                  "connection_name": "connection",
                  "primary_gateway_name": "primary-gateway"
                }
        argumentDocs:
            attached: '- The status of the connection.'
            connection_name: '- (Required) Connection name.'
            primary_gateway_name: '- (Required) Primary Aviatrix transit gateway name.'
            vng_name: '- Name of Azure VNG.'
            vpc_id: '- VPC ID.'
        importStatements: []
    aviatrix_centralized_transit_firenet:
        subCategory: Firewall Network
        description: Creates and manages the centralized Transit FireNet
        name: aviatrix_centralized_transit_firenet
        title: aviatrix_centralized_transit_firenet
        examples:
            - name: test
              manifest: |-
                {
                  "primary_firenet_gw_name": "primary-transit",
                  "secondary_firenet_gw_name": "secondary-transit"
                }
        argumentDocs:
            primary_firenet_gw_name: '- (Required) Primary FireNet gateway name.'
            secondary_firenet_gw_name: '- (Required) Secondary FireNet gateway name.'
        importStatements: []
    aviatrix_cloudn_registration:
        subCategory: CloudN
        description: Register and Deregister CloudN as a Gateway
        name: aviatrix_cloudn_registration
        title: aviatrix_cloudn_registration
        examples:
            - name: test_cloudn_registration
              manifest: |-
                {
                  "address": "10.210.38.100",
                  "local_as_number": "65000",
                  "name": "cloudn-test",
                  "password": "password",
                  "prepend_as_path": [
                    "65000",
                    "65000"
                  ],
                  "username": "admin"
                }
        argumentDocs:
            address: '- (Required) Aviatrix CloudN''s public or private IP. Type: String.'
            local_as_number: '- (Optional) BGP AS Number to assign to the Transit Gateway. Type: String.'
            name: '- (Required) Gateway name to assign to the CloudN device. Type: String.'
            password: '- (Required) Aviatrix account password corresponding to above username. Type: String.'
            prepend_as_path: '- (Optional) Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires local_as_number to be set. Type: List.'
            username: '- (Required) Aviatrix account username which will be used to log in to Aviatrix CloudN. Type: String.'
        importStatements: []
    aviatrix_cloudn_transit_gateway_attachment:
        subCategory: CloudN
        description: Create and manage CloudN Transit Gateway Attachments
        name: aviatrix_cloudn_transit_gateway_attachment
        title: aviatrix_cloudn_transit_gateway_attachment
        examples:
            - name: test
              manifest: |-
                {
                  "cloudn_bgp_asn": "65046",
                  "cloudn_lan_interface_neighbor_bgp_asn": "65219",
                  "cloudn_lan_interface_neighbor_ip": "10.210.38.100",
                  "connection_name": "cloudn-transit-attachment-test",
                  "device_name": "${aviatrix_device_registration.test_device.name}",
                  "enable_over_private_network": false,
                  "transit_gateway_bgp_asn": "65000",
                  "transit_gateway_name": "${aviatrix_transit_gateway.aws_transit.gw_name}"
                }
              references:
                device_name: aviatrix_device_registration.test_device.name
                transit_gateway_name: aviatrix_transit_gateway.aws_transit.gw_name
        argumentDocs:
            cloudn_bgp_asn: '- (Required) CloudN BGP AS Number. Type: String.'
            cloudn_lan_interface_neighbor_bgp_asn: '- (Required) CloudN LAN Interface Neighbor''s AS Number. Type: String.'
            cloudn_lan_interface_neighbor_ip: '- (Required) CloudN LAN Interface Neighbor''s IP Address. Type: String.'
            connection_name: '- (Required) Connection Name. Type: String.'
            device_name: '- (Required) CloudN device name. Type: String.'
            enable_jumbo_frame: '- (Optional) Enable Jumbo Frame support for the connection. Type: Boolean. Default: false.'
            enable_over_private_network: '- (Optional) Enable connection over private network. Type: Boolean. Default: true.'
            prepend_as_path: '- (Optional) Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Requires transit_gateway_bgp_asn to be set. Type: List. Available as of provider version R2.21.0+.'
            transit_gateway_bgp_asn: '- (Required) Transit Gateway BGP AS Number. Type: String.'
            transit_gateway_name: '- (Required) Transit Gateway Name. Type: String.'
        importStatements: []
    aviatrix_cloudwatch_agent:
        subCategory: Settings
        description: Enables and disables cloudwatch_agent
        name: aviatrix_cloudwatch_agent
        title: aviatrix_cloudwatch_agent
        examples:
            - name: test_cloudwatch_agent
              manifest: |-
                {
                  "cloudwatch_role_arn": "arn:aws:iam::469550033836:role/aviatrix-role-cloudwatch",
                  "excluded_gateways": [
                    "a",
                    "b"
                  ],
                  "region": "us-east-1"
                }
        argumentDocs:
            cloudwatch_role_arn: (Required) CloudWatch role ARN.
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            log_group_name: (Optional) Log group name. "AVIATRIX-CLOUDWATCH-LOG" by default.
            region: (Required) Name of AWS region.
            status: '- The status of cloudwatch agent.'
        importStatements: []
    aviatrix_controller_bgp_max_as_limit_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller BGP max AS limit for transit gateways
        name: aviatrix_controller_bgp_max_as_limit_config
        title: aviatrix_controller_bgp_max_as_limit_config
        examples:
            - name: test_max_as_limit
              manifest: |-
                {
                  "max_as_limit": 1
                }
        argumentDocs:
            max_as_limit: '- The maximum AS path limit allowed by transit gateways when handling BGP/Peering route propagation. Must be a number in the range [1-254].'
        importStatements: []
    aviatrix_controller_cert_domain_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller cert domain config
        name: aviatrix_controller_cert_domain_config
        title: aviatrix_controller_cert_domain_config
        examples:
            - name: test
              manifest: |-
                {
                  "cert_domain": "abc.com"
                }
        argumentDocs:
            cert_domain: '- (Optional) Domain name that is used in FQDN for generating cert. Default value: "aviatrixnetwork.com".'
        importStatements: []
    aviatrix_controller_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller config resource
        name: aviatrix_controller_config
        title: aviatrix_controller_config
        examples:
            - name: test_controller_config
              manifest: |-
                {
                  "fqdn_exception_rule": false,
                  "http_access": true
                }
            - name: test_controller_config
              manifest: |-
                {
                  "fqdn_exception_rule": false,
                  "http_access": true,
                  "manage_gateway_upgrades": false,
                  "target_version": "latest"
                }
            - name: test_controller_config
              manifest: |-
                {
                  "fqdn_exception_rule": false,
                  "http_access": true,
                  "target_version": "latest"
                }
            - name: test_controller_config
              manifest: |-
                {
                  "backup_account_name": "account_example",
                  "backup_bucket_name": "bucket_example",
                  "backup_cloud_type": 1,
                  "backup_configuration": true
                }
            - name: test_controller_config
              manifest: |-
                {
                  "ca_certificate_file_path": "/path/to/ca_certificate.pem",
                  "server_private_key_file_path": "/path/to/server.key",
                  "server_public_certificate_file_path": "/path/to/server.crt"
                }
            - name: test_controller_config
              manifest: |-
                {
                  "aws_guard_duty_scanning_interval": 10
                }
        argumentDocs:
            aws_guard_duty_scanning_interval: '- (Optional) Configure the AWS Guard Duty scanning interval. Valid values: 5, 10, 15, 30 or 60. Default value: 60. Available as of provider version R2.18+.'
            backup_account_name: '- (Optional) Name of the cloud account in the Aviatrix controller.'
            backup_bucket_name: '- (Optional) Bucket Name. Required to enable configuration backup for AWS, AWSGov, GCP and OCI.'
            backup_cloud_type: '- (Optional) Type of cloud service provider, requires an integer value. Use 1 for AWS, 4 for GCP, 8 for Azure, 16 for OCI, and 256 for AWSGov.'
            backup_configuration: '- (Optional) Switch to enable/disable controller CloudN backup config. Valid values: true, false. Default value: false.'
            backup_container_name: '- (Optional) Container name. Required to enable configuration backup for Azure.'
            backup_region: '- (Optional) Name of region. Required to enable configuration backup for Azure and OCI.'
            backup_storage_name: '- (Optional) Storage name. Required to enable configuration backup for Azure.'
            ca_certificate_file: '- (Optional) CA certificate. To read certificate file from a file, please use the built-in file function. Available as of provider version R2.21.2+.'
            ca_certificate_file_path: '- (Optional) File path to CA certificate. Available as of provider version R2.18+.'
            current_version: '- Current version of the controller including the build number. Example: "6.5.123". Available as of provider version R2.20.0+.'
            enable_vpc_dns_server: '- (Optional) Enable VPC/VNET DNS Server for the controller. Valid values: true, false. Default value: false.'
            fqdn_exception_rule: '- (Optional) Enable/disable packets without an SNI field to pass through gateway(s). Valid values: true, false. Default value: true. For more information on this setting, please see here'
            http_access: '- (Optional) Switch for HTTP access. Valid values: true, false. Default value: false.'
            manage_gateway_upgrades: '- (Optional) If true, aviatrix_controller_config will upgrade all gateways when target_version is set. If false, only the controller will be upgraded when target_version is set. In that case gateway upgrades should be handled in each gateway resource individually using the software_version and image_version attributes. Type: boolean. Default: true. Available as of provider version R2.20.0+.'
            multiple_backups: '- (Optional) Switch to enable the Controller to backup up to a maximum of 3 rotating backups. Valid values: true, false. Default value: false.'
            previous_version: '- Previous version of the controller including the build number. Example: "6.5.123". Available as of provider version R2.20.0+.'
            security_group_management: '- (Optional) Enable to allow Controller to automatically manage inbound rules from gateways. Valid values: true, false. Default value: false.'
            server_private_key_file: '- (Optional) Server private key. To read the private key from a file, please use the built-in file function. Available as of provider version R2.21.2+.'
            server_private_key_file_path: '- (Optional) File path to server private key. Available as of provider version R2.18+.'
            server_public_certificate_file: '- (Optional) Server public certificate. To read certificate file from a file, please use the built-in file function. Available as of provider version R2.21.2+.'
            server_public_certificate_file_path: '- (Optional) File path to the server public certificate. Available as of provider version R2.18+.'
            sg_management_account_name: '- (Optional) Select the primary access account.'
            target_version: '- (Optional) The release version number to which the controller will be upgraded to. If not specified, controller will not be upgraded. If set to "latest", controller will be upgraded to the latest release. Please see the Controller upgrade guide for more information.'
            version: '- Current version of the controller without build number. Example: "6.5"'
        importStatements: []
    aviatrix_controller_email_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller email config resource
        name: aviatrix_controller_email_config
        title: aviatrix_controller_email_config
        examples:
            - name: test_email_config
              manifest: |-
                {
                  "admin_alert_email": "administrator@mycompany.com",
                  "critical_alert_email": "it-support@mycompany.com",
                  "security_event_email": "security-admin-group@mycompany.com",
                  "status_change_email": "it-admin-group@mycompany.com"
                }
            - name: test_email_config
              manifest: |-
                {
                  "admin_alert_email": "administrator@mycompany.com",
                  "critical_alert_email": "it-support@mycompany.com",
                  "security_event_email": "security-admin-group@mycompany.com",
                  "status_change_email": "it-admin-group@mycompany.com",
                  "status_change_notification_interval": 20
                }
        argumentDocs:
            admin_alert_email: '- (Required) Email to receive important account and certification information.'
            admin_alert_email_verified: '- Whether admin alert notification email is verified.'
            critical_alert_email: '- (Required) Email to receive field notices and critical notices.'
            critical_alert_email_verified: '- Whether critical alert notification email is verified.'
            security_event_email: '- (Required) Email to receive security and CVE (Common Vulnerabilities and Exposures) notification emails.'
            security_event_email_verified: '- Whether security event notification email is verified.'
            status_change_email: '- (Required) Email to receive system/tunnel status notification emails.'
            status_change_email_verified: '- Whether status change notification email is verified.'
            status_change_notification_interval: '- (Optional) Status change notification interval in seconds. Default value: 60.'
        importStatements: []
    aviatrix_controller_email_exception_notification_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller email exception notification config
        name: aviatrix_controller_email_exception_notification_config
        title: aviatrix_controller_email_exception_notification_config
        examples:
            - name: test
              manifest: |-
                {
                  "enable_email_exception_notification": false
                }
        argumentDocs:
            enable_email_exception_notification: '- (Optional) Enable exception email notification. When set to true, exception email will be sent to "exception@aviatrix.com", when set to false, exception email will be sent to controller''s admin email. Valid values: true, false. Default value: true.'
        importStatements: []
    aviatrix_controller_gateway_keepalive_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix Controller Gateway Keepalive for gateways
        name: aviatrix_controller_gateway_keepalive_config
        title: aviatrix_controller_gateway_keepalive_config
        examples:
            - name: test_gateway_keepalive
              manifest: |-
                {
                  "keepalive_speed": "medium"
                }
        argumentDocs:
            keepalive_speed: '- The gateway keepalive template name. Must be one of "slow", "medium" or "fast". Visit here for the complete documentation about the gateway keepalive configuration.'
        importStatements: []
    aviatrix_controller_private_mode_config:
        subCategory: Private Mode
        description: Creates and manages an Aviatrix Controller's Private Mode config
        name: aviatrix_controller_private_mode_config
        title: aviatrix_controller_private_mode_config
        examples:
            - name: test
              manifest: |-
                {
                  "enable_private_mode": true
                }
        argumentDocs:
            copilot_instance_id: '- (Optional) Instance ID of a copilot instance to associate with an Aviatrix Controller in Private Mode. The copilot instance must be in the same VPC as the Aviatrix Controller.'
            enable_private_mode: '- (Required) Whether to enable Private Mode on an Aviatrix Controller.'
            proxies: '- (Optional) Set of Controller proxies for Private Mode.'
        importStatements: []
    aviatrix_controller_private_oob:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller private OOB config resource
        name: aviatrix_controller_private_oob
        title: aviatrix_controller_private_oob
        examples:
            - name: test_private_oob
              manifest: |-
                {
                  "enable_private_oob": true
                }
        argumentDocs:
            enable_private_oob: '- (Optional) Switch to enable/disable Aviatrix controller private OOB. Valid values: true, false. Default value: false.'
        importStatements: []
    aviatrix_controller_security_group_management_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller security group management config resource
        name: aviatrix_controller_security_group_management_config
        title: aviatrix_controller_security_group_management_config
        examples:
            - name: test_sqm_config
              manifest: |-
                {
                  "account_name": "devops",
                  "enable_security_group_management": true
                }
            - name: test_sqm_config
              manifest: |-
                {
                  "enable_security_group_management": false
                }
        argumentDocs:
            account_name: '- (Optional) Select the primary access account.'
            enable_security_group_management: '- (Required) Enable to allow Controller to automatically manage inbound rules from gateways. Valid values: true, false.'
        importStatements: []
    aviatrix_copilot_association:
        subCategory: Settings
        description: Creates and manages a CoPilot Association
        name: aviatrix_copilot_association
        title: aviatrix_copilot_association
        examples:
            - name: test_copilot_association
              manifest: |-
                {
                  "copilot_address": "copilot.aviatrix.com"
                }
        argumentDocs:
            copilot_address: '- (Required) CoPilot instance IP Address or Hostname.'
        importStatements: []
    aviatrix_copilot_security_group_management_config:
        subCategory: Settings
        description: Creates and manages CoPilot Security Group Management Configuration
        name: aviatrix_copilot_security_group_management_config
        title: aviatrix_copilot_security_group_management_config
        examples:
            - name: test
              manifest: |-
                {
                  "account_name": "aws-account",
                  "cloud_type": 1,
                  "enable_copilot_security_group_management": true,
                  "instance_id": "i-1234567890",
                  "region": "us-east-1",
                  "vpc_id": "vpc-1234567890"
                }
        argumentDocs:
            account_name: '- (Optional) Aviatrix access account name. Required to enable copilot security group management.'
            cloud_type: '- (Optional) Cloud type. The type of this attribute is Integer. Only support AWS, Azure and OCI. Required to enable copilot security group management.'
            enable_copilot_security_group_management: '- (Required) Switch to enable copilot security group management. Valid values: true, false.'
            instance_id: '- (Optional) CoPilot instance ID. Required to enable copilot security group management.'
            region: '- (Optional) Region where CoPilot is deployed. Required and valid for AWS and Azure.'
            vpc_id: '- (Optional) VPC ID. Required to enable copilot security group management.'
            zone: '- (Optional) Zone where CoPilot is deployed. Required and valid for GCP.'
        importStatements: []
    aviatrix_datadog_agent:
        subCategory: Settings
        description: Enables and disables datadog agent
        name: aviatrix_datadog_agent
        title: aviatrix_datadog_agent
        examples:
            - name: test_datadog_agent
              manifest: |-
                {
                  "api_key": "your_api_key",
                  "excluded_gateways": [
                    "a",
                    "b"
                  ],
                  "site": "datadoghq.com"
                }
        argumentDocs:
            api_key: (Required) API key.
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            metrics_only: (Optional) Only export metrics without exporting logs. False by default.
            site: (Optional) Site preference ("datadoghq.com" or" datadoghq.eu"). "datadoghq.com" by default.
            status: '- The status of datadog agent.'
        importStatements: []
    aviatrix_device_interface_config:
        subCategory: CloudN
        description: Configures WAN primary interface and IP for a device.
        name: aviatrix_device_interface_config
        title: aviatrix_device_interface_config
        examples:
            - name: test_device_interface_config
              manifest: |-
                {
                  "device_name": "test-device",
                  "wan_primary_interface": "eth0",
                  "wan_primary_interface_public_ip": "181.12.43.21"
                }
        argumentDocs:
            device_name: '- (Required) Name of the device.'
            wan_primary_interface: '- (Required) Name of the WAN primary interface.'
            wan_primary_interface_public_ip: '- (Required) The WAN Primary interface public IP.'
        importStatements: []
    aviatrix_distributed_firewalling_config:
        subCategory: Secured Networking
        description: Creates and manages an Aviatrix Distributed-firewalling Config
        name: aviatrix_distributed_firewalling_config
        title: aviatrix_distributed_firewalling_config
        examples:
            - name: test
              manifest: |-
                {
                  "enable_distributed_firewalling": true
                }
        argumentDocs:
            enable_distributed_firewalling: '- (Optional) Whether to enable Private Mode on an Aviatrix Controller. Valid values: true, false. Default value: false.'
        importStatements: []
    aviatrix_distributed_firewalling_intra_vpc:
        subCategory: Secured Networking
        description: Creates and manages an Aviatrix Distributed-firewalling Intra VPC List
        name: aviatrix_distributed_firewalling_intra_vpc
        title: aviatrix_distributed_firewalling_intra_vpc
        examples:
            - name: test
              manifest: |-
                {
                  "vpcs": [
                    {
                      "account_name": "azure-account",
                      "region": "Central US",
                      "vpc_id": "azure-vpc-0:rg-av-azure-vpc-0-808200:8168668b-a646-45b9-b88b-d756e60cf130"
                    },
                    {
                      "account_name": "azure-account",
                      "region": "Central US",
                      "vpc_id": "azure-vpc-1:rg-av-azure-vpc-1-562104:622a2277-5c57-4149-bcb9-c00d9284ee18"
                    }
                  ]
                }
        argumentDocs:
            account_name: '- (Required) Account Name of the VPC.'
            region: '- (Required) Region of the VPC..'
            vpc_id: '- (Required) vpc_id of the VPC.'
            vpcs: '- (Required) List of distributed-firewalling enabled intra VPCs.'
        importStatements: []
    aviatrix_distributed_firewalling_policy_list:
        subCategory: Secured Networking
        description: Creates and manages an Aviatrix Distributed-firewalling Policy List
        name: aviatrix_distributed_firewalling_policy_list
        title: aviatrix_distributed_firewalling_policy_list
        examples:
            - name: test
              manifest: |-
                {
                  "policies": [
                    {
                      "action": "DENY",
                      "dst_smart_groups": [
                        "82e50c85-82bf-4b3b-b9da-aaed34a3aa53"
                      ],
                      "logging": false,
                      "name": "df-policy-1",
                      "priority": 1,
                      "protocol": "ICMP",
                      "src_smart_groups": [
                        "f15c9890-c8c4-4c1a-a2b5-ef0ab34d2e30"
                      ],
                      "watch": false
                    },
                    {
                      "action": "PERMIT",
                      "dst_smart_groups": [
                        "f05b0ad7-d2d7-4d16-b2f6-48492319414c"
                      ],
                      "name": "df-policy",
                      "port_ranges": [
                        {
                          "hi": 50000,
                          "lo": 49000
                        }
                      ],
                      "priority": 0,
                      "protocol": "TCP",
                      "src_smart_groups": [
                        "7e7d1573-7a7a-4a53-bcb5-1ad5041961e0"
                      ]
                    }
                  ]
                }
        argumentDocs:
            action: '- (Required) Action for the policy. Must be one of PERMIT or DENY.'
            dst_smart_groups: '- (Required) List of Smart Group UUIDs for the destination for the policy.'
            hi: '- (Optional) Upper bound for the range of ports. When not set, lo is the only port that matches the policy.'
            lo: '- (Required) Lower bound for the range of ports.'
            logging: '- (Optional) Whether to enable logging for packets that match the policy. Type: Boolean.'
            name: '- (Required) Name of the policy.'
            policies: '- (Required) List of policies.'
            port_ranges: '- (Optional) List of port ranges for the policy. Cannot be used when protocol is "ICMP".'
            priority: '- (Optional)  Priority for the policy. Default: 0. Type: Integer.'
            protocol: '- (Required) Protocol for the policy. Must be one of TCP, UDP, ICMP or ANY.'
            src_smart_groups: '- (Required) List of Smart Group UUIDs for the source for the policy.'
            uuid: '- (Computed) UUID for the Policy.'
            watch: '- (Optional) Whether to enforce the policy or only watch packets. If "true" packets are only watched. This allows you to observe if the traffic impacted by this rule causes any inadvertent issues (such as traffic being dropped). Type: Boolean.'
        importStatements: []
    aviatrix_edge_csp:
        subCategory: Multi-Cloud Transit
        description: Creates Aviatrix Edge CSP
        name: aviatrix_edge_csp
        title: aviatrix_edge_csp
        examples:
            - name: test
              manifest: |-
                {
                  "account_name": "edge_csp_account",
                  "gw_name": "edge-test",
                  "lan_interface_ip_prefix": "10.60.0.0/24",
                  "local_as_number": "65000",
                  "management_interface_config": "DHCP",
                  "prepend_as_path": [
                    "65000",
                    "65000"
                  ],
                  "site_id": "site-123",
                  "wan_default_gateway_ip": "10.60.0.0",
                  "wan_interface_ip_prefix": "10.60.0.0/24"
                }
            - name: test
              manifest: |-
                {
                  "dns_server_ip": "10.60.0.0",
                  "gw_name": "edge-test",
                  "lan_interface_ip_prefix": "10.60.0.0/24",
                  "local_as_number": "65000",
                  "management_default_gateway_ip": "10.60.0.0",
                  "management_interface_config": "Static",
                  "management_interface_ip_prefix": "10.60.0.0/24",
                  "prepend_as_path": [
                    "65000",
                    "65000"
                  ],
                  "secondary_dns_server_ip": "10.60.0.0",
                  "site_id": "site-123",
                  "wan_default_gateway_ip": "10.60.0.0",
                  "wan_interface_ip_prefix": "10.60.0.0/24"
                }
        argumentDocs:
            account_name: '- (Required) Edge CSP account name.'
            approved_learned_cidrs: '- (Optional) Set of approved learned CIDRs. Valid only when enable_learned_cidrs_approval is set to true. Example: ["10.1.0.0/116", "10.2.0.0/16"].'
            bgp_hold_time: '- (Optional) BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.'
            bgp_polling_time: '- (Optional) BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: 50.'
            compute_node_uuid: '- (Required) Edge CSP compute node UUID.'
            dns_server_ip: '- (Optional) DNS server IP. Required and valid when management_interface_config is "Static".'
            enable_edge_active_standby: '- (Optional) Switch to enable Edge Active-Standby mode. Valid values: true, false. Default value: false.'
            enable_edge_active_standby_preemptive: '- (Optional) Switch to enable Preemptive Mode for Edge Active-Standby. Valid values: true, false. Default value: false.'
            enable_edge_transitive_routing: '- (Optional) Switch to enable Edge transitive routing. Valid values: true, false. Default value: false.'
            enable_jumbo_frame: '- (Optional) Switch to enable jumbo frame. Valid values: true, false. Default value: false.'
            enable_learned_cidrs_approval: '- (Optional) Switch to enable learned CIDR approval. Valid values: true, false. Default value: false.'
            enable_management_over_private_network: '- (Optional) Switch to enable management over the private network. Valid values: true, false. Default value: false.'
            enable_preserve_as_path: '- (Optional) Switch to enable preserve as_path when advertising manual summary CIDRs. Valid values: true, false. Default value: false.'
            gw_name: '- (Required) Edge CSP name.'
            lan_interface_ip_prefix: '- (Required) LAN interface IP and subnet prefix.'
            lan_interface_name: '- (Optional) LAN interface name. Default value: "eth1".'
            latitude: '- (Optional) Latitude of Edge CSP. Valid values are between -90 and 90. Example: "47.7511".'
            local_as_number: '- (Optional) BGP AS Number to assign to Edge CSP.'
            longitude: '- (Optional) Longitude of Edge CSP. Valid values are between -180 and 180. Example: "120.7401".'
            management_default_gateway_ip: '- (Optional) Management default gateway IP. Required and valid when management_interface_config is "Static".'
            management_egress_ip_prefix: '- (Optional) Management egress gateway IP and subnet prefix.'
            management_interface_config: '- (Required) Management interface configuration. Valid values: "DHCP", "Static".'
            management_interface_ip_prefix: '- (Optional) Management interface IP and subnet prefix. Required and valid when management_interface_config is "Static".'
            management_interface_name: '- (Optional) Management interface name. Default value: "eth2".'
            prepend_as_path: '- (Optional) List of AS numbers to prepend gateway BGP AS_Path field. Valid only when local_as_number is set. Example: ["65023", "65023"].'
            project_uuid: '- (Required) Edge CSP project UUID.'
            rx_queue_size: '- (Optional) Ethernet interface RX queue size. Once set, can''t be deleted or disabled. Valid values: "1K", "2K", "4K".'
            secondary_dns_server_ip: '- (Optional) Secondary DNS server IP. Required and valid when management_interface_config is "Static".'
            site_id: '- (Required) Site ID.'
            spoke_bgp_manual_advertise_cidrs: '- (Optional) Set of intended CIDRs to be advertised to external BGP router. Example: ["10.1.0.0/116", "10.2.0.0/16"].'
            state: '- State of Edge CSP.'
            template_uuid: '- (Required) Edge CSP template UUID.'
            wan_default_gateway_ip: '- (Required) WAN default gateway IP.'
            wan_interface_ip_prefix: '- (Required) WAN interface IP and subnet prefix.'
            wan_interface_name: '- (Optional) WAN interface name. Default value: "eth0".'
            wan_public_ip: '- (Optional) WAN public IP. Required for attaching connections over the Internet.'
        importStatements: []
    aviatrix_edge_spoke:
        subCategory: Multi-Cloud Transit
        description: Creates Aviatrix Edge as a Spoke
        name: aviatrix_edge_spoke
        title: aviatrix_edge_spoke
        examples:
            - name: test
              manifest: |-
                {
                  "gw_name": "edge-test",
                  "lan_interface_ip_prefix": "10.60.0.0/24",
                  "local_as_number": "65000",
                  "management_interface_config": "DHCP",
                  "prepend_as_path": [
                    "65000",
                    "65000"
                  ],
                  "site_id": "site-123",
                  "wan_default_gateway_ip": "10.60.0.0",
                  "wan_interface_ip_prefix": "10.60.0.0/24",
                  "ztp_file_download_path": "/ztp/download/path",
                  "ztp_file_type": "iso"
                }
            - name: test
              manifest: |-
                {
                  "dns_server_ip": "10.60.0.0",
                  "gw_name": "edge-test",
                  "lan_interface_ip_prefix": "10.60.0.0/24",
                  "local_as_number": "65000",
                  "management_default_gateway_ip": "10.60.0.0",
                  "management_interface_config": "Static",
                  "management_interface_ip_prefix": "10.60.0.0/24",
                  "prepend_as_path": [
                    "65000",
                    "65000"
                  ],
                  "secondary_dns_server_ip": "10.60.0.0",
                  "site_id": "site-123",
                  "wan_default_gateway_ip": "10.60.0.0",
                  "wan_interface_ip_prefix": "10.60.0.0/24",
                  "ztp_file_download_path": "/ztp/download/path",
                  "ztp_file_type": "iso"
                }
        argumentDocs:
            approved_learned_cidrs: '- (Optional) Set of approved learned CIDRs. Valid only when enable_learned_cidrs_approval is set to true. Example: ["10.1.0.0/116", "10.2.0.0/16"].'
            bgp_hold_time: '- (Optional) BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.'
            bgp_polling_time: '- (Optional) BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: 50.'
            dns_server_ip: '- (Optional) DNS server IP. Required and valid when management_interface_config is "Static".'
            enable_edge_active_standby: '- (Optional) Switch to enable Edge Active-Standby mode. Valid values: true, false. Default value: false.'
            enable_edge_active_standby_preemptive: '- (Optional) Switch to enable Preemptive Mode for Edge Active-Standby. Valid values: true, false. Default value: false.'
            enable_edge_transitive_routing: '- (Optional) Switch to enable Edge transitive routing. Valid values: true, false. Default value: false.'
            enable_jumbo_frame: '- (Optional) Switch to enable jumbo frame. Valid values: true, false. Default value: false.'
            enable_learned_cidrs_approval: '- (Optional) Switch to enable learned CIDR approval. Valid values: true, false. Default value: false.'
            enable_management_over_private_network: '- (Optional) Switch to enable management over the private network. Valid values: true, false. Default value: false.'
            enable_preserve_as_path: '- (Optional) Switch to enable preserve as_path when advertising manual summary CIDRs. Valid values: true, false. Default value: false.'
            gw_name: '- (Required) Edge as a Spoke name.'
            lan_interface_ip_prefix: '- (Required) LAN interface IP and subnet prefix.'
            latitude: '- (Optional) Latitude of Edge as a Spoke. Valid values are between -90 and 90. Example: "47.7511".'
            local_as_number: '- (Optional) BGP AS Number to assign to Edge as a Spoke.'
            longitude: '- (Optional) Longitude of Edge as a Spoke. Valid values are between -180 and 180. Example: "120.7401".'
            management_default_gateway_ip: '- (Optional) Management default gateway IP. Required and valid when management_interface_config is "Static".'
            management_egress_ip_prefix: '- (Optional) Management egress gateway IP and subnet prefix.'
            management_interface_config: '- (Required) Management interface configuration. Valid values: "DHCP", "Static".'
            management_interface_ip_prefix: '- (Optional) Management interface IP and subnet prefix. Required and valid when management_interface_config is "Static".'
            prepend_as_path: '- (Optional) List of AS numbers to prepend gateway BGP AS_Path field. Valid only when local_as_number is set. Example: ["65023", "65023"].'
            rx_queue_size: '- (Optional) Ethernet interface RX queue size. Once set, can''t be deleted or disabled. Valid values: "1K", "2K", "4K".'
            secondary_dns_server_ip: '- (Optional) Secondary DNS server IP. Required and valid when management_interface_config is "Static".'
            site_id: '- (Required) Site ID.'
            spoke_bgp_manual_advertise_cidrs: '- (Optional) Set of intended CIDRs to be advertised to external BGP router. Example: ["10.1.0.0/116", "10.2.0.0/16"].'
            state: '- State of Edge as a Spoke.'
            wan_default_gateway_ip: '- (Required) WAN default gateway IP.'
            wan_interface_ip_prefix: '- (Required) WAN interface IP and subnet prefix.'
            wan_public_ip: '- (Optional) WAN public IP. Required for attaching connections over the Internet.'
            ztp_file_download_path: '- (Required) The folder path where the ZTP file will be downloaded.'
            ztp_file_type: '- (Required) ZTP file type. Valid values: "iso", "cloud-init".'
        importStatements: []
    aviatrix_edge_spoke_external_device_conn:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Edge as a Spoke external device connections
        name: aviatrix_edge_spoke_external_device_conn
        title: aviatrix_edge_spoke_external_device_conn
        examples:
            - name: test
              manifest: |-
                {
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "conn",
                  "gw_name": "eaas",
                  "local_lan_ip": "10.230.3.23",
                  "remote_lan_ip": "10.0.60.1",
                  "site_id": "site-abcd1234"
                }
        argumentDocs:
            bgp_local_as_num: '- (Required) BGP local AS number.'
            bgp_remote_as_num: '- (Required) BGP remote AS number.'
            connection_name: '- (Required) Connection name.'
            connection_type: '- (Optional) Connection type. Valid value: ''bgp''. Default value: ''bgp''.'
            gw_name: '- (Required) Edge as a Spoke name.'
            local_lan_ip: '- (Required) Local LAN IP.'
            number_of_retries: '- (Optional) Number of retries. Default value: 0.'
            remote_lan_ip: '- (Required) Remote LAN IP.'
            retry_interval: '- (Optional) Retry interval in seconds. Default value: 300.'
            site_id: '- (Required) Edge as a Spoke site iD.'
            tunnel_protocol: '- (Optional) Tunnel protocol. Valid value: ''LAN''. Default value: ''LAN''. Case insensitive.'
        importStatements: []
    aviatrix_edge_spoke_transit_attachment:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix Edge as a Spoke to Transit attachments
        name: aviatrix_edge_spoke_transit_attachment
        title: aviatrix_edge_spoke_transit_attachment
        examples:
            - name: test_attachment
              manifest: |-
                {
                  "spoke_gw_name": "edge-as-a-spoke",
                  "transit_gw_name": "transit-gw"
                }
        argumentDocs:
            enable_insane_mode: '- (Optional) Switch to enable insane mode. Valid values: true, false. Default: false.'
            enable_jumbo_frame: '- (Optional) Switch to enable jumbo frame. Valid values: true, false. Default: false.'
            enable_over_private_network: '- (Optional) Switch to enable over the private network. Valid values: true, false. Default: true.'
            insane_mode_tunnel_number: '- (Optional) Insane mode tunnel number. Default: 0.'
            number_of_retries: '- (Optional) Number of retries. Default value: 0.'
            retry_interval: '- (Optional) Retry interval in seconds. Default value: 300.'
            spoke_gw_name: '- (Required) Name of the Edge as a Spoke to attach to transit network.'
            spoke_prepend_as_path: '- (Optional) Connection based AS Path Prepend. Can only use the gateway''s own local AS number, repeated up to 25 times. Applies on the Edge as a Spoke.'
            transit_gw_name: '- (Required) Name of the transit gateway to attach the Edge as a Spoke to.'
            transit_prepend_as_path: '- (Optional) Connection based AS Path Prepend. Can only use the gateway''s own local AS number, repeated up to 25 times. Applies on the Transit Gateway.'
        importStatements: []
    aviatrix_filebeat_forwarder:
        subCategory: Settings
        description: Enables and disables filebeat forwarder
        name: aviatrix_filebeat_forwarder
        title: aviatrix_filebeat_forwarder
        examples:
            - name: test_filebeat_forwarder
              manifest: |-
                {
                  "config_file": "${file(\"/path/to/config.txt\")}",
                  "excluded_gateways": [
                    "a",
                    "b"
                  ],
                  "port": 10,
                  "server": "1.2.3.4",
                  "trusted_ca_file": "${file(\"/path/to/ca.pem\")}"
                }
        argumentDocs:
            config_file: (Optional) The config file. Use the file function to read from a file.
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            port: (Required) Port number.
            server: (Required) Server IP.
            status: '- The status of filebeat forwarder.'
            trusted_ca_file: (Optional) The trusted CA file. Use the file function to read from a file.
        importStatements: []
    aviatrix_firenet:
        subCategory: Firewall Network
        description: Creates and manages Aviatrix FireNets
        name: aviatrix_firenet
        title: aviatrix_firenet
        examples:
            - name: test_firenet
              manifest: |-
                {
                  "depends_on": [
                    "${aviatrix_firewall_instance_association.association_1}"
                  ],
                  "egress_enabled": false,
                  "inspection_enabled": true,
                  "keep_alive_via_lan_interface_enabled": false,
                  "vpc_id": "vpc-032005cc371"
                }
            - name: gcp_firenet
              manifest: |-
                {
                  "depends_on": [
                    "${aviatrix_firewall_instance_association.association2}"
                  ],
                  "egress_enabled": true,
                  "inspection_enabled": true,
                  "keep_alive_via_lan_interface_enabled": false,
                  "vpc_id": "${format(\"%s~-~%s\", aviatrix_transit_gateway.test_transit_gateway.vpc_id, aviatrix_account.gcp.gcloud_project_id)}"
                }
        argumentDocs:
            attached: '- (Optional) Switch to attach/detach firewall instance to/from FireNet. Valid values: true, false. Default value: false.'
            east_west_inspection_excluded_cidrs: '- (Optional) Network List Excluded From East-West Inspection. CIDRs to be excluded from inspection. Type: Set(String). Available as of provider version R2.19.5+.'
            egress_enabled: '- (Optional) Enable/disable egress through firewall. Valid values: true, false. Default value: false.'
            egress_interface: '- (Optional) Egress interface ID. Required if it is a firewall instance.'
            egress_static_cidrs: '- (Optional) List of egress static CIDRs. Egress is required to be enabled. Example: ["1.171.15.184/32", "1.171.15.185/32"]. Available as of provider version R2.19+.'
            fail_close_enabled: '- Enable Fail Close. Removed as of provider version R2.23+.'
            firenet_gw_name: '- (Required) Name of the primary FireNet gateway.'
            firewall_instance_association: '- (Optional) Dynamic block of firewall instance(s) to be associated with the FireNet.'
            firewall_name: '- (Optional) Firewall instance name. Required if it is a firewall instance.'
            hashing_algorithm: '- (Optional) Hashing algorithm to load balance traffic across the firewall. Valid values: "2-Tuple", "5-Tuple". Default value: "5-Tuple".'
            inspection_enabled: '- (Optional) Enable/disable traffic inspection. Valid values: true, false. Default value: true.'
            instance_id: '- (Required) ID of Firewall instance.'
            keep_alive_via_lan_interface_enabled: '- (Optional) Enable Keep Alive via Firewall LAN Interface. Valid values: true or false. Default value: false. Available as of provider version R2.18.1+.'
            lan_interface: '- (Optional) Lan interface ID. Required if it is a firewall instance or FQDN gateway in Azure.'
            manage_firewall_instance_association: '- (Optional) Enable this attribute to manage firewall associations in-line. If set to true, in-line firewall_instance_association blocks can be used. If set to false, all firewall associations must be managed via standalone aviatrix_firewall_instance_association resources. Default value: true. Valid values: true or false. Available in provider version R2.17.1+.'
            management_interface: '- (Optional) Management interface ID. Required if it is a firewall instance.'
            tgw_segmentation_for_egress_enabled: '- (Optional) Enable TGW segmentation for egress. Valid values: true or false. Default value: false. Available as of provider version R2.19+.'
            vendor_type: '- (Optional) Type of firewall. Valid values: "Generic", "fqdn_gateway". Default value: "Generic". Value "fqdn_gateway" is required for FQDN gateway.'
            vpc_id: '- (Required) VPC ID of the Security VPC.'
        importStatements: []
    aviatrix_firewall:
        subCategory: Security
        description: Creates and manages Aviatrix Stateful Firewall Policies
        name: aviatrix_firewall
        title: aviatrix_firewall
        examples:
            - name: stateful_firewall_1
              manifest: |-
                {
                  "base_log_enabled": true,
                  "base_policy": "allow-all",
                  "gw_name": "gateway-1",
                  "manage_firewall_policies": false
                }
            - name: stateful_firewall_1
              manifest: |-
                {
                  "base_log_enabled": true,
                  "base_policy": "allow-all",
                  "gw_name": "gateway-1",
                  "policy": [
                    {
                      "action": "force-drop",
                      "description": "first_policy",
                      "dst_ip": "10.12.0.172/32",
                      "log_enabled": true,
                      "port": "0:65535",
                      "protocol": "all",
                      "src_ip": "10.17.0.224/32"
                    },
                    {
                      "action": "force-drop",
                      "description": "second_policy",
                      "dst_ip": "10.12.1.172/32",
                      "log_enabled": false,
                      "port": "325",
                      "protocol": "tcp",
                      "src_ip": "10.16.0.224/32"
                    },
                    {
                      "action": "deny",
                      "description": "third_policy",
                      "dst_ip": "10.13.1.173/32",
                      "log_enabled": false,
                      "port": "325",
                      "protocol": "udp",
                      "src_ip": "10.14.0.225/32"
                    },
                    {
                      "action": "deny",
                      "description": "fourth_policy",
                      "dst_ip": "10.13.1.173/32",
                      "log_enabled": false,
                      "port": "325",
                      "protocol": "tcp",
                      "src_ip": "${aviatrix_firewall_tag.test.firewall_tag}"
                    }
                  ]
                }
              references:
                policy.src_ip: aviatrix_firewall_tag.test.firewall_tag
        argumentDocs:
            action: '- (Required) Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).'
            base_log_enabled: '- (Optional) Indicates whether enable logging or not. Valid Values: true, false. Default value: false.'
            base_policy: '- (Optional) New base policy. Valid Values: "allow-all", "deny-all". Default value: "deny-all"'
            description: '- (Optional) Description of the policy. Example: "This is policy no.1".'
            dst_ip: '- (Required) Destination address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The aviatrix_firewall_tag resource should be created prior to using the tag name.'
            gw_name: '- (Required) Gateway name to attach firewall policy to.'
            log_enabled: '- (Optional) Valid values: true, false. Default value: false.'
            manage_firewall_policies: '- (Optional) Enable to manage firewall policies via in-line rules. If false, policies must be managed using aviatrix_firewall_policy resources. Default: true. Valid values: true, false. Available in provider version R2.17+.'
            policy: '- (Optional) New access policy for the gateway. Seven fields are required for each policy item: src_ip, dst_ip, protocol, port, action, log_enabled and description. No duplicate rules (with same src_ip, dst_ip, protocol and port) are allowed.'
            port: '- (Required) A single port or a range of port numbers. Example: "25", "25:1024".'
            protocol: '- (Optional): Valid values: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp". Default value: "all".'
            src_ip: '- (Required) Source address, a valid IPv4 address or tag name such "HR" or "marketing" etc. Example: "10.30.0.0/16". The aviatrix_firewall_tag resource should be created prior to using the tag name.'
        importStatements: []
    aviatrix_firewall_instance:
        subCategory: Firewall Network
        description: Creates and deletes Aviatrix Firewall Instances
        name: aviatrix_firewall_instance
        title: aviatrix_firewall_instance
        examples:
            - name: test_firewall_instance
              manifest: |-
                {
                  "egress_subnet": "10.4.0.32/28",
                  "firenet_gw_name": "avx-firenet-gw",
                  "firewall_image": "Palo Alto Networks VM-Series Next-Generation Firewall Bundle 1",
                  "firewall_name": "avx-firewall-instance",
                  "firewall_size": "m5.xlarge",
                  "management_subnet": "10.4.0.16/28",
                  "vpc_id": "vpc-032005cc371"
                }
            - name: test_firewall_instance
              manifest: |-
                {
                  "egress_subnet": "10.4.0.32/28",
                  "firewall_image": "Palo Alto Networks VM-Series Next-Generation Firewall Bundle 1",
                  "firewall_name": "avx-firewall-instance",
                  "firewall_size": "m5.xlarge",
                  "management_subnet": "10.4.0.16/28",
                  "vpc_id": "vpc-032005cc371",
                  "zone": "us-east-1a"
                }
            - name: test_firewall_instance
              manifest: |-
                {
                  "egress_subnet": "${format(\"%s~~%s~~%s\", aviatrix_vpc.egress_vpc.subnets[0].cidr, aviatrix_vpc.egress_vpc.subnets[0].region, aviatrix_vpc.egress_vpc.subnets[0].name)}",
                  "egress_vpc_id": "${aviatrix_vpc.egress_vpc.vpc_id}",
                  "firenet_gw_name": "${aviatrix_transit_gateway.test_transit_gateway.gw_name}",
                  "firewall_image": "Palo Alto Networks VM-Series Next-Generation Firewall Bundle 1",
                  "firewall_image_version": "9.0.9",
                  "firewall_name": "gcp-firewall-instance",
                  "firewall_size": "n1-standard-4",
                  "management_subnet": "${format(\"%s~~%s~~%s\", aviatrix_vpc.management_vpc.subnets[0].cidr, aviatrix_vpc.management_vpc.subnets[0].region, aviatrix_vpc.management_vpc.subnets[0].name)}",
                  "management_vpc_id": "${aviatrix_vpc.management_vpc.vpc_id}",
                  "vpc_id": "${format(\"%s~-~%s\", aviatrix_transit_gateway.test_transit_gateway.vpc_id, aviatrix_account.gcp.gcloud_project_id)}",
                  "zone": "${aviatrix_transit_gateway.test_transit_gateway.vpc_reg}"
                }
              references:
                egress_vpc_id: aviatrix_vpc.egress_vpc.vpc_id
                firenet_gw_name: aviatrix_transit_gateway.test_transit_gateway.gw_name
                management_vpc_id: aviatrix_vpc.management_vpc.vpc_id
                zone: aviatrix_transit_gateway.test_transit_gateway.vpc_reg
        argumentDocs:
            availability_domain: '- (Optional) Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            bootstrap_bucket_name: '- (Optional) Only available for AWS and GCP. For GCP, only Palo Alto Networks VM-Series deployment can use this attribute. In advanced mode, specify a bootstrap bucket name where the initial configuration and policy file is stored.'
            bootstrap_storage_name: '- (Optional) Advanced option. Bootstrap storage name. Applicable to Azure or AzureGov and Palo Alto Networks VM-Series/Fortinet Series deployment only. Available as of provider version R2.17.1+.'
            cloud_type: '- Cloud Type.'
            container_folder: '- (Optional) Advanced option. Container folder. Applicable to Azure or AzureGov and Fortinet Series deployment only.'
            egress_interface: '- ID of Egress Interface created.'
            egress_subnet: '- (Required) Egress Interface Subnet. Select the subnet whose name contains “FW-ingress-egress”. For GCP, egress_subnet must be in the form cidr~~region~~name.'
            egress_vpc_id: '- (Optional) Egress VPC ID. Required for GCP. Available as of provider version R2.18.1+.'
            fault_domain: '- (Optional) Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            file_share_folder: '- (Optional) Advanced option. File share folder. Applicable to Azure or AzureGov and Palo Alto Networks VM-Series deployment only. Available as of provider version R2.17.1+.'
            firenet_gw_name: '- (Optional) Name of the primary FireNet gateway. Required for all FireNet deployments that do not utilize the TGW-Integrated FireNet with AWS Native GWLB VPC.'
            firewall_image: '- (Required) One of the AWS/Azure/GCP AMIs from various vendors such as Palo Alto Networks.'
            firewall_image_id: '- (Optional) Firewall image ID. Applicable to AWS and Azure only. For AWS, please use AMI ID. For Azure, the format is “Publisher:Offer:Plan:Version”. Available as of provider version R2.19+.'
            firewall_image_version: '- (Optional) Version of firewall image. If not specified, Controller will automatically select the latest version available.'
            firewall_name: '- (Required) Name of the firewall instance to be created.'
            firewall_size: '- (Required) Instance size of the firewall. Example: "m5.xlarge".'
            gcp_vpc_id: '- GCP Only. The current VPC ID.'
            iam_role: '- (Optional) Only available for AWS. In advanced mode, create an IAM Role on the AWS account that launched the FireNet gateway. Create a policy to attach to the role. The policy is to allow access to "Bootstrap Bucket".'
            instance_id: '- ID of the firewall instance created.'
            key_name: '- (Optional) Applicable to AWS deployment only. AWS Key Pair name. If not provided a Key Pair will be generated.'
            lan_interface: '- ID of Lan Interface created.'
            management_interface: '- ID of Management Interface created.'
            management_subnet: '- (Optional) Management Interface Subnet. Select the subnet whose name contains “gateway and firewall management”. For GCP, management_subnet must be in the form cidr~~region~~name. Required for Palo Alto Networks VM-Series and OCI Check Point firewalls. Otherwise, it must be empty.'
            management_vpc_id: '- (Optional) Management VPC ID. Only used for GCP firewall. Required for Palo Alto Networks VM-Series, and required to be empty for Check Point or Fortinet series. Available as of provider version R2.18.1+.'
            password: '- (Optional) Applicable to Azure or AzureGov deployment only.'
            public_ip: '- Management Public IP.'
            sas_url_config: '- (Optional) Advanced option. SAS URL Config. Applicable to Azure or AzureGov and Fortinet Series deployment only.'
            sas_url_license: '- (Optional) Advanced option. SAS URL License. Applicable to Azure or AzureGov and Fortinet Series deployment only.'
            share_directory: '- (Optional) Advanced option. Share directory. Applicable to Azure or AzureGov and Palo Alto Networks VM-Series deployment only. Available as of provider version R2.17.1+.'
            sic_key: '- (Optional) Advanced option. Sic key. Applicable to Check Point Series deployment only.'
            ssh_public_key: '- (Optional) Applicable to Azure or AzureGov deployment only.'
            storage_access_key: '- (Optional) Advanced option. Storage access key. Applicable to Azure or AzureGov and Palo Alto Networks VM-Series deployment only. Available as of provider version R2.17.1+.'
            tags: '- (Optional) Mapping of key value pairs of tags for a firewall instance. Only available for AWS, AWSGov, GCP and Azure firewall instances. For AWS, AWSGov and Azure allowed characters are: letters, spaces, and numbers plus the following special characters: + - = . _ : @. For GCP allowed characters are: lowercase letters, numbers, "-" and "_". Example: {"key1" = "value1", "key2" = "value2"}.'
            user_data: '- (Optional) Advanced option. User Data. Applicable to Check Point Series and Fortinet Series deployment only. Type: String.'
            username: '- (Optional) Applicable to Azure or AzureGov deployment only. "admin" as a username is not accepted.'
            vpc_id: '- (Required) VPC ID of the Security VPC. For GCP, vpc_id must be in the form vpc_id~-~gcloud_project_id.'
            zone: '- (Optional) Availability Zone. Required if creating a Firewall Instance with a Native AWS GWLB-enabled VPC. Applicable to AWS, Azure, and GCP only. Available as of provider version R2.17+.'
        importStatements: []
    aviatrix_firewall_instance_association:
        subCategory: Firewall Network
        description: Create and manage a single firewall instance association
        name: aviatrix_firewall_instance_association
        title: aviatrix_firewall_instance_association
        examples:
            - name: firewall_instance_association_1
              manifest: |-
                {
                  "attached": true,
                  "egress_interface": "${aviatrix_firewall_instance.firewall_instance_1.egress_interface}",
                  "firenet_gw_name": "${aviatrix_transit_gateway.transit_gateway_1.gw_name}",
                  "firewall_name": "${aviatrix_firewall_instance.firewall_instance_1.firewall_name}",
                  "instance_id": "${aviatrix_firewall_instance.firewall_instance_1.instance_id}",
                  "lan_interface": "${aviatrix_firewall_instance.firewall_instance_1.lan_interface}",
                  "management_interface": "${aviatrix_firewall_instance.firewall_instance_1.management_interface}",
                  "vpc_id": "${aviatrix_firewall_instance.firewall_instance_1.vpc_id}"
                }
              references:
                egress_interface: aviatrix_firewall_instance.firewall_instance_1.egress_interface
                firenet_gw_name: aviatrix_transit_gateway.transit_gateway_1.gw_name
                firewall_name: aviatrix_firewall_instance.firewall_instance_1.firewall_name
                instance_id: aviatrix_firewall_instance.firewall_instance_1.instance_id
                lan_interface: aviatrix_firewall_instance.firewall_instance_1.lan_interface
                management_interface: aviatrix_firewall_instance.firewall_instance_1.management_interface
                vpc_id: aviatrix_firewall_instance.firewall_instance_1.vpc_id
            - name: firewall_instance_association_1
              manifest: |-
                {
                  "attached": true,
                  "egress_interface": "${aviatrix_firewall_instance.firewall_instance_1.egress_interface}",
                  "firenet_gw_name": "${aviatrix_transit_gateway.transit_gateway_1.gw_name}",
                  "instance_id": "${aviatrix_firewall_instance.firewall_instance_1.instance_id}",
                  "lan_interface": "${aviatrix_firewall_instance.firewall_instance_1.lan_interface}",
                  "management_interface": "${aviatrix_firewall_instance.firewall_instance_1.management_interface}",
                  "vpc_id": "${aviatrix_firewall_instance.firewall_instance_1.vpc_id}"
                }
              references:
                egress_interface: aviatrix_firewall_instance.firewall_instance_1.egress_interface
                firenet_gw_name: aviatrix_transit_gateway.transit_gateway_1.gw_name
                instance_id: aviatrix_firewall_instance.firewall_instance_1.instance_id
                lan_interface: aviatrix_firewall_instance.firewall_instance_1.lan_interface
                management_interface: aviatrix_firewall_instance.firewall_instance_1.management_interface
                vpc_id: aviatrix_firewall_instance.firewall_instance_1.vpc_id
        argumentDocs:
            attached: '- (Optional) Switch to attach/detach firewall instance to/from FireNet. Valid values: true, false. Default value: false.'
            egress_interface: '- (Optional) Egress interface ID. Required if it is a firewall instance.'
            firenet_gw_name: '- (Optional) Name of the primary FireNet gateway. Required for FireNet without Native GWLB VPC.'
            firewall_name: '- (Optional) Firewall instance name. Required for non-GCP firewall instance. For GCP, this field should not be set.'
            instance_id: '- (Required) ID of Firewall instance.'
            lan_interface: '- (Optional) Lan interface ID. Required if it is a firewall instance.'
            management_interface: '- (Optional) Management interface ID. Required if it is a firewall instance.'
            vendor_type: '- (Optional) Type of firewall. Valid values: "Generic", "fqdn_gateway". Default value: "Generic". Value "fqdn_gateway" is required for FQDN gateway.'
            vpc_id: '- (Required) VPC ID of the Security VPC.'
        importStatements: []
    aviatrix_firewall_management_access:
        subCategory: Multi-Cloud Transit
        description: Manage Aviatrix Firewall Management Access
        name: aviatrix_firewall_management_access
        title: aviatrix_firewall_management_access
        examples:
            - name: test_firewall_management_access
              manifest: |-
                {
                  "management_access_resource_name": "SPOKE:spoke-gw",
                  "transit_firenet_gateway_name": "transit-gw"
                }
        argumentDocs:
            management_access_resource_name: '- (Required) Name of the resource to enable Firewall Management Access.'
            transit_firenet_gateway_name: '- (Required) Name of the Transit FireNet-enabled transit gateway. Currently supports AWS(1) and Azure(8) providers.'
        importStatements: []
    aviatrix_firewall_policy:
        subCategory: Security
        description: Manages Aviatrix Stateful Firewall Policies
        name: aviatrix_firewall_policy
        title: aviatrix_firewall_policy
        examples:
            - name: test_firewall_policy
              manifest: |-
                {
                  "action": "allow",
                  "description": "Test policy.",
                  "dst_ip": "10.12.0.172/32",
                  "gw_name": "${aviatrix_firewall.test_firewall.gw_name}",
                  "log_enabled": true,
                  "port": "0:65535",
                  "protocol": "tcp",
                  "src_ip": "10.15.0.224/32"
                }
              references:
                gw_name: aviatrix_firewall.test_firewall.gw_name
            - name: test_firewall_policy
              manifest: |-
                {
                  "action": "allow",
                  "description": "Test policy.",
                  "dst_ip": "10.12.0.173/32",
                  "gw_name": "${aviatrix_firewall.test_firewall.gw_name}",
                  "log_enabled": true,
                  "port": "0:65535",
                  "position": 2,
                  "protocol": "tcp",
                  "src_ip": "10.15.0.225/32"
                }
              references:
                gw_name: aviatrix_firewall.test_firewall.gw_name
        argumentDocs:
            action: '- (Required) Valid values: "allow", "deny" and "force-drop" (in stateful firewall rule to allow immediate packet dropping on established sessions).'
            description: '- (Optional) Description of the policy. Example: "This is policy no.1".'
            dst_ip: '- (Required) CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The aviatrix_firewall_tag resource should be created prior to using the tag name.'
            gw_name: '- (Required) Gateway name to attach firewall policy to.'
            log_enabled: '- (Optional) Valid values: true, false. Default value: false.'
            port: '- (Required) A single port or a range of port numbers. Example: "25", "25:1024".'
            position: '- (Optional) Position in the policy list, where the firewall policy will be inserted to. Valid values: any positive integer. Example: 2. If it is larger than the size of policy list, the policy will be inserted to the end.'
            protocol: '- (Optional): "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".'
            src_ip: '- (Required) CIDRs separated by comma or tag names such "HR" or "marketing" etc. Example: "10.30.0.0/16,10.45.0.0/20". The aviatrix_firewall_tag resource should be created prior to using the tag name.'
        importStatements: []
    aviatrix_firewall_tag:
        subCategory: Security
        description: Creates and manages Aviatrix Stateful Firewall Tags
        name: aviatrix_firewall_tag
        title: aviatrix_firewall_tag
        examples:
            - name: test_firewall_tag
              manifest: |-
                {
                  "cidr_list": [
                    {
                      "cidr": "10.1.0.0/24",
                      "cidr_tag_name": "a1"
                    },
                    {
                      "cidr": "10.2.0.0/24",
                      "cidr_tag_name": "b1"
                    }
                  ],
                  "firewall_tag": "test-firewall-tag"
                }
        argumentDocs:
            cidr: '- (Required) CIDR address to filter. Example: "10.88.88.88/32".'
            cidr_list: '- (Optional) Dynamic block representing a CIDR to filter, and a name to identify it:'
            cidr_tag_name: '- (Required) A name to identify the CIDR. Example: "policy1".'
            firewall_tag: '- (Required) Name of the stateful firewall tag to be created.'
        importStatements: []
    aviatrix_fqdn:
        subCategory: Security
        description: Manages Aviatrix FQDN filtering for gateways
        name: aviatrix_fqdn
        title: aviatrix_fqdn
        examples:
            - name: test_fqdn
              manifest: |-
                {
                  "fqdn_enabled": true,
                  "fqdn_mode": "white",
                  "fqdn_tag": "my_tag",
                  "gw_filter_tag_list": [
                    {
                      "gw_name": "test-gw1",
                      "source_ip_list": [
                        "172.31.0.0/16",
                        "172.31.0.0/20"
                      ]
                    },
                    {
                      "gw_name": "test-gw2",
                      "source_ip_list": [
                        "30.0.0.0/16"
                      ]
                    }
                  ]
                }
        argumentDocs:
            action: '- (Optional) What action should happen to matching requests. Possible values are: ''Base Policy'', ''Allow'' or ''Deny''. Defaults to ''Base Policy'' if no value provided.'
            domain_names: '- (Optional) One or more domain names in a list with details as listed below:'
            fqdn: '- (Required) FQDN. Example: "facebook.com".'
            fqdn_enabled: '- (Optional) FQDN Filter tag status. Valid values: true, false.'
            fqdn_mode: '- (Optional) Specify FQDN mode: whitelist or blacklist. Valid values: "white", "black".'
            fqdn_tag: '- (Required) FQDN Filter tag name.'
            gw_filter_tag_list: '- (Optional) A list of gateways to attach to the specific tag.'
            gw_name: '- (Required) Name of the gateway to attach to the specific tag.'
            manage_domain_names: '- (Optional) Enable to manage domain name rules in-line. If false, domain name rules must be managed using aviatrix_fqdn_tag_rule resources. Default: true. Valid values: true, false. Available in provider version R2.17+.'
            port: '- (Required) Port. Example "25".'
            proto: '- (Required) Protocol. Valid values: "all", "tcp", "udp", "icmp".'
            source_ip_list: '- (Optional) List of source IPs in the VPC qualified for a specific tag.'
        importStatements: []
    aviatrix_fqdn_global_config:
        subCategory: Security
        description: Manages Aviatrix FQDN Global Config
        name: aviatrix_fqdn_global_config
        title: aviatrix_fqdn_global_config
        examples:
            - name: test
              manifest: |-
                {
                  "enable_caching": false,
                  "enable_exact_match": true,
                  "enable_exception_rule": false,
                  "enable_private_network_filtering": true
                }
            - name: test
              manifest: |-
                {
                  "configured_ips": [
                    "172.16.0.0/12~~RFC-1918",
                    "10.0.0.0/8~~RFC-1918",
                    "168.16.0.0/32"
                  ],
                  "enable_caching": false,
                  "enable_custom_network_filtering": true,
                  "enable_exact_match": true,
                  "enable_exception_rule": false
                }
        argumentDocs:
            configured_ips: '- (Optional) Customized packet destination address ranges not to be filtered by FQDN. Can be selected from pre-defined RFC 1918 range, or own network range. Required with enable_custom_network_filtering enabled.'
            enable_caching: '- (Optional) If enabled, it caches the resolved IP address from FQDN filter. Valid values: true, false. Default value: true.'
            enable_custom_network_filtering: '- (Optional) If enabled, it customizes packet destination address ranges not to be filtered by FQDN. Valid values: true, false. Default value: false.'
            enable_exact_match: '- (Optional) If enabled, the resolved IP address from FQDN filter is cached so that if subsequent TCP session matches the cached IP address list, FQDN domain name is not checked and the session is allowed to pass. Valid values: true, false. Default value: false.'
            enable_exception_rule: '- (Optional) If enabled, it allows packets passing through the gateway without an SNI field. Only applies to whitelist. Valid values: true, false. Default value: true.'
            enable_private_network_filtering: '- (Optional) If enabled, destination FQDN names that translate to private IP address range (RFC 1918) are subject to FQDN whitelist filtering function. Valid values: true, false. Default value: false.'
        importStatements: []
    aviatrix_fqdn_pass_through:
        subCategory: Security
        description: Manages Aviatrix FQDN filter pass-through
        name: aviatrix_fqdn_pass_through
        title: aviatrix_fqdn_pass_through
        examples:
            - name: test_fqdn_pass_through
              manifest: |-
                {
                  "depends_on": [
                    "${aviatrix_fqdn.test_fqdn}"
                  ],
                  "gw_name": "${aviatrix_gateway.test_gw_aws.gw_name}",
                  "pass_through_cidrs": [
                    "10.0.0.0/24",
                    "10.0.1.0/24",
                    "10.0.2.0/24"
                  ]
                }
              references:
                gw_name: aviatrix_gateway.test_gw_aws.gw_name
        argumentDocs:
            gw_name: '- (Required) Gateway name to apply pass-through rules to.'
            pass_through_cidrs: '- (Required) List of origin CIDR''s to allow to pass-through FQDN filtering rules. Minimum list length: 1.'
        importStatements: []
    aviatrix_fqdn_tag_rule:
        subCategory: Security
        description: Manages Aviatrix FQDN filtering domain name rule
        name: aviatrix_fqdn_tag_rule
        title: aviatrix_fqdn_tag_rule
        examples:
            - name: test_fqdn
              manifest: |-
                {
                  "fqdn": "reddit.com",
                  "fqdn_tag_name": "my_tag",
                  "port": "443",
                  "protocol": "tcp"
                }
        argumentDocs:
            action: '- (Optional) What action should happen to matching requests. Possible values are: ''Base Policy'', ''Allow'' or ''Deny''. Defaults to ''Base Policy'' if no value provided.'
            fqdn: '- (Required) FQDN. Example: "facebook.com".'
            fqdn_tag_name: '- (Required) FQDN Filter tag name.'
            port: '- (Required) Port. Example "25".'
            protocol: '- (Required) Protocol. Valid values: "all", "tcp", "udp", "icmp".'
        importStatements: []
    aviatrix_gateway:
        subCategory: Gateway
        description: Creates and manages Aviatrix gateways
        name: aviatrix_gateway
        title: aviatrix_gateway
        examples:
            - name: test_gateway_aws
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "t2.micro",
                  "subnet": "10.0.0.0/24",
                  "tags": {
                    "name": "value"
                  },
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-west-1"
                }
            - name: test_gateway_aws
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "t2.micro",
                  "peering_ha_gw_size": "t2.micro",
                  "peering_ha_subnet": "10.0.0.0/24",
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-west-1"
                }
            - name: test_vpn_gateway_aws
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "t2.micro",
                  "max_vpn_conn": "100",
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-west-1",
                  "vpn_access": true,
                  "vpn_cidr": "192.168.43.0/24"
                }
            - name: test_psf_gateway_aws
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "enable_encrypt_volume": true,
                  "enable_public_subnet_filtering": true,
                  "gw_name": "avtx-psf-gw-1",
                  "gw_size": "t2.micro",
                  "public_subnet_filtering_guard_duty_enforced": true,
                  "public_subnet_filtering_route_tables": [
                    "${data.aviatrix_vpc.test_vpc.route_tables[0]}"
                  ],
                  "single_az_ha": true,
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-west-1",
                  "zone": "us-west-1b"
                }
            - name: test_psf_gateway_aws
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "enable_encrypt_volume": true,
                  "enable_public_subnet_filtering": true,
                  "gw_name": "avtx-psf-gw-1",
                  "gw_size": "t2.micro",
                  "peering_ha_subnet": "10.10.0.64/26",
                  "peering_ha_zone": "us-west-1b",
                  "public_subnet_filtering_guard_duty_enforced": true,
                  "public_subnet_filtering_ha_route_tables": [
                    "${data.aviatrix_vpc.test_vpc.route_tables[1]}"
                  ],
                  "public_subnet_filtering_route_tables": [
                    "${data.aviatrix_vpc.test_vpc.route_tables[0]}"
                  ],
                  "single_az_ha": true,
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-west-1",
                  "zone": "us-west-1b"
                }
            - name: test_gateway_gcp
              manifest: |-
                {
                  "account_name": "devops-gcp",
                  "cloud_type": 4,
                  "gw_name": "avtx-gw-gcp",
                  "gw_size": "n1-standard-1",
                  "subnet": "10.12.0.0/24",
                  "vpc_id": "gcp-gw-vpc~-~project-id",
                  "vpc_reg": "us-west1-b"
                }
            - name: test_gateway_gcp
              manifest: |-
                {
                  "account_name": "devops-gcp",
                  "cloud_type": 4,
                  "gw_name": "avtx-gw-gcp",
                  "gw_size": "n1-standard-1",
                  "peering_ha_gw_size": "n1-standard-1",
                  "peering_ha_subnet": "10.12.0.0/24",
                  "peering_ha_zone": "us-west1-c",
                  "subnet": "10.12.0.0/24",
                  "vpc_id": "gcp-gw-vpc",
                  "vpc_reg": "us-west1-b"
                }
            - name: test_gateway_azure
              manifest: |-
                {
                  "account_name": "devops-azure",
                  "cloud_type": 8,
                  "gw_name": "avtx-gw-azure",
                  "gw_size": "Standard_D2",
                  "subnet": "10.13.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "West US",
                  "zone": "az-2"
                }
            - name: test_gateway_oci
              manifest: |-
                {
                  "account_name": "devops-oci",
                  "availability_domain": "${aviatrix_vpc.oci_vpc.availability_domains[0]}",
                  "cloud_type": 16,
                  "fault_domain": "${aviatrix_vpc.oci_vpc.fault_domains[0]}",
                  "gw_name": "avtx-gw-oci",
                  "gw_size": "VM.Standard2.2",
                  "subnet": "10.7.0.0/16",
                  "vpc_id": "ocid1.vcn.oc1.iad.aaaaaaaaba3pv6wkcr4jqae5f44n2b2m2yt2j6rx32uzr4h25vqstifsfdsq",
                  "vpc_reg": "us-ashburn-1"
                }
              references:
                availability_domain: aviatrix_vpc.oci_vpc.availability_domains[0]
                fault_domain: aviatrix_vpc.oci_vpc.fault_domains[0]
            - name: test_gateway_azuregov
              manifest: |-
                {
                  "account_name": "devops-azuregov",
                  "cloud_type": 32,
                  "gw_name": "avtx-gw-azuregov",
                  "gw_size": "Standard_D2",
                  "subnet": "10.13.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "USGov Arizona"
                }
            - name: test_gateway_awsgov
              manifest: |-
                {
                  "account_name": "devops-awsgov",
                  "cloud_type": 256,
                  "gw_name": "avtx-gw-awsgov",
                  "gw_size": "t2.micro",
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-gov-west-1"
                }
            - name: test_gateway_aws_china
              manifest: |-
                {
                  "account_name": "devops-aws_china",
                  "cloud_type": 1024,
                  "gw_name": "avtx-gw-aws_china",
                  "gw_size": "t2.micro",
                  "subnet": "10.0.0.0/24",
                  "tags": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "cn-north-1"
                }
            - name: test_gateway_azure_china
              manifest: |-
                {
                  "account_name": "devops-azure-china",
                  "cloud_type": 2048,
                  "gw_name": "avtx-gw-azure-china",
                  "gw_size": "Standard_A0",
                  "subnet": "10.13.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "China North"
                }
            - name: test_gateway_gcp
              manifest: |-
                {
                  "account_name": "devops-awsgov",
                  "cloud_type": 4,
                  "fqdn_lan_cidr": "10.1.0.0/24",
                  "fqdn_lan_vpc_id": "fqdn-LAN-gw-vpc-gcp",
                  "gw_name": "avtx-fqdn-gw-gcp",
                  "gw_size": "n1-standard-1",
                  "single_az_ha": true,
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "fqdn-gw-vpc-gcp",
                  "vpc_reg": "us-west1-a"
                }
            - name: test_gateway_alibaba
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 8192,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "ecs.g5ne.large",
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "acs-us-west-1 (Silicon Valley)"
                }
            - name: test_gateway_alibaba
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 8192,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "ecs.g5ne.large",
                  "peering_ha_gw_size": "ecs.g5ne.large",
                  "peering_ha_subnet": "10.0.0.0/24",
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "acs-us-west-1 (Silicon Valley)"
                }
            - name: test_gateway_aws_top_secret
              manifest: |-
                {
                  "account_name": "devops-aws_top_secret",
                  "cloud_type": 16384,
                  "gw_name": "avtx-gw-aws_top_secret",
                  "gw_size": "t2.micro",
                  "subnet": "10.0.0.0/24",
                  "tags": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-iso-east-1"
                }
            - name: test_gateway_aws_secret
              manifest: |-
                {
                  "account_name": "devops-aws_secret",
                  "cloud_type": 32768,
                  "gw_name": "avtx-gw-aws_secret",
                  "gw_size": "t2.micro",
                  "subnet": "10.0.0.0/24",
                  "tags": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "us-isob-east-1"
                }
        argumentDocs:
            account_name: '- (Required) Account name. This account will be used to launch Aviatrix gateway.'
            additional_cidrs: '- (Optional) A list of destination CIDR ranges that will also go through the VPN tunnel when Split Tunnel Mode is enabled.'
            additional_cidrs_designated_gateway: '- (Optional) A list of CIDR ranges separated by comma to configure when "Designated Gateway" feature is enabled. Example: "10.8.0.0/16,10.9.0.0/16,10.10.0.0/16".'
            allocate_new_eip: '- (Optional) If set to false, use an available address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 2.7+. Valid values: true, false. Default: true.'
            availability_domain: '- (Optional) Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            azure_eip_name_resource_group: '- (Optional) Name of public IP Address resource and its resource group in Azure to be assigned to the gateway instance. Example: "IP_Name:Resource_Group_Name". Required when allocate_new_eip is false and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.'
            cloud_instance_id: '- Cloud instance ID of the gateway.'
            cloud_type: '- (Required) Cloud service provider to use to launch the gateway. Requires an integer value. Currently supports AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud (8192), AWS Top Secret (16384) and AWS Secret (32768).'
            cloudn_bkup_gateway_inst_id: '- Instance ID of the backup gateway.'
            connection: '- (Optional) Default value: "None".'
            customer_managed_keys: '- (Optional and Sensitive) Customer-managed key ID.'
            dnat_policy: '- (Optional) Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).'
            dns_server: '- Specify the DNS IP, only required while using a custom private DNS for the VPC.'
            dst_ip: '- (Optional) A destination IP address range where the policy rule applies.'
            dst_port: '- (Optional) A destination port where the policy rule applies.'
            duo_api_hostname: '- (Optional) API hostname for DUO auth mode. Required: Yes if otp_mode is "2".'
            duo_integration_key: '- (Optional) Integration key for DUO auth mode. Required if otp_mode is "2".'
            duo_push_mode: '- (Optional) Push mode for DUO auth. Required if otp_mode is "2". Valid values: "auto", "selective" and "token".'
            duo_secret_key: '- (Optional) Secret key for DUO auth mode. Required if otp_mode is "2".'
            eip: '- (Optional) Specified EIP to use for gateway creation. Required when allocate_new_eip is false.  Available in Controller version 3.5+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.'
            elb_dns_name: '- ELB DNS name.'
            elb_name: '- (Optional) A name for the ELB that is created. If it is not specified, a name is generated automatically.'
            enable_designated_gateway: '- (Optional) Enable Designated Gateway feature for Gateway. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false. Please view documentation here for more information on this feature.'
            enable_elb: '- (Optional) Specify whether to enable ELB or not. Not supported for OCI gateways. Valid values: true, false.'
            enable_encrypt_volume: '- (Optional) Enable EBS volume encryption for the gateway. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.'
            enable_jumbo_frame: '- (Optional) Enable jumbo frames for this gateway. Default value is true.'
            enable_ldap: '- (Optional) Enable/disable LDAP. Valid values: true, false. Default value: false.'
            enable_monitor_gateway_subnets: '- (Optional) If set to true, the Monitor Gateway Subnets feature is enabled. Default value is false. Available in provider version R2.17.1+.'
            enable_public_subnet_filtering: '- (Optional) Create a Public Subnet Filtering gateway. Valid values: true or false. Default value: false. Available as of provider version R2.18+.'
            enable_snat: '- (Optional) Enable Source NAT for this gateway. Valid values: true, false. Default value: false. NOTE: If using SNAT for FQDN use-case, please see notes'
            enable_spot_instance: '- (Optional) Enable spot instance. NOT supported for production deployment.'
            enable_vpc_dns_server: '- (Optional) Enable VPC DNS Server for gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.'
            enable_vpn_nat: '- (Optional) Enable/disable VPN NAT. Only supported for VPN gateway. Valid values: true, false. Default value: true.'
            exclude_rtb: '- (Optional) This field specifies which VPC private route table will not be programmed with the default route entry.'
            fault_domain: '- (Optional) Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            fqdn_lan_cidr: '- (Optional) If fqdn_lan_cidr is set, the FQDN gateway will be created with an additional LAN interface using the provided CIDR. This attribute is required when enabling FQDN gateway FireNet in Azure or GCP. Available in provider version R2.17.1+.'
            fqdn_lan_interface: '- The lan interface id of the of FQDN gateway with additional LAN interface. This attribute will be exported when enabling FQDN gateway firenet in Azure. Available in provider version R2.17.1+.'
            fqdn_lan_vpc_id: '- (Optional) FQDN LAN VPC ID. This attribute is required when enabling FQDN gateway FireNet in GCP. Available as of provider version R2.18.1+.'
            gw_name: '- (Required) Name of the Aviatrix gateway to be created.'
            gw_size: '- (Required) Size of the gateway instance. Example: AWS/AWSGov/AWSChina: "t2.large", GCP: "n1-standard-1", Azure/AzureGov/AzureChina: "Standard_B1s", OCI: "VM.Standard2.2".'
            idle_timeout: '- (Optional) It sets the value (seconds) of the idle timeout. This idle timeout feature is enable only if this attribute is set, otherwise it is disabled. The entered value must be an integer number greater than 300.  Available in provider version R2.17.1+.'
            image_version: '- (Optional/Computed) The image version of the gateway. Use aviatrix_gateway_image data source to programmatically retrieve this value for the desired software_version. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the aviatrix_controller_config resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.'
            insane_mode: ', please see notes here.'
            insane_mode_az: '- (Optional) Region + Availability Zone of subnet being created for Insane Mode gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if insane_mode is set. Example: AWS: "us-west-1a".'
            interface: '- (Optional) An output interface where the policy rule applies.'
            ldap_base_dn: '- (Optional) LDAP base DN. Required if enable_ldap is true.'
            ldap_bind_dn: '- (Optional) LDAP bind DN. Required if enable_ldap is true.'
            ldap_password: '- (Optional) LDAP password. Required if enable_ldap is true.'
            ldap_server: '- (Optional) LDAP server address. Required if enable_ldap is true.'
            ldap_username_attribute: '- (Optional) LDAP user attribute. Required if enable_ldap is true.'
            mark: '- (Optional) A tag or mark of a TCP session where the policy rule applies.'
            max_vpn_conn: '- (Optional) Maximum number of active VPN users allowed to be connected to this gateway. Required if vpn_access is true. Make sure the number is smaller than the VPN CIDR block. Example: 100. NOTE: Please see notes'
            monitor_exclude_list: '- (Optional) Set of monitored instance ids. Only valid when ''enable_monitor_gateway_subnets'' = true. Available in provider version R2.17.1+.'
            name_servers: '- (Optional) A list of DNS servers used to resolve domain names by a connected VPN user when Split Tunnel Mode is enabled.'
            new_src_ip: '- (Optional) The changed source IP address when all specified qualifier conditions meet. One of the rule fields must be specified for this rule to take effect.'
            new_src_port: '- (Optional) The translated destination port when all specified qualifier conditions meet. One of the rule field must be specified for this rule to take effect.'
            okta_token: '- (Optional) Token for Okta auth mode. Required if otp_mode is "3".'
            okta_url: '- (Optional) URL for Okta auth mode. Required if otp_mode is "3".'
            okta_username_suffix: '- (Optional) Username suffix for Okta auth mode. Example: "aviatrix.com".'
            otp_mode: '- (Optional) Two step authentication mode. Valid values: "2" for DUO, "3" for Okta.'
            peering_ha_availability_domain: '- (Optional) Peering HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            peering_ha_azure_eip_name_resource_group: '- (Optional) Name of public IP address resource and its resource group in Azure to be assigned to the HA peering instance. Example: "IP_Name:Resource_Group_Name". Required if peering_ha_eip is set and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.'
            peering_ha_cloud_instance_id: '- Cloud instance ID of the HA gateway.'
            peering_ha_eip: '- (Optional) Public IP address to be assigned to the HA peering instance. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.'
            peering_ha_fault_domain: '- (Optional) Peering HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            peering_ha_gw_name: '- Aviatrix gateway unique name of HA gateway.'
            peering_ha_gw_size: '- (Optional) Size of the Peering HA Gateway to be created. Required if enabling Peering HA. NOTE: Please see notes'
            peering_ha_image_version: '- (Optional/Computed) The image version of the HA gateway. Use aviatrix_gateway_image data source to programmatically retrieve this value for the desired ha_software_version. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the aviatrix_controller_config resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.'
            peering_ha_insane_mode_az: '- (Optional) Region + Availability Zone of subnet being created for Insane Mode-enabled Peering HA Gateway. Required for AWS only if insane_mode is set and peering_ha_subnet is set. Example: AWS: "us-west-1a".'
            peering_ha_private_ip: '- Private IP address of HA gateway.'
            peering_ha_public_ip: '- Public IP address of the peering HA Gateway created.'
            peering_ha_security_group_id: '- HA security group used for the gateway.'
            peering_ha_software_version: '- (Optional/Computed) The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the aviatrix_controller_config resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.'
            peering_ha_subnet: '- (Optional) Public subnet CIDR to create Peering HA Gateway in. Required if enabling Peering HA for AWS/AWSGov/AWS Top Secret/AWS Secret/Azure/AzureGov/Alibaba Cloud. Optional if enabling Peering HA for GCP. Example: AWS: "10.0.0.0/16".'
            peering_ha_zone: '- (Optional) Zone to create Peering HA Gateway in. Required if enabling Peering HA for GCP. Example: GCP: "us-west1-c". Optional for Azure. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.'
            private_ip: '- Private IP address of the gateway created.'
            protocol: '- (Optional) A destination port protocol where the policy rule applies.'
            public_dns_server: '- DNS server used by the gateway. Default is "8.8.8.8", can be overridden with the VPC''s setting.'
            public_ip: '- Public IP address of the gateway created.'
            public_subnet_filtering_guard_duty_enforced: '- (Optional) Whether to enforce Guard Duty IP blocking.  Only valid when enable_public_subnet_filtering attribute is true. Valid values: true or false. Default value: true. Available as of provider version R2.18+.'
            public_subnet_filtering_ha_route_tables: '- (Optional) Route tables whose associated public subnets are protected for the HA PSF gateway. Required when enable_public_subnet_filtering and peering_ha_subnet are set. Available as of provider version R2.18+.'
            public_subnet_filtering_route_tables: '- (Optional) Route tables whose associated public subnets are protected. Only valid when enable_public_subnet_filtering attribute is true. Available as of provider version R2.18+.'
            renegotiation_interval: '- (Optional) It sets the value (seconds) of the renegotiation interval. This renegotiation interval feature is enable only if this attribute is set, otherwise it is disabled. The entered value must be an integer number greater than 300. Available in provider version R2.17.1+.'
            rx_queue_size: '- (Optional) Gateway ethernet interface RX queue size. Applies on HA as well if enabled. Once set, can''t be deleted or disabled. Available for AWS as of provider version R2.22+.'
            saml_enabled: '- (Optional) Enable/disable SAML. This field is available in Controller version 3.3 or later release. Valid values: true, false. Default value: false.'
            search_domains: '- (Optional) A list of domain names that will use the NameServer when a specific name is not in the destination when Split Tunnel Mode is enabled.'
            security_group_id: '- Security group used for the gateway.'
            single_az_ha: '(Optional) If enabled, Controller monitors the health of the gateway and restarts the gateway if it becomes unreachable. Valid values: true, false. Default value: false.'
            single_ip_snat: '- (Optional) Enable Source NAT in "single ip" mode for this gateway. Valid values: true, false. Default value: false. NOTE: If using SNAT for FQDN use-case, please see notes'
            software_version: '- (Optional/Computed) The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the aviatrix_controller_config resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.'
            split_tunnel: '- (Optional) Enable/disable Split Tunnel Mode. Valid values: true, false. Default value: true. Please see here for more information on split tunnel.'
            spot_price: '- (Optional) Price for spot instance. NOT supported for production deployment.'
            src_ip: '- (Optional) A source IP address range where the policy rule applies.'
            src_port: '- (Optional) A source port that the policy rule applies.'
            storage_name: (Optional) Specify a storage account. Required if cloud_type is 2048 (AzureChina). Removed in Provider version 2.21.0+.
            subnet: '- (Required) A VPC network address range selected from one of the available network ranges. Example: "172.31.0.0/20". NOTE: If using'
            tag_list: '- (Optional) Tag list of the gateway instance. Only available for AWS, AWSGov, AWSChina, Azure, AzureGov and AzureChina gateways. Example: ["key1:value1", "key2:value2"].'
            tags: '- (Optional) Map of tags to assign to the gateway. Only available for AWS, AWSGov, AWSChina, Azure, AzureGov, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.'
            tunnel_detection_time: '- (Optional) The IPsec tunnel down detection time for the Gateway in seconds. Must be a number in the range [20-600]. The default value is set by the controller (60 seconds if nothing has been changed). NOTE: The controller UI has an option to set the tunnel detection time for all gateways. To achieve the same functionality in Terraform, use the same TF_VAR to manage the tunnel detection time for all gateways. Available in provider R2.19+.'
            vpc_id: '- (Required) VPC ID/VNet name of cloud provider. Example: AWS/AWSGov/AWSChina: "vpc-abcd1234", GCP: "vpc-gcp-test~-~project-id", Azure/AzureGov/AzureChina: "vnet_name:rg_name:resource_guid", OCI: "ocid1.vcn.oc1.iad.aaaaaaaaba3pv6wkcr4jqae5f44n2b2m2yt2j6rx32uzr4h25vqstifsfdsq".'
            vpc_reg: '- (Required) VPC region the gateway will be created in. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".'
            vpn_access: '- (Optional) Enable user access through VPN to this gateway. Valid values: true, false.'
            vpn_cidr: '- (Optional) VPN CIDR block for the gateway. Required if vpn_access is true. Example: "192.168.43.0/24".'
            vpn_protocol: '- (Optional) Transport mode for VPN connection. All cloud_types support TCP with ELB, and UDP without ELB. AWS(1) additionally supports UDP with ELB. Valid values: "TCP", "UDP". If not specified, "TCP" will be used.'
            zone: '- (Optional) Availability Zone. Only available for Azure (8), Azure GOV (32), Azure CHINA (2048) and Public Subnet Filtering gateway. Available for Azure as of provider version R2.17+.'
        importStatements: []
    aviatrix_gateway_certificate_config:
        subCategory: Settings
        description: Manages Aviatrix gateway certificate configuration
        name: aviatrix_gateway_certificate_config
        title: aviatrix_gateway_certificate_config
        examples:
            - name: test_gateway_cert
              manifest: |-
                {
                  "ca_certificate": "${file(\"path/to/CA_cert.pem\")}",
                  "ca_private_key": "${file(\"path/to/CA_private.key\")}"
                }
        argumentDocs:
            ca_certificate: '- (Required) CA Certificate in PEM format. To read certificate from a file please use the built-in file function.'
            ca_private_key: '- (Required/Sensitive) CA Private Key. To read the private key from a file please use the built-in file function.'
        importStatements: []
    aviatrix_gateway_dnat:
        subCategory: Gateway
        description: Configure policies for destination NAT for an Aviatrix gateway
        name: aviatrix_gateway_dnat
        title: aviatrix_gateway_dnat
        examples:
            - name: test_dnat
              manifest: |-
                {
                  "dnat_policy": [
                    {
                      "connection": "None",
                      "dnat_ips": "175.32.12.12",
                      "dnat_port": "12",
                      "dst_cidr": "14.0.0.0/16",
                      "dst_port": "222",
                      "exclude_rtb": "",
                      "interface": "eth0",
                      "mark": "22",
                      "protocol": "tcp",
                      "src_cidr": "13.0.0.0/16",
                      "src_port": "22"
                    }
                  ],
                  "gw_name": "avtx-gw-1"
                }
        argumentDocs:
            apply_route_entry: '- (Optional) This is an option to program the route entry ''DST CIDR pointing to Aviatrix Gateway'' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.19.2+.'
            connection: '- (Optional) This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".'
            dnat_ips: '- (Optional) This is a rule field that specifies the translated destination IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.'
            dnat_policy: '- (Required) Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1) and Azure(8).'
            dnat_port: '- (Optional) This is a rule field that specifies the translated destination port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule field must be specified for this rule to take effect.'
            dst_cidr: '- (Optional) This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.'
            dst_port: '- (Optional) This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.'
            exclude_rtb: '- (Optional) This field specifies which VPC private route table will not be programmed with the default route entry.'
            gw_name: '- (Required) Name of the Aviatrix gateway the custom DNAT will be configured for.'
            interface: must be empty when using a route-based connection in a policy.
            mark: '- (Optional) This is a rule field that specifies a tag or mark of a TCP session when all qualifier conditions meet. When not specified, this field is not used.'
            protocol: '- (Optional) This is a qualifier condition that specifies a destination port protocol where the rule applies. When not specified, this field is not used.'
            src_cidr: '- (Optional) This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.'
            src_port: '- (Optional) This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.'
        importStatements: []
    aviatrix_gateway_snat:
        subCategory: Gateway
        description: Configure customized SNAT policies for an Aviatrix gateway
        name: aviatrix_gateway_snat
        title: aviatrix_gateway_snat
        examples:
            - name: test_snat
              manifest: |-
                {
                  "gw_name": "avtx-gw-1",
                  "snat_mode": "customized_snat",
                  "snat_policy": [
                    {
                      "connection": "None",
                      "dst_cidr": "14.0.0.0/16",
                      "dst_port": "222",
                      "exclude_rtb": "",
                      "interface": "eth0",
                      "mark": "22",
                      "protocol": "tcp",
                      "snat_ips": "175.32.12.12",
                      "snat_port": "12",
                      "src_cidr": "13.0.0.0/16",
                      "src_port": "22"
                    }
                  ]
                }
        argumentDocs:
            apply_route_entry: '- (Optional) This is an option to program the route entry ''DST CIDR pointing to Aviatrix Gateway'' into Cloud platform routing table. Type: Boolean. Default: True. Available as of provider version R2.21.0+.'
            apply_route_entry = false: to any of these Terraform configurations to prevent any changes.
            connection: '- (Optional) This is a qualifier condition that specifies output connection where the rule applies. Default value: "None".'
            dst_cidr: '- (Optional) This is a qualifier condition that specifies a destination IP address range where the rule applies. When not specified, this field is not used.'
            dst_port: '- (Optional) This is a qualifier condition that specifies a destination port where the rule applies. When not specified, this field is not used.'
            exclude_rtb: '- (Optional) This field specifies which VPC private route table will not be programmed with the default route entry.'
            gw_name: '- (Required) Name of the Aviatrix gateway the custom SNAT will be configured for.'
            interface: must be empty when using a route-based connection in a policy.
            mark: '- (Optional) This is a qualifier condition that specifies a tag or mark of a TCP session where the rule applies. When not specified, this field is not used.'
            protocol: '- (Optional) This is a qualifier condition that specifies a destination port protocol where the rule applies. Valid values: ''all'', ''tcp'', ''udp'', ''icmp''. ''Default: ''all''.'
            snat_ips: '- (Optional) This is a rule field that specifies the changed source IP address when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.'
            snat_mode: '- (Optional) NAT mode. Valid values: "customized_snat". Default value: "customized_snat".'
            snat_policy: '- (Required) Policy rule applied for enabling source NAT (mode: "customized_snat"). Currently only supports AWS(1) and Azure(8).'
            snat_port: '- (Optional) This is a rule field that specifies the changed source port when all specified qualifier conditions meet. When not specified, this field is not used. One of the rule fields must be specified for this rule to take effect.'
            src_cidr: '- (Optional) This is a qualifier condition that specifies a source IP address range where the rule applies. When not specified, this field is not used.'
            src_port: '- (Optional) This is a qualifier condition that specifies a source port that the rule applies. When not specified, this field is not used.'
        importStatements: []
    aviatrix_geo_vpn:
        subCategory: OpenVPN
        description: Enables and manages the Aviatrix Geo VPN
        name: aviatrix_geo_vpn
        title: aviatrix_geo_vpn
        examples:
            - name: test_geo_vpn
              manifest: |-
                {
                  "account_name": "devops-aws",
                  "cloud_type": 1,
                  "domain_name": "aviatrix.live",
                  "elb_dns_names": [
                    "elb-test1-497f5e89.elb.us-west-1.amazonaws.com",
                    "elb-test2-974f895e.elb.us-east-2.amazonaws.com"
                  ],
                  "service_name": "vpn"
                }
        argumentDocs:
            account_name: '- (Required) This parameter represents the name of a Cloud-Account in Aviatrix controller.'
            cloud_type: '- (Required) Type of cloud service provider, requires an integer value. Currently only AWS(1) is supported.'
            domain_name: '- (Required) The hosted domain name. It must be hosted by AWS Route53 or Azure DNS in the selected account.'
            elb_dns_names: '- (Required) List of ELB names to attach to this Geo VPN name.'
            service_name: '- (Required) The hostname that users will connect to. A DNS record will be created for this name in the specified domain name.'
        importStatements: []
    aviatrix_netflow_agent:
        subCategory: Settings
        description: Enables and disables netflow_agent
        name: aviatrix_netflow_agent
        title: aviatrix_netflow_agent
        examples:
            - name: test_netflow_agent
              manifest: |-
                {
                  "excluded_gateways": [
                    "a",
                    "b"
                  ],
                  "port": 10,
                  "server_ip": "1.2.3.4",
                  "version": 5
                }
        argumentDocs:
            enable_l7_mode: '(Optional) Enable L7 mode. Default value: false.'
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            port: (Required) Netflow server port.
            server_ip: (Required) Netflow server IP address.
            status: '- The status of netflow agent.'
            version: '(Optional) Netflow version (5 or 9). Default value: 5.'
        importStatements: []
    aviatrix_periodic_ping:
        subCategory: Gateway
        description: Manages periodic pings on Aviatrix gateways
        name: aviatrix_periodic_ping
        title: aviatrix_periodic_ping
        examples:
            - name: test_ping
              manifest: |-
                {
                  "gw_name": "test-gw",
                  "interval": 600,
                  "ip_address": "127.0.0.1"
                }
        argumentDocs:
            gw_name: '- (Required) Name of the gateway.'
            interval: '- (Required) Interval between pings in seconds.'
            ip_address: '- (Required) IP Address to ping.'
        importStatements: []
    aviatrix_private_mode_lb:
        subCategory: Private Mode
        description: Creates and manages a Private Mode load balancer
        name: aviatrix_private_mode_lb
        title: aviatrix_private_mode_lb
        examples:
            - name: test
              manifest: |-
                {
                  "account_name": "devops",
                  "lb_type": "controller",
                  "region": "us-east-1",
                  "vpc_id": "vpc-abcdef"
                }
            - name: test2
              manifest: |-
                {
                  "account_name": "devops",
                  "lb_type": "multicloud",
                  "multicloud_access_vpc_id": "vpc-abcdef",
                  "proxies": [
                    {
                      "instance_id": "i-123456",
                      "proxy_type": "multicloud",
                      "vpc_id": "vpc-abcdef"
                    }
                  ],
                  "region": "us-east-1",
                  "vpc_id": "vpc-abcdef"
                }
        argumentDocs:
            account_name: '- (Required) Name of the access account.'
            instance_id: '- (Required) Instance ID of the proxy.'
            lb_type: '- (Required) Type of load balancer to create. Must be one of controller or multicloud.'
            multicloud_access_vpc_id: '- (Optional) ID of the VPC with a multicloud endpoint. Required when lb_type is multicloud.'
            proxies: '- (Optional) List of multicloud proxies. Only valid when lb_type is multicloud.'
            proxy_type: '- (Required) Type of load balancer. Must be one of controller or multicloud.'
            region: '- (Required) Name of the region containing the VPC.'
            vpc_id: '- (Required) ID of the VPC for the load balancer.'
        importStatements: []
    aviatrix_private_mode_multicloud_endpoint:
        subCategory: Private Mode
        description: Creates and manages a Private Mode multicloud endpoint
        name: aviatrix_private_mode_multicloud_endpoint
        title: aviatrix_private_mode_multicloud_endpoint
        examples:
            - name: test
              manifest: |-
                {
                  "account_name": "devops",
                  "controller_lb_vpc_id": "vpc-abcdefg",
                  "region": "us-east-1",
                  "vpc_id": "vpc-abcdef"
                }
        argumentDocs:
            account_name: '- (Required) Name of the access account.'
            controller_lb_vpc_id: '- (Required) ID of the VPC containing a Private Mode controller load balancer.'
            dns_entry: '- DNS entry of the endpoint.'
            region: '- (Required) Region of the VPC.'
            vpc_id: '- (Required) ID of the VPC to create the endpoint in.'
        importStatements: []
    aviatrix_proxy_config:
        subCategory: Settings
        description: Creates and manages an Aviatrix controller proxy config resource
        name: aviatrix_proxy_config
        title: aviatrix_proxy_config
        examples:
            - name: test_proxy_config
              manifest: |-
                {
                  "http_proxy": "172.31.52.145:3127",
                  "https_proxy": "172.31.52.145:3129",
                  "proxy_ca_certificate": "${file(\"/path/to/ca.pem\")}"
                }
        argumentDocs:
            http_proxy: '- (Required) Http proxy URL.'
            https_proxy: '- (Required) Https proxy URL.'
            proxy_ca_certificate: '- (Optional) Server CA Certificate file. Use the file function to read from a file.'
        importStatements: []
    aviatrix_rbac_group:
        subCategory: Accounts
        description: Creates and manages Aviatrix RBAC groups
        name: aviatrix_rbac_group
        title: aviatrix_rbac_group
        examples:
            - name: test_group
              manifest: |-
                {
                  "group_name": "write_only"
                }
        argumentDocs:
            group_name: '- (Required) This parameter represents the name of a RBAC group to be created.'
            local_login: '- (Optional) Whether to allow members of an RBAC group to bypass LDAP/MFA for Duo login . Supported values: true, false. Default value: false. Available in provider version R2.17.1+.'
        importStatements: []
    aviatrix_rbac_group_access_account_attachment:
        subCategory: Accounts
        description: Creates and manages Aviatrix RBAC group access account attachments
        name: aviatrix_rbac_group_access_account_attachment
        title: aviatrix_rbac_group_access_account_attachment
        examples:
            - name: test_attachment
              manifest: |-
                {
                  "access_account_name": "account_name",
                  "group_name": "write_only"
                }
        argumentDocs:
            access_account_name: '- (Required) Account name. This can be used for logging in to CloudN console or UserConnect controller.'
            group_name: '- (Required) This parameter represents the name of a RBAC group.'
        importStatements: []
    aviatrix_rbac_group_permission_attachment:
        subCategory: Accounts
        description: Creates and manages Aviatrix RBAC group permission attachments
        name: aviatrix_rbac_group_permission_attachment
        title: aviatrix_rbac_group_permission_attachment
        examples:
            - name: test_attachment
              manifest: |-
                {
                  "group_name": "write_only",
                  "permission_name": "all_write"
                }
        argumentDocs:
            group_name: '- (Required) This parameter represents the name of a RBAC group.'
            permission_name: '- (Required) This parameter represents the permission to attach to the RBAC group.'
        importStatements: []
    aviatrix_rbac_group_user_attachment:
        subCategory: Accounts
        description: Creates and manages Aviatrix RBAC group user attachments
        name: aviatrix_rbac_group_user_attachment
        title: aviatrix_rbac_group_user_attachment
        examples:
            - name: test_attachment
              manifest: |-
                {
                  "group_name": "write_only",
                  "user_name": "user_name"
                }
        argumentDocs:
            group_name: '- (Required) This parameter represents the name of a RBAC group.'
            user_name: '- (Required) Username of the account user.'
        importStatements: []
    aviatrix_remote_syslog:
        subCategory: Settings
        description: Enables and disables remote syslog
        name: aviatrix_remote_syslog
        title: aviatrix_remote_syslog
        examples:
            - name: test_remote_syslog
              manifest: |-
                {
                  "index": 0,
                  "name": "test",
                  "port": 10,
                  "protocol": "TCP",
                  "server": "1.2.3.4"
                }
            - name: test_remote_syslog
              manifest: |-
                {
                  "ca_certificate_file": "${file(\"/path/to/ca.pem\")}",
                  "index": 0,
                  "name": "rsyslog-profilename",
                  "port": 10,
                  "private_key_file": "${file(\"/path/to/client.pem\")}",
                  "protocol": "TCP",
                  "public_certificate_file": "${file(\"/path/to/server.pem\")}",
                  "server": "1.2.3.4"
                }
        argumentDocs:
            ca_certificate_file: (Optional) The Certificate Authority (CA) certificate. Use the file function to read from a file.
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            index: (Optional) Profile index. An index from 0 to 9 is supported. 0 by default.
            name: (Required) Profile name.
            notls: '- This attribute is true if the remote syslog is not protected by TLS.'
            port: (Required) Port number.
            private_key_file: (Optional) The private key of the controller that pairs with the public certificate. Use the file function to read from a file.
            protocol: (Optional) TCP or UDP. TCP by default.
            public_certificate_file: (Optional) The public certificate of the controller signed by the same CA. Use the file function to read from a file.
            server: (Required) Server IP.
            status: '- The status of remote syslog.'
            template: (Optional) Optional custom template.
        importStatements: []
    aviatrix_saml_endpoint:
        subCategory: OpenVPN
        description: Creates and manages an Aviatrix SAML Endpoint
        name: aviatrix_saml_endpoint
        title: aviatrix_saml_endpoint
        examples:
            - name: test_saml_endpoint
              manifest: |-
                {
                  "endpoint_name": "saml-test",
                  "idp_metadata": "${file(\"idp_metadata.xml\")}",
                  "idp_metadata_type": "Text"
                }
            - name: test_saml_endpoint
              manifest: |-
                {
                  "endpoint_name": "saml-test",
                  "idp_metadata_type": "URL",
                  "idp_metadata_url": "https://dev-xyzz.okta.com/app/asdfasdfwfwf/sso/saml/metadata"
                }
            - name: test_saml_endpoint
              manifest: |-
                {
                  "access_set_by": "controller",
                  "controller_login": true,
                  "endpoint_name": "saml-test",
                  "idp_metadata": "${var.idp_metadata}",
                  "idp_metadata_type": "Text",
                  "rbac_groups": [
                    "admin",
                    "read_only"
                  ]
                }
        argumentDocs:
            access_set_by: '- (Optional) Access type. Valid values: "controller", "profile_attribute". Default value: "controller".'
            controller_login: '- (Optional) Valid values: true, false. Default value: false. Set true for creating a saml endpoint for controller login.'
            custom_entity_id: '- (Optional) Custom Entity ID. Required to be non-empty for ''Custom'' Entity ID type, empty for ''Hostname'' Entity ID type.'
            custom_saml_request_template: '- (Optional) Custom SAML Request Template in string.'
            endpoint_name: '- (Required) The SAML endpoint name.'
            idp_metadata: '- (Optional) The IDP Metadata from SAML provider. Required if idp_metadata_type is "Text" and should be unset if type is "URL". Normally the metadata is in XML format which may contain special characters. Best practice is to use the file function to read from a local Metadata XML file.'
            idp_metadata_type: '- (Required) The IDP Metadata type. Can be either "Text" or "URL".'
            idp_metadata_url: '- (Optional) The IDP Metadata URL from SAML provider. Required if idp_metadata_type is "URL" and should be unset if type is "Text".'
            rbac_groups: '- (Optional) List of rbac groups. Required for controller login and "access_set_by" of "controller".'
            sign_authn_request: '- (Optional) Whether to sign SAML AuthnRequests. Supported values: true, false . Default value: false. Available in provider version R2.17.1+.'
        importStatements: []
    aviatrix_segmentation_network_domain:
        subCategory: Multi-Cloud Transit
        description: Creates and manages an Aviatrix Segmentation Network Domain
        name: aviatrix_segmentation_network_domain
        title: aviatrix_segmentation_network_domain
        examples:
            - name: test_segmentation_network_domain
              manifest: |-
                {
                  "domain_name": "domain-a"
                }
        argumentDocs:
            domain_name: '- (Required) Name of the Network Domain.'
        importStatements: []
    aviatrix_segmentation_network_domain_association:
        subCategory: Multi-Cloud Transit
        description: Creates and manages an Aviatrix Segmentation Network Domain Association
        name: aviatrix_segmentation_network_domain_association
        title: aviatrix_segmentation_network_domain_association
        examples:
            - name: test_segmentation_network_domain_association
              manifest: |-
                {
                  "attachment_name": "attachment-name",
                  "network_domain_name": "network-domain-name"
                }
        argumentDocs:
            attachment_name: '- (Required) Name of the transit gateway attachment, Spoke or Edge, to associate with the network domain.'
            network_domain_name: '- (Required) Name of the Segmentation Network Domain.'
            transit_gateway_name: '- (Optional) Name of the Transit Gateway.'
        importStatements: []
    aviatrix_segmentation_network_domain_connection_policy:
        subCategory: Multi-Cloud Transit
        description: Creates and manages an Aviatrix Segmentation Network Domain Connection Policy
        name: aviatrix_segmentation_network_domain_connection_policy
        title: aviatrix_segmentation_network_domain_connection_policy
        examples:
            - name: test_segmentation_network_domain_connection_policy
              manifest: |-
                {
                  "domain_name_1": "domain-a",
                  "domain_name_2": "domain-b"
                }
        argumentDocs:
            domain_name_1: '- (Required) Name of the Network Domain to connect to Domain 2.'
            domain_name_2: '- (Required) Name of the Network Domain to connect to Domain 1.'
        importStatements: []
    aviatrix_site2cloud:
        subCategory: Site2Cloud
        description: Creates and manages Aviatrix Site2Cloud connections
        name: aviatrix_site2cloud
        title: aviatrix_site2cloud
        examples:
            - name: test_s2c
              manifest: |-
                {
                  "connection_name": "my_conn",
                  "connection_type": "unmapped",
                  "local_subnet_cidr": "10.20.1.0/24",
                  "primary_cloud_gateway_name": "gw1",
                  "remote_gateway_ip": "5.5.5.5",
                  "remote_gateway_type": "generic",
                  "remote_subnet_cidr": "10.23.0.0/24",
                  "tunnel_type": "policy",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: test_s2c
              manifest: |-
                {
                  "connection_name": "my_conn",
                  "connection_type": "mapped",
                  "custom_mapped": true,
                  "local_destination_real_cidrs": [
                    "10.11.2.0/24"
                  ],
                  "local_destination_virtual_cidrs": [
                    "10.11.4.0/24"
                  ],
                  "local_source_real_cidrs": [
                    "10.11.0.0/24"
                  ],
                  "local_source_virtual_cidrs": [
                    "10.11.1.0/24"
                  ],
                  "primary_cloud_gateway_name": "gw1",
                  "remote_destination_real_cidrs": [
                    "10.10.2.0/24"
                  ],
                  "remote_destination_virtual_cidrs": [
                    "10.10.4.0/24"
                  ],
                  "remote_gateway_ip": "5.5.5.5",
                  "remote_gateway_type": "generic",
                  "remote_source_real_cidrs": [
                    "10.10.0.0/24"
                  ],
                  "remote_source_virtual_cidrs": [
                    "10.10.1.0/24"
                  ],
                  "tunnel_type": "route",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: test_s2c
              manifest: |-
                {
                  "auth_type": "Cert",
                  "ca_cert_tag_name": "tag1",
                  "connection_name": "my_conn",
                  "connection_type": "unmapped",
                  "local_subnet_cidr": "10.1.1.0/24",
                  "primary_cloud_gateway_name": "gw1",
                  "remote_gateway_ip": "5.5.5.5",
                  "remote_gateway_type": "generic",
                  "remote_identifier": "gw-10-10-0-115",
                  "remote_subnet_cidr": "170.1.1.0/24",
                  "tunnel_type": "route",
                  "vpc_id": "vpc-abcd1234"
                }
        argumentDocs:
            auth_type: '- (Optional) Authentication Type. Valid values: ''PSK'' and ''Cert''. Default value: ''PSK''.'
            backup_gateway_name: '- (Optional) Backup gateway name. NOTE: Please see notes'
            backup_local_tunnel_ip: '- (Optional) Backup local tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.'
            backup_pre_shared_key: '- (Optional) Backup Pre-Shared Key.'
            backup_remote_gateway_ip: '- (Optional) Backup Remote Gateway IP. NOTE: Please see notes'
            backup_remote_gateway_latitude: '- (Optional) Latitude of backup remote gateway. Does not support refresh.'
            backup_remote_gateway_longitude: '- (Optional) Longitude of backup remote gateway. Does not support refresh.'
            backup_remote_identifier: '- (Optional) Backup remote identifier. Required for Cert based authentication type with HA enabled. Example: "gw-10-10-0-116".'
            backup_remote_tunnel_ip: '- (Optional) Backup remote tunnel IP address. Only valid when HA enabled route based connection. Available as of provider version R2.19+.'
            ca_cert_tag_name: '- (Optional) Name of Remote CA Certificate Tag for creating Site2Cloud tunnels. Required for Cert based authentication type.'
            connection_name: '- (Required) Site2Cloud connection name.'
            connection_type: '- (Required) Connection type. Valid Values: "mapped", "unmapped".'
            custom_algorithms: '- (Optional) Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption. Valid values: true, false. NOTE: Please see notes'
            custom_mapped: connection.
            enable_active_active: '- (Optional) Enable/disable active active HA for an existing site2cloud connection. Valid values: true, false. Default value: false.'
            enable_dead_peer_detection: '- (Optional) Enable/disable Deed Peer Detection for an existing site2cloud connection. Default value: true. NOTE: Please see notes'
            enable_event_triggered_ha: '- (Optional) Enable Event Triggered HA. Default value: false. Valid values: true or false. Available as of provider version R2.19+.'
            enable_ikev2: '- (Optional) Switch to enable IKEv2. Valid values: true, false. Default value: false.'
            enable_single_ip_ha: '- (Optional) Enable single IP HA feature. Available as of provider version 2.19+.'
            forward_traffic_to_transit: '- (Optional) Enable spoke gateway with mapped site2cloud configurations to forward traffic from site2cloud connection to Aviatrix Transit Gateway. Default value: false. Valid values: true or false. Available in provider version 2.17.2+.'
            ha_enabled: '- (Optional) Specify whether or not to enable HA. Valid Values: true, false. NOTE: Please see notes'
            local_destination_real_cidrs: '- (Optional) List of Local Initiated Traffic Destination Real CIDRs.'
            local_destination_virtual_cidrs: '- (Optional) List of Local Initiated Traffic Destination Virtual CIDRs.'
            local_source_real_cidrs: '- (Optional) List of Local Initiated Traffic Source Real CIDRs.'
            local_source_virtual_cidrs: '- (Optional) List of Local Initiated Traffic Source Virtual CIDRs.'
            local_subnet_cidr: '- (Optional) Local subnet CIDR. Required for connection type "mapped", except for'
            local_subnet_virtual: '- Local subnet CIDR (Virtual). Required for connection type "mapped", except for'
            local_tunnel_ip: '- (Optional) Local tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.'
            phase_1_authentication: '- (Optional) Phase one Authentication. Valid values: "SHA-1", "SHA-256", "SHA-384" and "SHA-512". Default value: "SHA-256".'
            phase_1_dh_groups: '- (Optional) Phase one DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".'
            phase_1_encryption: '- (Optional) Phase one Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", and "AES-256-GCM-128". Default value: "AES-256-CBC".'
            phase_2_authentication: '- (Optional) Phase two Authentication. Valid values: "NO-AUTH", "HMAC-SHA-1", "HMAC-SHA-256", "HMAC-SHA-384" and "HMAC-SHA-512". Default value: "HMAC-SHA-256".'
            phase_2_dh_groups: '- (Optional) Phase two DH Groups. Valid values: "1", "2", "5", "14", "15", "16", "17", "18", "19", "20" and "21". Default value: "14".'
            phase_2_encryption: '- (Optional) Phase two Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", "AES-256-GCM-128" and "NULL-ENCR". Default value: "AES-256-CBC".'
            phase1_remote_identifier: '- (Optional) List of phase 1 remote identifier of the IPsec tunnel. This can be configured as a list of any string, including empty string. Example: ["1.2.3.4"] when HA is disabled, ["1.2.3.4", "abcd"] when HA is enabled. Available as of provider version R2.19+.'
            pre_shared_key: '- (Optional) Pre-Shared Key.'
            primary_cloud_gateway_name: '- (Required) Primary cloud gateway name.'
            private_route_encryption: '- (Optional) Private route encryption switch. Valid values: true, false.'
            remote_destination_real_cidrs: '- (Optional) List of  Remote Initiated Traffic Destination Real CIDRs.'
            remote_destination_virtual_cidrs: '- (Optional) List of Remote Initiated Traffic Destination Virtual CIDRs.'
            remote_gateway_ip: '- (Required) Remote gateway IP.'
            remote_gateway_latitude: '- (Optional) Latitude of remote gateway. Does not support refresh.'
            remote_gateway_longitude: '- (Optional) Longitude of remote gateway. Does not support refresh.'
            remote_gateway_type: '- (Required) Remote gateway type. Valid Values: "generic", "avx", "aws", "azure", "sonicwall", "oracle".'
            remote_identifier: '- (Optional) Remote identifier. Required for Cert based authentication type. Example: "gw-10-10-0-115".'
            remote_source_real_cidrs: '- (Optional) List of Remote Initiated Traffic Source Real CIDRs.'
            remote_source_virtual_cidrs: '- (Optional) List of Remote Initiated Traffic Source Virtual CIDRs.'
            remote_subnet_cidr: '- (Required) Remote subnet CIDR. Not required for custom_mapped connection.'
            remote_subnet_virtual: '- Remote subnet CIDR (Virtual). Required for connection type "mapped", except for'
            remote_tunnel_ip: '- (Optional) Remote tunnel IP address. Only valid for route based connection. Available as of provider version R2.19+.'
            route_table_list: '- (Optional) Route tables to modify.'
            ssl_server_pool: '- (Optional) Specify ssl_server_pool. Default value: "192.168.44.0/24". NOTE: Please see notes'
            tunnel_type: '- (Required) Site2Cloud tunnel type. Valid Values: "policy", "route".'
            vpc_id: '- (Required) VPC ID of the cloud gateway.'
        importStatements: []
    aviatrix_site2cloud_ca_cert_tag:
        subCategory: Site2Cloud
        description: Creates and manages Aviatrix Site2Cloud CA Cert Tags
        name: aviatrix_site2cloud_ca_cert_tag
        title: aviatrix_site2cloud_ca_cert_tag
        examples:
            - name: test
              manifest: |-
                {
                  "ca_certificates": [
                    {
                      "cert_content": "${file(\"/home/ubuntu/avx_gw_ca_cert_in_ui_root_only.crt\")}"
                    }
                  ],
                  "tag_name": "test"
                }
            - name: test
              manifest: |-
                {
                  "ca_certificates": [
                    {
                      "cert_content": "${file(\"/home/ubuntu/avx_gw_ca_cert_root.crt\")}"
                    },
                    {
                      "cert_content": "${file(\"/home/ubuntu/avx_gw_ca_cert_intermediate.crt\")}"
                    },
                    {
                      "cert_content": "${file(\"/home/ubuntu/avx_gw_ca_cert_intermediate2.crt\")}"
                    }
                  ],
                  "tag_name": "test"
                }
        argumentDocs:
            ca_certificates: '- (Required) A set of CA certificates.'
            cert_content: '- (Required) Content of cert certificate to create only one cert. One CA cert only per file.'
            common_name: '- (Computed) Common name of created cert.'
            expiration_time: '- (Computed) Expiration time of created cert.'
            id: '- (Computed) Unique id of created cert.'
            issuer_name: '- (Computed) Issuer name of created cert.'
            tag_name: '- (Required) Site2Cloud ca cert tag name.'
            unique_serial: '- (Computed) Unique serial of created cert.'
        importStatements: []
    aviatrix_smart_group:
        subCategory: Secured Networking
        description: Creates and manages an Aviatrix Smart Group
        name: aviatrix_smart_group
        title: aviatrix_smart_group
        examples:
            - name: test_smart_group_ip
              manifest: |-
                {
                  "name": "smart-group",
                  "selector": [
                    {
                      "match_expressions": [
                        {
                          "account_name": "devops",
                          "region": "us-west-2",
                          "tags": {
                            "k3": "v3"
                          },
                          "type": "vm"
                        },
                        {
                          "cidr": "10.0.0.0/16"
                        }
                      ]
                    }
                  ]
                }
        argumentDocs:
            account_id: '- (Optional) - Account ID this expression matches.'
            account_name: '- (Optional) - Account name this expression matches.'
            cidr: '- (Optional) - CIDR block or IP Address this expression matches. cidr cannot be used with any other filters in the same match_expressions block.'
            match_expressions: '- (Required) List of match expressions. The Smart Group will be a union of all resources matched by each match_expressions.match_expressions blocks cannot be empty.'
            name: '- (Required) Name of the Smart Group.'
            region: '- (Optional) - Region this expression matches.'
            res_id: '- (Optional) - Resource ID this expression matches.'
            selector: '- (Required) Block containing match expressions to filter the Smart Group.'
            tags: '- (Optional) - Map of tags this expression matches.'
            type: '- (Optional) - Type of resource this expression matches. Must be one of "vm", "vpc" or "subnet". type is required when cidr is not used.'
            uuid: '- UUID of the Smart Group.'
            zone: '- (Optional) - Zone this expression matches.'
        importStatements: []
    aviatrix_splunk_logging:
        subCategory: Settings
        description: Enables and disables splunk logging
        name: aviatrix_splunk_logging
        title: aviatrix_splunk_logging
        examples:
            - name: test_splunk_logging
              manifest: |-
                {
                  "port": 10,
                  "server": "1.2.3.4"
                }
            - name: test_splunk_logging
              manifest: |-
                {
                  "custom_output_config_file": "${filebase64(\"/path/to/configuration.spl\")}"
                }
        argumentDocs:
            custom_input_config: (Optional) Custom configuration.
            custom_output_config_file: (Optional) Configuration file. Use the filebase64 function to read from a file.
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            port: (Optional) Port number.
            server: (Optional) Server IP.
            status: '- The status of splunk logging.'
        importStatements: []
    aviatrix_spoke_external_device_conn:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix spoke external device connections
        name: aviatrix_spoke_external_device_conn
        title: aviatrix_spoke_external_device_conn
        examples:
            - name: test
              manifest: |-
                {
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "gw_name": "spokeGw",
                  "remote_gateway_ip": "172.12.13.14",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: test
              manifest: |-
                {
                  "backup_remote_gateway_ip": "172.12.13.15",
                  "connection_name": "my_conn",
                  "connection_type": "static",
                  "enable_ha": true,
                  "gw_name": "spokeGw",
                  "remote_gateway_ip": "172.12.13.14",
                  "remote_subnet": "12.0.0.0/24",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: test
              manifest: |-
                {
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "gw_name": "spokeGw",
                  "prepend_as_path": [
                    "123",
                    "123"
                  ],
                  "remote_gateway_ip": "172.12.13.14",
                  "vpc_id": "vpc-abcd1234"
                }
        argumentDocs:
            approved_cidrs: '- (Optional/Computed) Set of approved CIDRs. Requires enable_learned_cidrs_approval to be true. Type: Set(String).'
            backup_bgp_md5_key: '- (Optional) Backup BGP MD5 Authentication Key. Valid with HA enabled for connection. Example: ''avx03,avx04''.'
            backup_bgp_remote_as_num: '- (Optional) Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294. Required if HA enabled for ''bgp'' connection.'
            backup_direct_connect: '- (Optional) Backup direct connect for backup external device.'
            backup_local_tunnel_cidr: '- (Optional) Source CIDR for the tunnel from the backup Aviatrix spoke gateway.'
            backup_pre_shared_key: '- (Optional) Backup Pre-Shared Key.'
            'backup_remote_gateway_ip ': '- (Optional) Backup remote gateway IP. Required if HA enabled.'
            backup_remote_tunnel_cidr: '- (Optional) Destination CIDR for the tunnel to the backup external device.'
            bgp_local_as_num: '- (Optional) BGP local ASN (Autonomous System Number). Integer between 1-4294967294. Required for ''bgp'' connection.'
            bgp_md5_key: '- (Optional) BGP MD5 Authentication Key. Example: ''avx01,avx02''.'
            bgp_remote_as_num: '- (Optional) BGP remote ASN (Autonomous System Number). Integer between 1-4294967294. Required for ''bgp'' connection.'
            connection_name: '- (Required) Spoke external device connection name.'
            connection_type: '- (Required) Connection type. Valid values: ''bgp'', ''static''. Default value: ''bgp''.'
            custom_algorithms: '- (Optional) Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption. Valid values: true, false. NOTE: Please see notes'
            direct_connect: '- (Optional) Set true for private network infrastructure.'
            enable_event_triggered_ha: '- (Optional) Enable Event Triggered HA. Default value: false. Valid values: true or false.'
            enable_ikev2: '- (Optional) Set as true to enable IKEv2 protocol.'
            enable_learned_cidrs_approval: '- (Optional) Enable learned CIDRs approval for the connection. Only valid with connection_type = ''bgp''. Requires the spoke_gateway''s learned_cidrs_approval_mode attribute be set to ''connection''. Valid values: true, false. Default value: false.'
            gw_name: '- (Required) Aviatrix spoke gateway name.'
            ha_enabled: '- (Optional) Set as true if there are two external devices.'
            local_tunnel_cidr: '- (Optional) Source CIDR for the tunnel from the Aviatrix spoke gateway.'
            manual_bgp_advertised_cidrs: '- (Optional) Configure manual BGP advertised CIDRs for this connection. Only valid with connection_type= ''bgp''.'
            phase_1_authentication: '- (Optional) Phase one Authentication. Valid values: ''SHA-1'', ''SHA-256'', ''SHA-384'' and ''SHA-512''. Default value: ''SHA-256''.'
            phase_1_dh_groups: '- (Optional) Phase one DH Groups. Valid values: ''1'', ''2'', ''5'', ''14'', ''15'', ''16'', ''17'', ''18'', ''19'', ''20'' and ''21''. Default value: ''14''.'
            phase_1_encryption: '- (Optional) Phase one Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", and "AES-256-GCM-128". Default value: "AES-256-CBC".'
            phase_2_authentication: '- (Optional) Phase two Authentication. Valid values: ''NO-AUTH'', ''HMAC-SHA-1'', ''HMAC-SHA-256'', ''HMAC-SHA-384'' and ''HMAC-SHA-512''. Default value: ''HMAC-SHA-256''.'
            phase_2_dh_groups: '- (Optional) Phase two DH Groups. Valid values: ''1'', ''2'', ''5'', ''14'', ''15'', ''16'', ''17'', ''18'', ''19'', ''20'' and ''21''. Default value: ''14''.'
            phase_2_encryption: '- (Optional) Phase two Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", "AES-256-GCM-128" and "NULL-ENCR". Default value: "AES-256-CBC".'
            phase1_remote_identifier: '- (Optional) List of phase 1 remote identifier of the IPsec tunnel. This can be configured as a list of any string, including emtpy string. Example: ["1.2.3.4"] when HA is disabled, ["1.2.3.4", "abcd"] when HA is enabled. Available as of provider version R2.19+.'
            pre_shared_key: '- (Optional) Pre-Shared Key.'
            prepend_as_path: '- (Optional) Connection AS Path Prepend customized by specifying AS PATH for a BGP connection.'
            remote_gateway_ip: '- (Optional) Remote gateway IP.'
            remote_subnet: '- (Optional) Remote CIDRs joined as a string with '',''. Required for a ''static'' type connection.'
            remote_tunnel_cidr: '- (Optional) Destination CIDR for the tunnel to the external device.'
            tunnel_protocol: '- (Optional) Tunnel protocol, only valid with connection_type = ''bgp''. Valid values: ''IPsec''. Default value: ''IPsec''. Case insensitive.'
            vpc_id: '- (Required) VPC ID of the Aviatrix spoke gateway.'
        importStatements: []
    aviatrix_spoke_gateway:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix spoke gateways
        name: aviatrix_spoke_gateway
        title: aviatrix_spoke_gateway
        examples:
            - name: test_spoke_gateway_aws
              manifest: |-
                {
                  "account_name": "my-aws",
                  "cloud_type": 1,
                  "gw_name": "spoke-gw-aws",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.11.0.0/24",
                  "tags": {
                    "name": "value"
                  },
                  "vpc_id": "vpc-abcd123",
                  "vpc_reg": "us-west-1"
                }
            - name: test_spoke_gateway_aws
              manifest: |-
                {
                  "account_name": "my-aws",
                  "cloud_type": 1,
                  "enable_bgp": true,
                  "gw_name": "spoke-gw-aws",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.11.0.0/24",
                  "tags": {
                    "name": "value"
                  },
                  "vpc_id": "vpc-abcd123",
                  "vpc_reg": "us-west-1"
                }
            - name: test_spoke_gateway_gcp
              manifest: |-
                {
                  "account_name": "my-gcp",
                  "cloud_type": 4,
                  "gw_name": "spoke-gw-gcp",
                  "gw_size": "n1-standard-1",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.12.0.0/24",
                  "vpc_id": "gcp-spoke-vpc~-~project-id",
                  "vpc_reg": "us-west1-b"
                }
            - name: test_spoke_gateway_azure
              manifest: |-
                {
                  "account_name": "my-azure",
                  "cloud_type": 8,
                  "gw_name": "spoke-gw-01",
                  "gw_size": "Standard_B1ms",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.13.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "West US",
                  "zone": "az-1"
                }
            - name: test_spoke_gateway_oracle
              manifest: |-
                {
                  "account_name": "my-oracle",
                  "availability_domain": "${aviatrix_vpc.oci_vpc.availability_domains[0]}",
                  "cloud_type": 16,
                  "fault_domain": "${aviatrix_vpc.oci_vpc.fault_domains[0]}",
                  "gw_name": "avtxgw-oracle",
                  "gw_size": "VM.Standard2.2",
                  "manage_ha_gateway": false,
                  "subnet": "10.7.0.0/16",
                  "vpc_id": "ocid1.vcn.oc1.iad.aaaaaaaaba3pv6wkcr4jqae5f44n2b2m2yt2j6rx32uzr4h25vqstifsfdsq",
                  "vpc_reg": "us-ashburn-1"
                }
              references:
                availability_domain: aviatrix_vpc.oci_vpc.availability_domains[0]
                fault_domain: aviatrix_vpc.oci_vpc.fault_domains[0]
            - name: test_spoke_gateway_azuregov
              manifest: |-
                {
                  "account_name": "my-azuregov",
                  "cloud_type": 32,
                  "gw_name": "spoke-gw-01",
                  "gw_size": "Standard_B1ms",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.13.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "USGov Arizona"
                }
            - name: test_spoke_gateway_awsgov
              manifest: |-
                {
                  "account_name": "my-awsgov",
                  "cloud_type": 256,
                  "gw_name": "spoke-gw-awsgov",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.11.0.0/24",
                  "vpc_id": "vpc-abcd123",
                  "vpc_reg": "us-gov-west-1"
                }
            - name: test_spoke_gateway_aws_china
              manifest: |-
                {
                  "account_name": "my-aws-china",
                  "cloud_type": 1024,
                  "gw_name": "spoke-gw-aws-china",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.11.0.0/24",
                  "tags": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "vpc_id": "vpc-abcd123",
                  "vpc_reg": "cn-north-1"
                }
            - name: test_spoke_gateway_azure
              manifest: |-
                {
                  "account_name": "my-azure-china",
                  "cloud_type": 2048,
                  "gw_name": "spoke-gw-01",
                  "gw_size": "Standard_A0",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.13.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "China North"
                }
            - name: test_oob_spoke
              manifest: |-
                {
                  "account_name": "devops-aws",
                  "cloud_type": 1,
                  "enable_private_oob": true,
                  "gw_name": "oob-spoke",
                  "gw_size": "c5.xlarge",
                  "ha_gw_size": "c5.xlarge",
                  "ha_oob_availability_zone": "us-west-1b",
                  "ha_oob_management_subnet": "11.0.0.48/28",
                  "ha_subnet": "11.0.3.64/26",
                  "manage_ha_gateway": true,
                  "oob_availability_zone": "us-west-1a",
                  "oob_management_subnet": "11.0.2.0/24",
                  "subnet": "11.0.0.128/26",
                  "vpc_id": "vpc-abcd1234",
                  "vpc_reg": "us-west-1"
                }
            - name: test_spoke_gateway_alibaba
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 8192,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "ecs.g5ne.large",
                  "ha_gw_size": "ecs.g5ne.large",
                  "ha_subnet": "10.0.0.0/24",
                  "manage_ha_gateway": true,
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "acs-us-west-1 (Silicon Valley)"
                }
            - name: test_spoke_gateway_aws_top_secret
              manifest: |-
                {
                  "account_name": "my-aws-top-secret",
                  "cloud_type": 16384,
                  "gw_name": "spoke-gw-aws-top-secret",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.11.0.0/24",
                  "tags": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "vpc_id": "vpc-abcd123",
                  "vpc_reg": "us-iso-east-1"
                }
            - name: test_spoke_gateway_aws_secret
              manifest: |-
                {
                  "account_name": "my-aws-secret",
                  "cloud_type": 16384,
                  "gw_name": "spoke-gw-aws-secret",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "single_ip_snat": false,
                  "subnet": "10.11.0.0/24",
                  "tags": {
                    "k1": "v1",
                    "k2": "v2"
                  },
                  "vpc_id": "vpc-abcd123",
                  "vpc_reg": "us-isob-east-1"
                }
            - name: test
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "gw_name": "spoke",
                  "gw_size": "t2.micro",
                  "manage_ha_gateway": false,
                  "private_mode_lb_vpc_id": "vpc-abcdef",
                  "private_mode_subnet_zone": "us-east-1a",
                  "subnet": "10.190.224.0/20",
                  "vpc_id": "vpc-abcd1234",
                  "vpc_reg": "us-east-1"
                }
        argumentDocs:
            account_name: '- (Required) This parameter represents the name of a Cloud-Account in Aviatrix controller.'
            allocate_new_eip: '- (Optional) When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.'
            approved_learned_cidrs: '- (Optional) A set of approved learned CIDRs. Only valid when enable_learned_cidrs_approval is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.'
            availability_domain: '- (Optional) Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            azure_eip_name_resource_group: '- (Optional) Name of public IP Address resource and its resource group in Azure to be assigned to the Spoke Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if allocate_new_eip is false and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.'
            bgp_ecmp: '- (Optional) Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.'
            bgp_hold_time: '- (Optional) BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.'
            bgp_polling_time: '- (Optional) BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".'
            cloud_instance_id: '- Cloud instance ID of the spoke gateway.'
            cloud_type: '- (Required) Type of cloud service provider, requires an integer value. Currently, only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.'
            connection: '- (Optional) Default value: "None".'
            customer_managed_keys: '- (Optional and Sensitive) Customer managed key ID.'
            customized_spoke_vpc_routes: '- (Optional) A list of comma separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to this spoke gateway only. Example: "10.0.0.0/116,10.2.0.0/16".'
            disable_route_propagation: '- (Optional) Disables route propagation on BGP Spoke to attached Transit Gateway. Default value: false.'
            dnat_policy: '- (Optional) Policy rule applied for enabling Destination NAT (DNAT), which allows you to change the destination to a virtual address range. Currently only supports AWS(1), Azure(8), and AWSGov(256).'
            dst_ip: '- (Optional) A destination IP address range where the policy rule applies.'
            dst_port: '- (Optional) A destination port where the policy rule applies.'
            eip: '- (Optional) Required when allocate_new_eip is false. It uses the specified EIP for this gateway. Available in Controller 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.'
            enable_active_mesh: '- (Optional) Switch to enable/disable Active Mesh Mode for Spoke Gateway. Valid values: true, false. Default value: false.'
            enable_active_standby: '- (Optional) Enables Active-Standby Mode. Available only with HA enabled. Valid values: true, false. Default value: false.'
            enable_active_standby_preemptive: '- (Optional) Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.'
            enable_auto_advertise_s2c_cidrs: '- (Optional) Auto Advertise Spoke Site2Cloud CIDRs. Default: false. Valid values: true or false. Available as of provider version R2.19+.'
            enable_bgp: '- (Optional) Enable BGP for this spoke gateway. Only available for AWS and Azure. Valid values: true, false. Default value: false. Available in provider R2.21.0+.'
            enable_encrypt_volume: '- (Optional) Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret providers. Valid values: true, false. Default value: false.'
            enable_jumbo_frame: '- (Optional) Enable jumbo frames for this spoke gateway. Default value is true.'
            enable_learned_cidrs_approval: '- (Optional) Switch to enable/disable learned CIDR approval for BGP Spoke Gateway. Valid values: true, false. Default value: false.'
            enable_monitor_gateway_subnets: '- (Optional) If set to true, the Monitor Gateway Subnets feature is enabled. Default value is false. Available in provider version R2.18+.'
            enable_preserve_as_path: '- (Optional) Enable preserve as_path when advertising manual summary cidrs on BGP spoke gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+'
            enable_private_oob: '- (Optional) Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.'
            enable_private_vpc_default_route: '- (Optional) Program default route in VPC private route table. Default: false. Valid values: true or false. Available as of provider version R2.19+.'
            enable_skip_public_route_table_update: '- (Optional) Skip programming VPC public route table. Default: false. Valid values: true or false. Available as of provider version R2.19+.'
            enable_snat: '- (Optional) Specify whether enabling Source NAT feature on the gateway or not. Please disable AWS NAT instance before enabling this feature. Currently only supports AWS(1), Azure(8) and AWSGov(256). Valid values: true, false.'
            enable_spot_instance: '- (Optional) Enable spot instance. NOT supported for production deployment.'
            enable_vpc_dns_server: '- (Optional) Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.'
            exclude_rtb: '- (Optional) This field specifies which VPC private route table will not be programmed with the default route entry.'
            fault_domain: '- (Optional) Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            filtered_spoke_vpc_routes: '- (Optional) A list of comma separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to this spoke gateway only. Example: "10.2.0.0/116,10.3.0.0/16".'
            gw_name: '- (Required) Name of the gateway which is going to be created.'
            gw_size: '- (Required) Size of the gateway instance. Example: AWS/AWSGov/AWSChina: "t2.large", Azure/AzureGov/AzureChina: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1".'
            ha_availability_domain: '- (Optional) HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            ha_azure_eip_name_resource_group: '- (Optional) Name of public IP Address resource and its resource group in Azure to be assigned to the HA Spoke Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if ha_eip is set and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.'
            ha_cloud_instance_id: '- Cloud instance ID of the HA spoke gateway.'
            ha_eip: '- (Optional) Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.'
            ha_fault_domain: '- (Optional) HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            ha_gw_name: '- Aviatrix spoke gateway unique name of HA spoke gateway.'
            ha_gw_size: '- (Optional) HA Gateway Size. Mandatory if enabling HA.'
            ha_image_version: '- (Optional/Computed) The image version of the HA gateway. Use aviatrix_gateway_image data source to programmatically retrieve this value for the desired ha_software_version. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the aviatrix_controller_config resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.'
            ha_insane_mode_az: '(Optional) AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS, AzureGov, AWSGov, AWS Top Secret and AWS Secret if insane_mode is enabled and ha_subnet is set. Example: AWS: "us-west-1a".'
            ha_oob_availability_zone: '- (Optional) HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".'
            ha_oob_management_subnet: '- (Optional) HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".'
            ha_private_ip: '- Private IP address of HA spoke gateway.'
            ha_private_mode_subnet_zone: '- (Optional) Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and cloud_type is AWS or AWSGov with HA. Available in Provider version R2.23+.'
            ha_public_ip: '- Public IP address of the HA Spoke Gateway.'
            ha_security_group_id: '- HA security group used for the spoke gateway.'
            ha_software_version: '- (Optional/Computed) The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the aviatrix_controller_config resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.'
            ha_subnet: '- (Optional) HA Subnet. Required if enabling HA for AWS, AWSGov, AWSChina, Azure, AzureGov, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24"'
            ha_zone: '- (Optional) HA Zone. Required if enabling HA for GCP gateway. Optional for Azure. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.'
            image_version: '- (Optional/Computed) The image version of the gateway. Use aviatrix_gateway_image data source to programmatically retrieve this value for the desired software_version. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the aviatrix_controller_config resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.'
            included_advertised_spoke_routes: '- (Optional) A list of comma separated CIDRs to be advertised to on-prem as ''Included CIDR List''. When configured, it will replace all advertised routes from this VPC. Example: "10.4.0.0/116,10.5.0.0/16".'
            insane_mode: ', please see notes here.'
            insane_mode_az: '- (Optional) AZ of subnet being created for Insane Mode Spoke Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if insane_mode is enabled. Example: AWS: "us-west-1a".'
            interface: '- (Optional) An output interface where the policy rule applies.'
            learned_cidrs_approval_mode: '- (Optional) Learned CIDRs approval mode. Either "gateway" (approval on a per-gateway basis) or "connection" (approval on a per-connection basis). Only "gateway" is supported for BGP SPOKE Gateway. Default value: "gateway". Available as of provider version R2.21+.'
            local_as_number: '- (Optional) Changes the Aviatrix Spoke Gateway ASN number before you setup Aviatrix Spoke Gateway connection configurations.'
            manage_ha_gateway: '- (Optional) Enable to manage Aviatrix spoke HA gateway using the aviatrix_spoke_gateway resource. If this is set to false, spoke HA gateways must be managed using the aviatrix_spoke_ha_gateway resource. Valid values: true, false. Default value: true. Available in provider R3.0+.'
            manage_transit_gateway_attachment: '- (Optional) Enable to manage spoke-to-Aviatrix transit gateway attachments using the aviatrix_spoke_gateway resource with the below transit_gw attribute. If this is set to false, attaching this spoke to transit gateways must be done using the aviatrix_spoke_transit_attachment resource. Valid values: true, false. Default value: true. Available in provider R2.17+.'
            mark: '- (Optional) A tag or mark of a TCP session where the policy rule applies.'
            monitor_exclude_list: '- (Optional) Set of monitored instance ids. Only valid when ''enable_monitor_gateway_subnets'' = true. Available in provider version R2.18+.'
            new_src_ip: '- (Optional) The changed source IP address when all specified qualifier conditions meet. One of the rule fields must be specified for this rule to take effect.'
            new_src_port: '- (Optional) The translated destination port when all specified qualifier conditions meet. One of the rule field must be specified for this rule to take effect.'
            oob_availability_zone: '- (Optional) OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".'
            oob_management_subnet: '- (Optional) OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".'
            prepend_as_path: '- (Optional) List of AS numbers to populate BGP AS_PATH field when it advertises to VGW or peer devices.'
            private_ip: '- Private IP address of the spoke gateway created.'
            private_mode_lb_vpc_id: '- (Optional) VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in provider version R2.23+.'
            private_mode_subnet_zone: '- (Optional) Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and cloud_type is AWS or AWSGov. Available in Provider version R2.23+.'
            protocol: '- (Optional) A destination port protocol where the policy rule applies.'
            public_ip: '- Public IP address of the Spoke Gateway created.'
            rx_queue_size: '- (Optional) Gateway ethernet interface RX queue size. Applies on HA as well if enabled. Once set, can''t be deleted or disabled. Available for AWS as of provider version R2.22+.'
            security_group_id: '- Security group used for the spoke gateway.'
            single_az_ha: '(Optional) Set to true if this feature is desired. Valid values: true, false.'
            single_ip_snat: '- (Optional) Specify whether to enable Source NAT feature in "single_ip" mode on the gateway or not. Please disable AWS NAT instance before enabling this feature. Currently, only supports AWS(1) and Azure(8). Valid values: true, false.'
            snat_mode: '- (Optional) Valid values: "primary", "secondary" and "custom". Default value: "primary".'
            snat_policy: '- (Optional) Policy rule applied for "snat_mode" of "custom".'
            software_version: '- (Optional/Computed) The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the aviatrix_controller_config resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.'
            spoke_bgp_manual_advertise_cidrs: '- (Optional) Intended CIDR list to be advertised to external BGP router. Empty list is not valid. Example: ["10.2.0.0/16", "10.4.0.0/16"].'
            spot_price: '- (Optional) Price for spot instance. NOT supported for production deployment.'
            src_ip: '- (Optional) A source IP address range where the policy rule applies.'
            src_port: '- (Optional) A source port that the policy rule applies.'
            storage_name: (Optional) Specify a storage account. Required if cloud_type is 2048 (AzureChina). Removed in Provider version 2.21.0+.
            subnet: '- (Required) A VPC Network address range selected from one of the available network ranges. Example: "172.31.0.0/20". NOTE: If using'
            tag_list: '- (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina and AzureChina. Example: ["key1:value1", "key2:value2"].'
            tags: '- (Optional) Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character. Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.'
            transit_gw: '- (Optional) Specify the Aviatrix transit gateways to attach this spoke gateway to. Format is a comma separated list of transit gateway names. For example: "transit-gw1,transit-gw2".'
            tunnel_detection_time: '- (Optional) The IPsec tunnel down detection time for the Spoke Gateway in seconds. Must be a number in the range [20-600]. The default value is set by the controller (60 seconds if nothing has been changed). NOTE: The controller UI has an option to set the tunnel detection time for all gateways. To achieve the same functionality in Terraform, use the same TF_VAR to manage the tunnel detection time for all gateways. Available in provider R2.19+.'
            vpc_id: '- (Required) VPC-ID/VNet-Name of cloud provider. Example: AWS/AWSGov/AWSChina: "vpc-abcd1234", GCP: "vpc-gcp-test~-~project-id", Azure/AzureGov/AzureChina: "vnet_name:rg_name:resource_guid", OCI: "ocid1.vcn.oc1.iad.aaaaaaaaba3pv6wkcr4jqae5f44n2b2m2yt2j6rx32uzr4h25vqstifsfdsq".'
            vpc_reg: '- (Required) Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1, AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".'
            zone: '- (Optional) Availability Zone. Only available for Azure (8), Azure GOV (32) and Azure CHINA (2048). Must be in the form ''az-n'', for example, ''az-2''. Available in provider version R2.17+.'
        importStatements: []
    aviatrix_spoke_gateway_subnet_group:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix spoke gateway subnet groups
        name: aviatrix_spoke_gateway_subnet_group
        title: aviatrix_spoke_gateway_subnet_group
        examples:
            - name: test
              manifest: |-
                {
                  "gw_name": "spoke",
                  "name": "subnet_group",
                  "subnets": [
                    "10.2.48.0/20~~subnet1",
                    "10.2.64.0/20~~subnet2"
                  ]
                }
        argumentDocs:
            gw_name: '- (Required) Aviatrix spoke gateway name.'
            name: '- (Required) Name of spoke gateway subnet group.'
            subnets: '- (Optional) A set of subnets in the subnet group. The format of each subnet must be "CIDR~~subnet name". Example: ["10.2.48.0/20~~subnet1", "10.2.64.0/20~~subnet2"]'
        importStatements: []
    aviatrix_spoke_ha_gateway:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix spoke ha gateways
        name: aviatrix_spoke_ha_gateway
        title: aviatrix_spoke_ha_gateway
        examples:
            - name: test_spoke_ha_aws
              manifest: |-
                {
                  "primary_gw_name": "${aviatrix_spoke_gateway.primary_spoke.id}",
                  "subnet": "10.11.0.0/24"
                }
              references:
                primary_gw_name: aviatrix_spoke_gateway.primary_spoke.id
            - name: test_spoke_ha_gcp
              manifest: |-
                {
                  "gw_name": "spoke-gw-gcp-ha",
                  "gw_size": "n1-standard-1",
                  "primary_gw_name": "${aviatrix_spoke_gateway.primary_spoke.id}",
                  "subnet": "10.12.0.0/24",
                  "zone": "us-west1-b"
                }
              references:
                primary_gw_name: aviatrix_spoke_gateway.primary_spoke.id
            - name: test_spoke_ha_azure
              manifest: |-
                {
                  "gw_name": "spoke-gw-azure-ha",
                  "gw_size": "Standard_B1ms",
                  "primary_gw_name": "${aviatrix_spoke_gateway.primary_spoke.id}",
                  "subnet": "10.13.0.0/24"
                }
              references:
                primary_gw_name: aviatrix_spoke_gateway.primary_spoke.id
        argumentDocs:
            account_name: '- Name of a Cloud-Account in Aviatrix controller.'
            availability_domain: '- (Optional) Availability domain. Required and valid only for OCI.'
            azure_eip_name_resource_group: '- (Optional) Name of public IP Address resource and its resource group in Azure to be assigned to the Spoke Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if eip is set and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 3.0+.'
            cloud_instance_id: '- Cloud instance ID of the Spoke HA Gateway.'
            cloud_type: '- Type of cloud service provider.'
            eip: '- (Optional) If set, the set IP will be used for this gateway.'
            fault_domain: '- (Optional) Fault domain. Required and valid only for OCI.'
            gw_name: '- (Optional) Name of the Spoke HA Gateway which is going to be created. If not set, controller will auto generate a name for this gateway.'
            gw_size: '- (Optional) Size of the Spoke HA Gateway instance. If not set, controller will use the same value as primary gateway''s. Example: AWS/AWSGov/AWSChina: "t2.large", Azure/AzureGov/AzureChina: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1".'
            image_version: '- Image version of the gateway.'
            insane_mode: ', please see notes here.'
            insane_mode_az: '- (Optional) AZ of subnet being created for Insane Mode Spoke HA Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if insane_mode is enabled. Example: AWS: "us-west-1a".'
            primary_gw_name: '- (Required) Name of the primary gateway which is already or will be created before this Spoke HA Gateway.'
            private_ip: '- Private IP address of the Spoke HA Gateway created.'
            public_ip: '- Public IP address of the Spoke HA Gateway created.'
            security_group_id: '- Security group used for the Spoke HA Gateway.'
            software_version: '- Software version of the gateway.'
            subnet: '- (Required) A VPC Network address range selected from one of the available network ranges. Example: "172.31.0.0/20". NOTE: If using'
            vpc_reg: '- Region in which the Spoke HA Gateway was created.'
            zone: '- (Optional) Availability Zone. Required for GCP gateway, example: "us-west1-c". Optional for Azure gateway in the form "az-n", example: "az-2".'
        importStatements: []
    aviatrix_spoke_transit_attachment:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix Spoke-to-Transit attachments
        name: aviatrix_spoke_transit_attachment
        title: aviatrix_spoke_transit_attachment
        examples:
            - name: test_attachment
              manifest: |-
                {
                  "route_tables": [
                    "rtb-737d540c",
                    "rtb-626d045c"
                  ],
                  "spoke_gw_name": "spoke-gw",
                  "transit_gw_name": "transit-gw"
                }
        argumentDocs:
            enable_max_performance: '- (Optional) Indicates whether the maximum amount of HPE tunnels will be created. Only valid when transit and spoke gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.'
            route_tables: '- (Optional) Learned routes will be propagated to these route tables. Example: ["rtb-212ff547","rtb-04539787"].'
            spoke_bgp_enabled: '- Indicates whether the spoke gateway is BGP enabled or not.'
            spoke_gw_name: '- (Required) Name of the spoke gateway to attach to transit network.'
            spoke_prepend_as_path: '- (Optional) Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway''s own local AS number, repeated up to 25 times. Applies on spoke_gateway_name. Available as of provider version R2.23+.'
            transit_gw_name: '- (Required) Name of the transit gateway to attach the spoke gateway to.'
            transit_prepend_as_path: '- (Optional) Connection based AS Path Prepend. Valid only for BGP connection. Can only use the gateway''s own local AS number, repeated up to 25 times. Applies on transit_gateway_name. Available as of provider version R2.23+.'
        importStatements: []
    aviatrix_sumologic_forwarder:
        subCategory: Settings
        description: Enables and disables sumologic forwarder
        name: aviatrix_sumologic_forwarder
        title: aviatrix_sumologic_forwarder
        examples:
            - name: test_sumologic_forwarder
              manifest: |-
                {
                  "access_id": 0,
                  "access_key": "1.2.3.4"
                }
        argumentDocs:
            access_id: (Required) Access ID.
            access_key: (Required and Sensitive) Access Key.
            custom_configuration: (Optional) Custom configuration. The format should be key=value pairs.
            excluded_gateways: '(Optional) List of gateways to be excluded from logging. e.g.: ["gateway01", "gateway02", "gateway01-hagw"].'
            source_category: (Optional) Source category. "Aviatrix_syslog" by default.
            status: '- The status of sumologic forwarder.'
        importStatements: []
    aviatrix_trans_peer:
        subCategory: Peering
        description: Creates and manages Aviatrix transitive peerings
        name: aviatrix_trans_peer
        title: aviatrix_trans_peer
        examples:
            - name: test_trans_peer
              manifest: |-
                {
                  "nexthop": "avtx-us-east-gw2",
                  "reachable_cidr": "10.152.0.0/16",
                  "source": "avtx-us-east-gw1"
                }
        argumentDocs:
            nexthop: '- (Required) Name of nexthop gateway.'
            reachable_cidr: '- (Required) Destination CIDR.'
            source: '- (Required) Name of Source gateway.'
        importStatements: []
    aviatrix_transit_external_device_conn:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix transit external device connections
        name: aviatrix_transit_external_device_conn
        title: aviatrix_transit_external_device_conn
        examples:
            - name: test
              manifest: |-
                {
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "gw_name": "transitGw",
                  "remote_gateway_ip": "172.12.13.14",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: test
              manifest: |-
                {
                  "backup_bgp_remote_as_num": "65002",
                  "backup_direct_connect": true,
                  "backup_local_tunnel_cidr": "169.254.39.2/30,169.254.40.2/30",
                  "backup_remote_gateway_ip": "${aviatrix_transit_gateway.test1.ha_private_ip}",
                  "backup_remote_tunnel_cidr": "169.254.39.1/30,169.254.40.1/30",
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "depends_on": [
                    "${aviatrix_aws_peer.test}"
                  ],
                  "direct_connect": true,
                  "enable_edge_segmentation": false,
                  "gw_name": "${aviatrix_transit_gateway.test.gw_name}",
                  "ha_enabled": true,
                  "local_tunnel_cidr": "169.254.29.2/30,169.254.30.2/30",
                  "remote_gateway_ip": "${aviatrix_transit_gateway.test1.private_ip}",
                  "remote_tunnel_cidr": "169.254.29.1/30,169.254.30.1/30",
                  "tunnel_protocol": "GRE",
                  "vpc_id": "vpc-abcd1234"
                }
              references:
                backup_remote_gateway_ip: aviatrix_transit_gateway.test1.ha_private_ip
                gw_name: aviatrix_transit_gateway.test.gw_name
                remote_gateway_ip: aviatrix_transit_gateway.test1.private_ip
            - name: test
              manifest: |-
                {
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "gw_name": "transitGw",
                  "prepend_as_path": [
                    "123",
                    "123"
                  ],
                  "remote_gateway_ip": "172.12.13.14",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: ex-conn
              manifest: |-
                {
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "gw_name": "${aviatrix_transit_gateway.transit-gateway.gw_name}",
                  "local_lan_ip": "172.12.13.15",
                  "remote_lan_ip": "172.12.13.14",
                  "remote_vpc_name": "vnet-name:resource-group-name:subscription-id",
                  "tunnel_protocol": "LAN",
                  "vpc_id": "${aviatrix_transit_gateway.transit-gateway.vpc_id}"
                }
              references:
                gw_name: aviatrix_transit_gateway.transit-gateway.gw_name
                vpc_id: aviatrix_transit_gateway.transit-gateway.vpc_id
            - name: ex-conn
              manifest: |-
                {
                  "backup_bgp_remote_as_num": "678",
                  "backup_local_lan_ip": "172.12.13.17",
                  "backup_remote_lan_ip": "172.12.13.16",
                  "bgp_local_as_num": "123",
                  "bgp_remote_as_num": "345",
                  "connection_name": "my_conn",
                  "connection_type": "bgp",
                  "gw_name": "${aviatrix_transit_gateway.transit-gateway.gw_name}",
                  "ha_enabled": true,
                  "local_lan_ip": "172.12.13.15",
                  "remote_lan_ip": "172.12.13.14",
                  "remote_vpc_name": "vnet-name:resource-group-name:subscription-id",
                  "tunnel_protocol": "LAN",
                  "vpc_id": "${aviatrix_transit_gateway.transit-gateway.vpc_id}"
                }
              references:
                gw_name: aviatrix_transit_gateway.transit-gateway.gw_name
                vpc_id: aviatrix_transit_gateway.transit-gateway.vpc_id
        argumentDocs:
            approved_cidrs: '- (Optional/Computed) Set of approved CIDRs. Requires enable_learned_cidrs_approval to be true. Type: Set(String).'
            backup_bgp_md5_key: '- (Optional) Backup BGP MD5 Authentication Key. Valid with HA enabled for connection. Example: ''avx03,avx04''. For BGP LAN ActiveMesh mode disabled, example: ''avx03''.'
            backup_bgp_remote_as_num: '- (Optional) Backup BGP remote ASN (Autonomous System Number). Integer between 1-4294967294. Required if HA enabled for ''bgp'' connection.'
            backup_direct_connect: '- (Optional) Backup direct connect for backup external device.'
            backup_local_lan_ip: '- (Optional) Backup Local LAN IP. Required for GCP HA BGP over LAN connection.'
            backup_local_tunnel_cidr: '- (Optional) Source CIDR for the tunnel from the backup Aviatrix transit gateway.'
            backup_pre_shared_key: '- (Optional) Backup Pre-Shared Key.'
            'backup_remote_gateway_ip ': '- (Optional) Backup remote gateway IP. Required if HA enabled.'
            backup_remote_lan_ip: '- (Optional) Backup Remote LAN IP. Required for HA BGP over LAN connection.'
            backup_remote_tunnel_cidr: '- (Optional) Destination CIDR for the tunnel to the backup external device.'
            bgp_local_as_num: '- (Optional) BGP local ASN (Autonomous System Number). Integer between 1-4294967294. Required for ''bgp'' connection.'
            bgp_md5_key: '- (Optional) BGP MD5 Authentication Key. Example: ''avx01,avx02''. For BGP LAN ActiveMesh mode disabled, example: ''avx01''.'
            bgp_remote_as_num: '- (Optional) BGP remote ASN (Autonomous System Number). Integer between 1-4294967294. Required for ''bgp'' connection.'
            connection_name: '- (Required) Transit external device connection name.'
            connection_type: '- (Required) Connection type. Valid values: ''bgp'', ''static''. Default value: ''bgp''.'
            custom_algorithms: '- (Optional) Switch to enable custom/non-default algorithms for IPSec Authentication/Encryption. Valid values: true, false. NOTE: Please see notes'
            direct_connect: '- (Optional) Set true for private network infrastructure.'
            enable_bgp_lan_activemesh: '- (Optional) Switch to enable BGP LAN ActiveMesh mode. Only valid for GCP with Remote Gateway HA enabled. Default: false. Available as of provider version R2.21+.'
            enable_edge_segmentation: '- (Optional) Switch to allow this connection to communicate with a Network Domain via Connection Policy.'
            enable_event_triggered_ha: '- (Optional) Enable Event Triggered HA. Default value: false. Valid values: true or false. Available as of provider version R2.19+.'
            enable_ikev2: '- (Optional) Set as true to enable IKEv2 protocol.'
            enable_jumbo_frame: '- (Optional) Enable Jumbo Frame for the transit external device connection. Only valid with ''GRE'' tunnels under ''bgp'' connection. Requires transit to be jumbo frame and insane mode enabled. Valid values: true, false. Default value: false. Available as of provider version R2.22.2+.'
            enable_learned_cidrs_approval: '- (Optional) Enable learned CIDRs approval for the connection. Only valid with connection_type = ''bgp''. Requires the transit_gateway''s learned_cidrs_approval_mode attribute be set to ''connection''. Valid values: true, false. Default value: false. Available as of provider version R2.18+.'
            gw_name: '- (Required) Aviatrix transit gateway name.'
            ha_enabled: '- (Optional) Set as true if there are two external devices.'
            local_lan_ip: '- (Optional) Local LAN IP. Required for GCP BGP over LAN connection.'
            local_tunnel_cidr: '- (Optional) Source CIDR for the tunnel from the Aviatrix transit gateway.'
            manual_bgp_advertised_cidrs: '- (Optional) Configure manual BGP advertised CIDRs for this connection. Only valid with connection_type= ''bgp''. Available as of provider version R2.18+.'
            phase_1_authentication: '- (Optional) Phase one Authentication. Valid values: ''SHA-1'', ''SHA-256'', ''SHA-384'' and ''SHA-512''. Default value: ''SHA-256''.'
            phase_1_dh_groups: '- (Optional) Phase one DH Groups. Valid values: ''1'', ''2'', ''5'', ''14'', ''15'', ''16'', ''17'', ''18'', ''19'', ''20'' and ''21''. Default value: ''14''.'
            phase_1_encryption: '- (Optional) Phase one Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", and "AES-256-GCM-128". Default value: "AES-256-CBC".'
            phase_2_authentication: '- (Optional) Phase two Authentication. Valid values: ''NO-AUTH'', ''HMAC-SHA-1'', ''HMAC-SHA-256'', ''HMAC-SHA-384'' and ''HMAC-SHA-512''. Default value: ''HMAC-SHA-256''.'
            phase_2_dh_groups: '- (Optional) Phase two DH Groups. Valid values: ''1'', ''2'', ''5'', ''14'', ''15'', ''16'', ''17'', ''18'', ''19'', ''20'' and ''21''. Default value: ''14''.'
            phase_2_encryption: '- (Optional) Phase two Encryption. Valid values: "3DES", "AES-128-CBC", "AES-192-CBC", "AES-256-CBC", "AES-128-GCM-64", "AES-128-GCM-96", "AES-128-GCM-128", "AES-256-GCM-64", "AES-256-GCM-96", "AES-256-GCM-128" and "NULL-ENCR". Default value: "AES-256-CBC".'
            phase1_remote_identifier: '- (Optional) List of phase 1 remote identifier of the IPsec tunnel. This can be configured as a list of any string, including emtpy string. Example: ["1.2.3.4"] when HA is disabled, ["1.2.3.4", "abcd"] when HA is enabled. Available as of provider version R2.19+.'
            pre_shared_key: '- (Optional) Pre-Shared Key.'
            prepend_as_path: '- (Optional) Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Available as of provider version R2.19.2.'
            remote_gateway_ip: '- (Optional) Remote gateway IP. Required when tunnel_protocol != ''LAN''.'
            remote_lan_ip: '- (Optional) Remote LAN IP. Required for BGP over LAN connection.'
            remote_subnet: '- (Optional) Remote CIDRs joined as a string with '',''. Required for a ''static'' type connection.'
            remote_tunnel_cidr: '- (Optional) Destination CIDR for the tunnel to the external device.'
            remote_vpc_name: '- (Optional) Name of the remote VPC for a LAN BGP connection with an Azure Transit Gateway. Required when connection_type = ''bgp'' and tunnel_protocol = ''LAN'' with an Azure transit gateway. Must be in the format "::". Available as of provider version R2.18+.'
            switch_to_ha_standby_gateway: '- (Optional) Switch to HA Standby Transit Gateway connection. Only valid with Transit Gateway that has Active-Standby Mode enabled and for non-HA external device. Valid values: true, false. Default: false. Available in provider version R2.17.1+.'
            tunnel_protocol: '- (Optional) Tunnel protocol, only valid with connection_type = ''bgp''. Valid values: ''IPsec'', ''GRE'' or ''LAN''. Default value: ''IPsec''. Case insensitive. Available as of provider version R2.18+.'
            vpc_id: '- (Required) VPC ID of the Aviatrix transit gateway. For GCP BGP over LAN connection, it is in the format of "vpc_name~-~project_name".'
        importStatements: []
    aviatrix_transit_firenet_policy:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix Transit FireNet policies
        name: aviatrix_transit_firenet_policy
        title: aviatrix_transit_firenet_policy
        examples:
            - name: test_transit_firenet_policy
              manifest: |-
                {
                  "inspected_resource_name": "SPOKE:spokeGw1",
                  "transit_firenet_gateway_name": "transitGw1"
                }
        argumentDocs:
            inspected_resource_name: '- (Required) The name of the resource which will be inspected.'
            transit_firenet_gateway_name: '- (Required) Name of the Transit FireNet-enabled transit gateway. Currently supports AWS and Azure.'
        importStatements: []
    aviatrix_transit_gateway:
        subCategory: Multi-Cloud Transit
        description: Creates and manages the Aviatrix Transit Network gateways
        name: aviatrix_transit_gateway
        title: aviatrix_transit_gateway
        examples:
            - name: test_transit_gateway_aws
              manifest: |-
                {
                  "account_name": "devops_aws",
                  "cloud_type": 1,
                  "connected_transit": true,
                  "enable_hybrid_connection": true,
                  "gw_name": "transit",
                  "gw_size": "t2.micro",
                  "ha_gw_size": "t2.micro",
                  "ha_subnet": "10.1.0.0/24",
                  "subnet": "10.1.0.0/24",
                  "tags": {
                    "name": "value"
                  },
                  "vpc_id": "vpc-abcd1234",
                  "vpc_reg": "us-east-1"
                }
            - name: test_transit_gateway_gcp
              manifest: |-
                {
                  "account_name": "devops-gcp",
                  "cloud_type": 4,
                  "gw_name": "avtxgw-gcp",
                  "gw_size": "n1-standard-1",
                  "ha_gw_size": "n1-standard-1",
                  "ha_subnet": "10.8.0.0/16",
                  "ha_zone": "us-west2-b",
                  "subnet": "10.8.0.0/16",
                  "vpc_id": "vpc-gcp-test~-~project-id",
                  "vpc_reg": "us-west2-a"
                }
            - name: test_transit_gateway_gcp
              manifest: |-
                {
                  "account_name": "devops_gcp",
                  "bgp_lan_interfaces": [
                    {
                      "subnet": "172.16.0.0/16",
                      "vpc_id": "gcp-vpc-bgp"
                    },
                    {
                      "subnet": "173.16.0.0/16",
                      "vpc_id": "gcp-vpc-bgp1"
                    },
                    {
                      "subnet": "174.16.0.0/16",
                      "vpc_id": "gcp-vpc-bgp2"
                    }
                  ],
                  "cloud_type": 4,
                  "connected_transit": true,
                  "gw_name": "avtxgw-gcp",
                  "gw_size": "n1-highcpu-16",
                  "ha_bgp_lan_interfaces": [
                    {
                      "subnet": "175.16.0.0/16",
                      "vpc_id": "gcp-vpc-bgp3"
                    },
                    {
                      "subnet": "176.16.0.0/16",
                      "vpc_id": "gcp-vpc-bgp4"
                    },
                    {
                      "subnet": "177.16.0.0/16",
                      "vpc_id": "gcp-vpc-bgp5"
                    }
                  ],
                  "ha_gw_size": "n1-highcpu-16",
                  "ha_subnet": "10.1.0.0/24",
                  "ha_zone": "us-west1-b",
                  "subnet": "10.1.0.0/24",
                  "vpc_id": "vpc-gcp-test",
                  "vpc_reg": "us-west1-a"
                }
            - name: test_transit_gateway_azure
              manifest: |-
                {
                  "account_name": "devops_azure",
                  "cloud_type": 8,
                  "connected_transit": true,
                  "gw_name": "transit",
                  "gw_size": "Standard_B1ms",
                  "ha_gw_size": "Standard_B1ms",
                  "ha_subnet": "10.30.0.0/24",
                  "ha_zone": "az-2",
                  "subnet": "10.30.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "West US",
                  "zone": "az-1"
                }
            - name: test_transit_gateway_azure
              manifest: |-
                {
                  "account_name": "devops_azure",
                  "bgp_lan_interfaces_count": 2,
                  "cloud_type": 8,
                  "connected_transit": true,
                  "enable_bgp_over_lan": true,
                  "gw_name": "transit",
                  "gw_size": "Standard_B1ms",
                  "ha_gw_size": "Standard_B1ms",
                  "ha_subnet": "10.30.0.0/24",
                  "ha_zone": "az-2",
                  "learned_cidrs_approval_mode": "connection",
                  "single_az_ha": true,
                  "subnet": "10.30.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "West US",
                  "zone": "az-1"
                }
            - name: test_transit_gateway_oracle
              manifest: |-
                {
                  "account_name": "devops-oracle",
                  "availability_domain": "${aviatrix_vpc.oci_vpc.availability_domains[0]}",
                  "cloud_type": 16,
                  "fault_domain": "${aviatrix_vpc.oci_vpc.fault_domains[0]}",
                  "gw_name": "avtxgw-oracle",
                  "gw_size": "VM.Standard2.2",
                  "subnet": "10.7.0.0/16",
                  "vpc_id": "ocid1.vcn.oc1.iad.aaaaaaaaba3pv6wkcr4jqae5f44n2b2m2yt2j6rx32uzr4h25vqstifsfdsq",
                  "vpc_reg": "us-ashburn-1"
                }
              references:
                availability_domain: aviatrix_vpc.oci_vpc.availability_domains[0]
                fault_domain: aviatrix_vpc.oci_vpc.fault_domains[0]
            - name: test_transit_gateway_azuregov
              manifest: |-
                {
                  "account_name": "devops_azuregov",
                  "cloud_type": 32,
                  "connected_transit": true,
                  "gw_name": "transit",
                  "gw_size": "Standard_B1ms",
                  "ha_gw_size": "Standard_B1ms",
                  "ha_subnet": "10.30.0.0/24",
                  "subnet": "10.30.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "USGov Arizona"
                }
            - name: test_transit_gateway_awsgov
              manifest: |-
                {
                  "account_name": "devops_awsgov",
                  "cloud_type": 256,
                  "connected_transit": true,
                  "enable_hybrid_connection": true,
                  "gw_name": "transit",
                  "gw_size": "t2.micro",
                  "ha_gw_size": "t2.micro",
                  "ha_subnet": "10.1.0.0/24",
                  "subnet": "10.1.0.0/24",
                  "vpc_id": "vpc-abcd12345678",
                  "vpc_reg": "us-gov-east-1"
                }
            - name: test_transit_gateway_aws_china
              manifest: |-
                {
                  "account_name": "devops_aws_china",
                  "cloud_type": 1024,
                  "connected_transit": true,
                  "gw_name": "transit",
                  "gw_size": "t2.micro",
                  "ha_gw_size": "t2.micro",
                  "ha_subnet": "10.1.0.0/24",
                  "subnet": "10.1.0.0/24",
                  "tags": {
                    "name": "value",
                    "name1": "value1",
                    "name2": "value2"
                  },
                  "vpc_id": "vpc-abcd12345678",
                  "vpc_reg": "cn-north-1"
                }
            - name: test_transit_gateway_azure_china
              manifest: |-
                {
                  "account_name": "devops_azure_china",
                  "cloud_type": 2048,
                  "gw_name": "transit",
                  "gw_size": "Standard_A0",
                  "ha_gw_size": "Standard_A0",
                  "ha_subnet": "10.30.0.0/24",
                  "ha_zone": "az-2",
                  "subnet": "10.30.0.0/24",
                  "vpc_id": "vnet_name:rg_name:resource_guid",
                  "vpc_reg": "China North"
                }
            - name: test_oob_transit
              manifest: |-
                {
                  "account_name": "devops-aws",
                  "cloud_type": 1,
                  "enable_private_oob": true,
                  "gw_name": "oob-transit",
                  "gw_size": "c5.xlarge",
                  "ha_gw_size": "c5.xlarge",
                  "ha_oob_availability_zone": "us-west-1b",
                  "ha_oob_management_subnet": "11.0.0.48/28",
                  "ha_subnet": "11.0.3.64/26",
                  "oob_availability_zone": "us-west-1a",
                  "oob_management_subnet": "11.0.2.0/24",
                  "subnet": "11.0.0.128/26",
                  "vpc_id": "vpc-abcd1234",
                  "vpc_reg": "us-west-1"
                }
            - name: test_transit_gateway_alibaba
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 8192,
                  "gw_name": "avtx-gw-1",
                  "gw_size": "ecs.g5ne.large",
                  "ha_gw_size": "ecs.g5ne.large",
                  "ha_subnet": "10.0.0.0/24",
                  "subnet": "10.0.0.0/24",
                  "vpc_id": "vpc-abcdef",
                  "vpc_reg": "acs-us-west-1 (Silicon Valley)"
                }
            - name: test_transit_gateway_aws_top_secret
              manifest: |-
                {
                  "account_name": "devops_aws_top_secret",
                  "cloud_type": 16384,
                  "connected_transit": true,
                  "gw_name": "transit",
                  "gw_size": "t2.micro",
                  "ha_gw_size": "t2.micro",
                  "ha_subnet": "10.1.0.0/24",
                  "subnet": "10.1.0.0/24",
                  "tags": {
                    "name": "value",
                    "name1": "value1",
                    "name2": "value2"
                  },
                  "vpc_id": "vpc-abcd12345678",
                  "vpc_reg": "us-iso-east-1"
                }
            - name: test_transit_gateway_aws_secret
              manifest: |-
                {
                  "account_name": "devops_aws_secret",
                  "cloud_type": 32768,
                  "connected_transit": true,
                  "gw_name": "transit",
                  "gw_size": "t2.micro",
                  "ha_gw_size": "t2.micro",
                  "ha_subnet": "10.1.0.0/24",
                  "subnet": "10.1.0.0/24",
                  "tags": {
                    "name": "value",
                    "name1": "value1",
                    "name2": "value2"
                  },
                  "vpc_id": "vpc-abcd12345678",
                  "vpc_reg": "us-isob-east-1"
                }
            - name: test
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 1,
                  "gw_name": "transit",
                  "gw_size": "c5.large",
                  "private_mode_lb_vpc_id": "vpc-abcdef",
                  "private_mode_subnet_zone": "us-east-1a",
                  "subnet": "10.190.224.0/20",
                  "vpc_id": "vpc-abcd1234",
                  "vpc_reg": "us-east-1"
                }
        argumentDocs:
            account_name: '- (Required) This parameter represents the name of a Cloud-Account in Aviatrix controller.'
            allocate_new_eip: '- (Optional) When value is false, reuse an idle address in Elastic IP pool for this gateway. Otherwise, allocate a new Elastic IP and use it for this gateway. Available in Controller 4.7+. Valid values: true, false. Default: true.'
            approved_learned_cidrs: '- (Optional) A set of approved learned CIDRs. Only valid when enable_learned_cidrs_approval is set to true. Example: ["10.250.0.0/16", "10.251.0.0/16"]. Available as of provider version R2.21+.'
            availability_domain: '- (Optional) Availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            azure_eip_name_resource_group: '- (Optional) Name of public IP Address resource and its resource group in Azure to be assigned to the Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if allocate_new_eip is false and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.'
            bgp_ecmp: '- (Optional) Enable Equal Cost Multi Path (ECMP) routing for the next hop. Default value: false.'
            bgp_hold_time: '- (Optional) BGP hold time. Unit is in seconds. Valid values are between 12 and 360. Default value: 180.'
            bgp_lan_interfaces: '- (Optional) Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit. Each interface has the following attributes:'
            bgp_lan_interfaces_count: '- (Optional) Number of interfaces that will be created for BGP over LAN enabled Azure transit. Valid value: 1~5 for FireNet case, 1~7 for Non-FireNet case. Default value: 1. Available as of provider version R2.22+.'
            bgp_lan_ip_list: '- List of available BGP LAN interface IPs for transit external device connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.'
            bgp_manual_spoke_advertise_cidrs: '- (Optional) Intended CIDR list to be advertised to external BGP router. Example: "10.2.0.0/16,10.4.0.0/16". Available as of R2.6. NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes'
            bgp_polling_time: '- (Optional) BGP route polling time. Unit is in seconds. Valid values are between 10 and 50. Default value: "50".'
            cloud_instance_id: '- Cloud instance ID of the transit gateway.'
            cloud_type: '- (Required) Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192), AWS Top Secret(16384) and AWS Secret (32768) are supported.'
            connected_transit: '- (Optional) Specify Connected Transit status. If enabled, it allows spokes to run traffics to other spokes via transit gateway. Valid values: true, false. Default value: false.'
            customer_managed_keys: '- (Optional and Sensitive) Customer managed key ID.'
            customized_spoke_vpc_routes: '- (Optional) A list of comma-separated CIDRs to be customized for the spoke VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. It applies to all spoke gateways attached to this transit gateway. Example: "10.0.0.0/16,10.2.0.0/16".'
            customized_transit_vpc_routes: '- (Optional) A list of CIDRs to be customized for the transit VPC routes. When configured, it will replace all learned routes in VPC routing tables, including RFC1918 and non-RFC1918 CIDRs. To be effective, enable_advertise_transit_cidr or firewall management access for a Transit FireNet gateway must be enabled. Example: ["10.0.0.0/16", "10.2.0.0/16"].'
            eip: '- (Optional) Required when allocate_new_eip is false. It uses the specified EIP for this gateway. Available in Controller version 4.7+. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.'
            enable_active_mesh: '- (Optional) Switch to enable/disable Active Mesh Mode for Transit Gateway. Valid values: true, false. Default value: false.'
            enable_active_standby: '- (Optional) Enables Active-Standby Mode. Available only with HA enabled. Valid values: true, false. Default value: false. Available in provider version R2.17.1+.'
            enable_active_standby_preemptive: '- (Optional) Enables Preemptive Mode for Active-Standby. Available only with BGP enabled, HA enabled and Active-Standby enabled. Valid values: true, false. Default value: false.'
            enable_advertise_transit_cidr: '- (Optional) Switch to enable/disable advertise transit VPC network CIDR for a VGW connection. Available as of R2.6. NOTE: If previously enabled through vgw_conn resource prior to provider version R2.6, please see notes'
            enable_bgp_over_lan: '- (Optional) Pre-allocate a network interface(eth4) for "BGP over LAN" functionality. Must be enabled to create a BGP over LAN aviatrix_transit_external_device_conn resource with this Transit Gateway. Only valid for GCP (4), Azure (8), AzureGov (32) or AzureChina (2048). Valid values: true or false. Default value: false. Available as of provider version R2.18+.'
            enable_egress_transit_firenet: '- (Optional) Enable Egress Transit FireNet. Valid values: true, false. Default value: false. Available in provider version R2.16.3+.'
            enable_encrypt_volume: '- (Optional) Enable EBS volume encryption for Gateway. Only supports AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.'
            enable_firenet: '- (Optional) Set to true to use gateway for legacy AWS TGW-based FireNet connection. Valid values: true, false. Default value: false. NOTE: If previously using an older provider version R2.5 where attribute name was'
            enable_firenet_interfaces: ', please see notes here.'
            enable_gateway_load_balancer: '- (Optional) Enable FireNet interfaces with AWS Gateway Load Balancer. Only valid when enable_firenet or enable_transit_firenet are set to true and cloud_type = 1 (AWS). Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.'
            enable_hybrid_connection: '- (Optional) Sign of readiness for AWS TGW connection. Only supported for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Example: false.'
            enable_jumbo_frame: '- (Optional) Enable jumbo frames for this transit gateway. Default value is true.'
            enable_learned_cidrs_approval: '- (Optional) Switch to enable/disable encrypted transit approval for transit gateway. Valid values: true, false. Default value: false.'
            enable_monitor_gateway_subnets: '- (Optional) If set to true, the Monitor Gateway Subnets feature is enabled. Default value is false. Available in provider version R2.18+.'
            enable_multi_tier_transit: '- (Optional) Enable Multi-tier Transit mode on transit gateway. When enabled, transit gateway will propagate routes it receives from its transit peering peer to other transit peering peers. local_as_number is required. Default value: false. Available as of provider version R2.19+.'
            enable_preserve_as_path: |-
                - (Optional) Enable preserve as_path when advertising manual summary cidrs on transit gateway. Valid values: true, false. Default value: false. Available as of provider version R.2.22.1+
                },
            enable_private_oob: '- (Optional) Enable Private OOB feature. Only available for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret. Valid values: true, false. Default value: false.'
            enable_s2c_rx_balancing: '- (Optional) Enable S2C receive packet CPU re-balancing on transit gateway. Valid values: true, false. Default value: false. Available in provider version R2.21.2+.'
            enable_segmentation: '- (Optional) Enable transit gateway for segmentation. Valid values: true, false. Default: false.'
            enable_snat: '- (Optional) Enable Source NAT for this container. Valid values: true, false.'
            enable_spot_instance: '- (Optional) Enable spot instance. NOT supported for production deployment.'
            enable_transit_firenet: '- (Optional) Set to true to use gateway for Transit FireNet connection. Valid values: true, false. Default value: false. Available in provider version R2.12+.'
            enable_transit_summarize_cidr_to_tgw: '- (Optional) Enable summarize CIDR to TGW. Valid values: true, false. Default value: false.'
            enable_vpc_dns_server: '- (Optional) Enable VPC DNS Server for Gateway. Currently only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, Alibaba Cloud, AWS Top Secret and AWS Secret gateways. Valid values: true, false. Default value: false.'
            excluded_advertised_spoke_routes: '- (Optional) A list of comma-separated CIDRs to be advertised to on-prem as ''Excluded CIDR List''. When configured, it inspects all the advertised CIDRs from its spoke gateways and remove those included in the ''Excluded CIDR List''. Example: "10.4.0.0/16,10.5.0.0/16".'
            fault_domain: '- (Optional) Fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            filtered_spoke_vpc_routes: '- (Optional) A list of comma-separated CIDRs to be filtered from the spoke VPC route table. When configured, filtering CIDR(s) or it’s subnet will be deleted from VPC routing tables as well as from spoke gateway’s routing table. It applies to all spoke gateways attached to this transit gateway. Example: "10.2.0.0/16,10.3.0.0/16".'
            gw_name: '- (Required) Name of the gateway which is going to be created.'
            gw_size: '- (Required) Size of the gateway instance. Example: AWS: "t2.large", Azure/AzureGov: "Standard_B1s", OCI: "VM.Standard2.2", GCP: "n1-standard-1", AWSGov: "t2.large", AWSChina: "t2.large", AzureChina: "Standard_A0".'
            ha_availability_domain: '- (Optional) HA gateway availability domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            ha_azure_eip_name_resource_group: '- (Optional) Name of public IP Address resource and its resource group in Azure to be assigned to the HA Transit Gateway instance. Example: "IP_Name:Resource_Group_Name". Required if ha_eip is set and cloud_type is Azure, AzureGov or AzureChina. Available as of provider version 2.20+.'
            ha_bgp_lan_interfaces: '- (Optional) Interfaces to run BGP protocol on top of the ethernet interface, to connect to the onprem/remote peer. Only available for GCP Transit HA. Each interface has the following attributes:'
            ha_bgp_lan_ip_list: '- List of available BGP LAN interface IPs for transit external device HA connection creation. Only supports GCP and Azure. Available as of provider version R2.21.0+.'
            ha_cloud_instance_id: '- Cloud instance ID of the HA transit gateway.'
            ha_eip: '- (Optional) Public IP address that you want to assign to the HA peering instance. If no value is given, a new EIP will automatically be allocated. Only available for AWS, GCP, Azure, OCI, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret.'
            ha_fault_domain: '- (Optional) HA gateway fault domain. Required and valid only for OCI. Available as of provider version R2.19.3.'
            ha_gw_name: '- Aviatrix transit gateway unique name of HA transit gateway.'
            ha_gw_size: '- (Optional) HA Gateway Size. Mandatory if enabling HA. Example: "t2.micro".'
            ha_image_version: '- (Optional/Computed) The image version of the HA gateway. Use aviatrix_gateway_image data source to programmatically retrieve this value for the desired ha_software_version. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the aviatrix_controller_config resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.'
            ha_insane_mode_az: '- (Optional) AZ of subnet being created for Insane Mode Transit HA Gateway. Required for AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret if insane_mode is enabled and ha_subnet is set. Example: AWS: "us-west-1a".'
            ha_lan_interface_cidr: '- LAN interface CIDR of the HA transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.18+.'
            ha_oob_availability_zone: '- (Optional) HA OOB availability zone. Required if enabling Private OOB and HA. Example: "us-west-1b".'
            ha_oob_management_subnet: '- (Optional) HA OOB management subnet. Required if enabling Private OOB and HA. Example: "11.0.0.48/28".'
            ha_private_ip: '- Private IP address of the HA transit gateway created.'
            ha_private_mode_subnet_zone: '- (Optional) Availability Zone of the HA subnet. Required when Private Mode is enabled on the Controller and cloud_type is AWS or AWSGov with HA. Available in Provider version R2.23+.'
            ha_public_ip: '- Public IP address of the HA Transit Gateway.'
            ha_security_group_id: '- HA security group used for the transit gateway.'
            ha_software_version: '- (Optional/Computed) The software version of the HA gateway. If set, we will attempt to update the HA gateway to the specified version if current version is different. If left blank, the HA gateway upgrade can be managed with the aviatrix_controller_config resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.'
            ha_subnet: '- (Optional) HA Subnet CIDR. Required only if enabling HA for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, OCI, Alibaba Cloud, AWS Top Secret or AWS Secret gateways. Optional for GCP. Setting to empty/unsetting will disable HA. Setting to a valid subnet CIDR will create an HA gateway on the subnet. Example: "10.12.0.0/24".'
            ha_zone: '- (Optional) HA Zone. Required if enabling HA for GCP gateway. Optional if enabling HA for Azure gateway. For GCP, setting to empty/unsetting will disable HA and setting to a valid zone will create an HA gateway in the zone. Example: "us-west1-c". For Azure, this is an optional parameter to place the HA gateway in a specific availability zone. Valid values for Azure gateways are in the form "az-n". Example: "az-2". Available for Azure as of provider version R2.17+.'
            image_version: '- (Optional/Computed) The image version of the gateway. Use aviatrix_gateway_image data source to programmatically retrieve this value for the desired software_version. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrades can be managed with the aviatrix_controller_config resource. Type: String. Example: "hvm-cloudx-aws-022021". Available as of provider version R2.20.0.'
            insane_mode: ', please see notes here.'
            insane_mode_az: '- (Optional) AZ of subnet being created for Insane Mode Transit Gateway. Required for AWS, AWSGov, AWS China, AWS Top Secret or AWS Secret if insane_mode is enabled. Example: AWS: "us-west-1a".'
            lan_interface_cidr: '- LAN interface CIDR of the transit gateway created (will be used when enabling FQDN Firenet in Azure). Available in provider version R2.17.1+.'
            lan_private_subnet: '- (Optional) LAN Private Subnet. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.'
            lan_vpc_id: '- (Optional) LAN VPC ID. Only valid when enabling Transit FireNet on GCP. Available as of provider version R2.18.1+.'
            learned_cidrs_approval_mode: '- (Optional) Learned CIDRs approval mode. Either "gateway" (approval on a per gateway basis) or "connection" (approval on a per connection basis). Default value: "gateway". Available as of provider version R2.18+.'
            local_as_number: '- (Optional) Changes the Aviatrix Transit Gateway ASN number before you setup Aviatrix Transit Gateway connection configurations.'
            monitor_exclude_list: '- (Optional) Set of monitored instance ids. Only valid when ''enable_monitor_gateway_subnets'' = true. Available in provider version R2.18+.'
            oob_availability_zone: '- (Optional) OOB availability zone. Required if enabling Private OOB. Example: "us-west-1a".'
            oob_management_subnet: '- (Optional) OOB management subnet. Required if enabling Private OOB. Example: "11.0.2.0/24".'
            prepend_as_path: '- (Optional) List of AS numbers to populate BGP AP_PATH field when it advertises to VGW or peer devices.'
            private_ip: '- Private IP address of the transit gateway created.'
            private_mode_lb_vpc_id: '- (Optional) VPC ID of Private Mode load balancer. Required when Private Mode is enabled on the Controller. Available in Provider version R2.23+.'
            private_mode_subnet_zone: '- (Optional) Availability Zone of the subnet. Required when Private Mode is enabled on the Controller and cloud_type is AWS or AWSGov. Available in Provider version R2.23+.'
            public_ip: '- Public IP address of the Transit Gateway created.'
            rx_queue_size: '- (Optional) Gateway ethernet interface RX queue size. Applies on HA as well if enabled. Once set, can''t be deleted or disabled. Available for AWS as of provider version R2.22+.'
            security_group_id: '- Security group used for the transit gateway.'
            single_az_ha: '(Optional) Set to true if this feature is desired. Valid values: true, false.'
            single_ip_snat: '- (Optional) Enable "single_ip" mode Source NAT for this container. Valid values: true, false. NOTE: Please see notes'
            software_version: '- (Optional/Computed) The software version of the gateway. If set, we will attempt to update the gateway to the specified version if current version is different. If left blank, the gateway upgrade can be managed with the aviatrix_controller_config resource. Type: String. Example: "6.5.821". Available as of provider version R2.20.0.'
            spot_price: '- (Optional) Price for spot instance. NOT supported for production deployment.'
            storage_name: (Optional) Specify a storage account. Required if cloud_type is 2048 (AzureChina). Removed in Provider version 2.21.0+.
            subnet: '- (Required) A VPC Network address range selected from one of the available network ranges. Example: "172.31.0.0/20". NOTE: If using'
            tag_list: '- (Optional) Instance tag of cloud provider. Only supported for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina. Example: ["key1:value1","key2:value2"].'
            tags: '- (Optional) Map of tags to assign to the gateway. Only available for AWS, Azure, AzureGov, AWSGov, AWSChina, AzureChina, AWS Top Secret and AWS Secret gateways. Allowed characters vary by cloud type but always include: letters, spaces, and numbers. AWS, AWSGov, AWSChina, AWS Top Secret and AWS Secret allow the use of any character.  Azure, AzureGov and AzureChina allows the following special characters: + - = . _ : @. Example: {"key1" = "value1", "key2" = "value2"}.'
            tunnel_detection_time: '- (Optional) The IPsec tunnel down detection time for the Transit Gateway in seconds. Must be a number in the range [20-600]. The default value is set by the controller (60 seconds if nothing has been changed). NOTE: The controller UI has an option to set the tunnel detection time for all gateways. To achieve the same functionality in Terraform, use the same TF_VAR to manage the tunnel detection time for all gateways. Available in provider R2.19+.'
            vpc_id: '- (Required) VPC-ID/VNet-Name of cloud provider. Example: AWS/AWSGov/AWSChina: "vpc-abcd1234", GCP: "vpc-gcp-test~-~project-id", Azure/AzureGov/AzureChina: "vnet_name:rg_name:resource_guid", OCI: "ocid1.vcn.oc1.iad.aaaaaaaaba3pv6wkcr4jqae5f44n2b2m2yt2j6rx32uzr4h25vqstifsfdsq".'
            vpc_reg: '- (Required) Region of cloud provider. Example: AWS: "us-east-1", GCP: "us-west2-a", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-west-1", AWSChina: "cn-north-1", AzureChina: "China North", AWS Top Secret: "us-iso-east-1", AWS Secret: "us-isob-east-1".'
            zone: '- (Optional) Availability Zone. Only available Azure (8), Azure GOV (32) and Azure CHINA (2048). Must be in the form ''az-n'', for example, ''az-2''. Available in provider version R2.17+.'
        importStatements: []
    aviatrix_transit_gateway_peering:
        subCategory: Multi-Cloud Transit
        description: Creates and manages Aviatrix transit gateway peerings
        name: aviatrix_transit_gateway_peering
        title: aviatrix_transit_gateway_peering
        examples:
            - name: test_transit_gateway_peering
              manifest: |-
                {
                  "enable_insane_mode_encryption_over_internet": false,
                  "enable_peering_over_private_network": false,
                  "gateway1_excluded_network_cidrs": [
                    "10.0.0.48/28"
                  ],
                  "gateway1_excluded_tgw_connections": [
                    "vpn_connection_a"
                  ],
                  "gateway2_excluded_network_cidrs": [
                    "10.0.0.48/28"
                  ],
                  "gateway2_excluded_tgw_connections": [
                    "vpn_connection_b"
                  ],
                  "prepend_as_path1": [
                    "65001",
                    "65001",
                    "65001"
                  ],
                  "prepend_as_path2": [
                    "65002"
                  ],
                  "transit_gateway_name1": "transit-Gw1",
                  "transit_gateway_name2": "transit-Gw2"
                }
        argumentDocs:
            enable_insane_mode_encryption_over_internet: '- (Optional) Advanced option. Enable Insane Mode Encryption over Internet. Transit gateways must be in Insane Mode. Currently, only inter-cloud connections between AWS and Azure are supported. Required with valid tunnel_count. Conflicts with enable_peering_over_private_network and enable_single_tunnel_mode. Type: Boolean. Default: false. Available as of provider version R2.19+.'
            enable_max_performance: '- (Optional) Indicates whether the maximum amount of HPE tunnels will be created. Only valid when the two transit gateways are each launched in Insane Mode and in the same cloud type. Default value: true. Available as of provider version R2.22.2+.'
            enable_peering_over_private_network: '- (Optional) Advanced option. Enable peering over private network. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Conflicts with enable_insane_mode_encryption_over_internet and tunnel_count. Type: Boolean. Default: false. Available in provider version R2.17.1+.'
            enable_single_tunnel_mode: '- (Optional) Advanced option. Enable peering with Single-Tunnel mode. Only appears and applies to when the two Multi-cloud Transit Gateways are each launched in Insane Mode and in a different cloud type. Required with enable_peering_over_private_network. Conflicts with enable_insane_mode_encryption_over_internet and tunnel_count. Type: Boolean. Default: false. Available as of provider version R2.18+.'
            gateway1_excluded_network_cidrs: '- (Optional) List of excluded network CIDRs for the first transit gateway.'
            gateway1_excluded_tgw_connections: '- (Optional) List of excluded TGW connections for the first transit gateway.'
            gateway2_excluded_network_cidrs: '- (Optional) List of excluded network CIDRs for the second transit gateway.'
            gateway2_excluded_tgw_connections: '- (Optional) List of excluded TGW connections for the second transit gateway.'
            prepend_as_path1: '- (Optional) AS Path Prepend for BGP connection. Can only use the transit''s own local AS number, repeated up to 25 times. Applies on transit_gateway_name1. Available in provider version R2.17.2+.'
            prepend_as_path2: '- (Optional) AS Path Prepend for BGP connection. Can only use the transit''s own local AS number, repeated up to 25 times. Applies on transit_gateway_name2. Available in provider version R2.17.2+.'
            transit_gateway_name1: '- (Required) The first transit gateway name to make a peer pair.'
            transit_gateway_name2: '- (Required) The second transit gateway name to make a peer pair.'
            tunnel_count: '- (Optional) Advanced option. Number of public tunnels. Required with enable_insane_mode_encryption_over_internet. Conflicts with enable_peering_over_private_network and enable_single_tunnel_mode. Type: Integer. Valid Range: 2-20. Available as of provider version R2.19+.'
        importStatements: []
    aviatrix_tunnel:
        subCategory: Peering
        description: Creates and manages Aviatrix Encrypted Peering tunnels
        name: aviatrix_tunnel
        title: aviatrix_tunnel
        examples:
            - name: test_tunnel
              manifest: |-
                {
                  "gw_name1": "avtx-gw1",
                  "gw_name2": "avtx-gw2"
                }
        argumentDocs:
            enable_ha: '- (Optional) Enable this attribute if peering-HA is enabled on the gateways. Valid values: true, false. Default value: false.'
            gw_name1: '- (Required) The first VPC Container name to make a peer pair.'
            gw_name2: '- (Required) The second VPC Container name to make a peer pair.'
            peering_hastatus: '- (Computed) Status of the HA tunnel.'
            peering_link: '- (Computed) Name of the peering link.'
            peering_state: '- (Computed) Status of the tunnel.'
        importStatements: []
    aviatrix_vgw_conn:
        subCategory: Multi-Cloud Transit
        description: Manages the connection between the Aviatrix Transit Gateway to VGW
        name: aviatrix_vgw_conn
        title: aviatrix_vgw_conn
        examples:
            - name: test_vgw_conn
              manifest: |-
                {
                  "bgp_local_as_num": "65001",
                  "bgp_vgw_account": "dev-account-1",
                  "bgp_vgw_id": "vgw-abcd1234",
                  "bgp_vgw_region": "us-east-1",
                  "conn_name": "my-connection-vgw-to-tgw",
                  "gw_name": "my-transit-gw",
                  "prepend_as_path": [
                    "65001",
                    "65001"
                  ],
                  "vpc_id": "vpc-abcd1234"
                }
        argumentDocs:
            bgp_local_as_num: '- (Required) BGP Local ASN (Autonomous System Number). Integer between 1-4294967294. Example: "65001".'
            bgp_manual_spoke_advertise_cidrs: '- (Optional) Intended CIDR list to advertise to VGW. Example: "10.2.0.0/16,10.4.0.0/16".'
            bgp_vgw_account: '- (Required) Cloud Account used to create the AWS VGW that will be used for this connection. Example: "dev-account-1".'
            bgp_vgw_id: '- (Required) ID of AWS VGW that will be used for this connection. Example: "vgw-abcd1234".'
            bgp_vgw_region: '- (Required) Region of AWS VGW that will be used for this connection. Example: "us-east-1".'
            conn_name: '- (Required) The name of for Transit GW to VGW connection connection which is going to be created. Example: "my-connection-vgw-to-tgw".'
            enable_advertise_transit_cidr: '- (Optional) Switch to enable/disable advertise transit VPC network CIDR for a vgw connection.'
            enable_event_triggered_ha: '- (Optional) Enable Event Triggered HA. Default value: false. Valid values: true or false. Available as of provider version R2.19+.'
            enable_learned_cidrs_approval: '- (Optional) Enable learned CIDRs approval for the connection. Requires the transit_gateway''s ''learned_cidrs_approval_mode'' attribute be set to ''connection''. Valid values: true, false. Default value: false. Available as of provider version R2.18+.'
            gw_name: '- (Required) Name of the Transit Gateway. Example: "my-transit-gw".'
            manual_bgp_advertised_cidrs: '- (Optional) Configure manual BGP advertised CIDRs for this connection. Available as of provider version R2.18+.'
            prepend_as_path: '- (Optional) Connection AS Path Prepend customized by specifying AS PATH for a BGP connection. Available as of provider version R2.19.2.'
            vpc_id: '- (Required) VPC ID where the Transit Gateway is located. Example: AWS: "vpc-abcd1234".'
        importStatements: []
    aviatrix_vpc:
        subCategory: Useful Tools
        description: Creates and manages Aviatrix-created VPCs
        name: aviatrix_vpc
        title: aviatrix_vpc
        examples:
            - name: aws_vpc
              manifest: |-
                {
                  "account_name": "devops",
                  "aviatrix_firenet_vpc": false,
                  "aviatrix_transit_vpc": false,
                  "cidr": "10.0.0.0/16",
                  "cloud_type": 1,
                  "name": "aws-vpc",
                  "region": "us-west-1"
                }
            - name: gcp_vpc
              manifest: |-
                {
                  "account_name": "devops",
                  "cloud_type": 4,
                  "name": "gcp-vpc",
                  "subnets": [
                    {
                      "cidr": "10.10.0.0/24",
                      "name": "subnet-1",
                      "region": "us-west1"
                    },
                    {
                      "cidr": "10.11.0.0/24",
                      "name": "subnet-2",
                      "region": "us-west2"
                    }
                  ]
                }
            - name: azure_vnet
              manifest: |-
                {
                  "account_name": "devops",
                  "aviatrix_firenet_vpc": false,
                  "cidr": "12.0.0.0/16",
                  "cloud_type": 8,
                  "name": "azure-vnet",
                  "region": "Central US"
                }
            - name: oci_vpc
              manifest: |-
                {
                  "account_name": "devops",
                  "cidr": "10.0.0.0/24",
                  "cloud_type": 16,
                  "name": "oci-vpc",
                  "region": "us-ashburn-1"
                }
            - name: azure_vnet
              manifest: |-
                {
                  "account_name": "devops",
                  "aviatrix_firenet_vpc": false,
                  "cidr": "12.0.0.0/16",
                  "cloud_type": 32,
                  "name": "azuregov-vnet",
                  "region": "USGov Arizona"
                }
            - name: awsgov_vnet
              manifest: |-
                {
                  "account_name": "devops",
                  "aviatrix_firenet_vpc": false,
                  "aviatrix_transit_vpc": false,
                  "cidr": "12.0.0.0/20",
                  "cloud_type": 256,
                  "name": "awsgov-vpc",
                  "region": "us-gov-west-1"
                }
            - name: aws_china_vnet
              manifest: |-
                {
                  "account_name": "devops",
                  "aviatrix_transit_vpc": false,
                  "cidr": "12.0.0.0/20",
                  "cloud_type": 1024,
                  "name": "aws-china-vpc",
                  "region": "cn-north-1"
                }
            - name: azure_china_vnet
              manifest: |-
                {
                  "account_name": "devops",
                  "cidr": "12.0.0.0/16",
                  "cloud_type": 2048,
                  "name": "azure-china-vnet",
                  "region": "China North"
                }
            - name: aliyun_vpc
              manifest: |-
                {
                  "account_name": "devops",
                  "cidr": "10.0.0.0/20",
                  "cloud_type": 8192,
                  "name": "aliyun-vpc",
                  "region": "acs-us-west-1 (Silicon Valley)"
                }
        argumentDocs:
            account_name: '- (Required) This parameter represents the name of a Cloud-Account in Aviatrix controller.'
            availability_domains: '- List of OCI availability domains.'
            aviatrix_firenet_vpc: '- (Optional) Specify whether it is an Aviatrix FireNet VPC to be used for Aviatrix FireNet and Transit FireNet solutions. Only AWS, Azure, AzureGov, AWSGov, AWSChina and AzureChina are supported. Required to be false for other providers. Valid values: true, false. Default: false.'
            aviatrix_transit_vpc: '- (Optional) Specify whether it is an Aviatrix Transit VPC to be used for Transit Network or TGW solutions. Only AWS, AWSGov, AWSChina, and Alibaba Cloud are supported. Required to be false for other providers. Valid values: true, false. Default: false.'
            azure_vnet_resource_id: '- Azure VNet resource ID.'
            cidr: '- (Optional) VPC CIDR. Required to be empty for GCP provider, and non-empty for other providers. Example: "10.11.0.0/24".'
            cloud_type: '- (Required) Type of cloud service provider, requires an integer value. Currently only AWS(1), GCP(4), Azure(8), OCI(16), AzureGov(32), AWSGov(256), AWSChina(1024), AzureChina(2048), Alibaba Cloud(8192) are supported.'
            enable_native_gwlb: '- (Optional) Enable Native AWS Gateway Load Balancer for FireNet Function. Only valid with cloud_type = 1 (AWS). This option is only applicable to TGW-integrated FireNet. Currently, AWS Gateway Load Balancer is only supported in AWS regions: us-west-2, us-east-1, eu-west-1, ap-southeast-2 and sa-east-1. Valid values: true or false. Default value: false. Available as of provider version R2.18+.'
            enable_private_oob_subnet: '- (Optional) Switch to enable private oob subnet. Only supported for AWS, AWSGov and AWSChina providers. Valid values: true, false. Default value: false. Available as of provider version R2.18+.'
            fault_domains: '- List of OCI fault domains.'
            name: '- (Required) Name of the VPC to be created.'
            num_of_subnet_pairs: '- (Optional) Number of public subnet and private subnet pair created. Only supported for AWS, Azure provider. Example: 1. Available in provider version R2.17+.'
            private_mode_subnets: '- (Optional) Switch to only launch private subnets. Only available when Private Mode is enabled on the Controller. Only AWS, Azure, AzureGov and AWSGov are supported. Available in Provider version R2.23+.'
            private_subnets: '- List of private subnet of the VPC(AWS, Azure) to be created.'
            public_subnets: '- List of public subnet of the VPC(AWS, Azure) to be created.'
            region: '- (Optional) Region of cloud provider. Required to be empty for GCP provider, and non-empty for other providers. Example: AWS: "us-east-1", Azure: "East US 2", OCI: "us-ashburn-1", AzureGov: "USGov Arizona", AWSGov: "us-gov-east-1", AWSChina: "cn-north-1", AzureChina: "China North".'
            resource_group: '- (Optional) The name of an existing resource group or a new resource group to be created for the Azure VNet.  A new resource group will be created if left blank. Only available for Azure, AzureGov and AzureChina providers. Available as of provider version R2.19+.'
            route_tables: '- List of route table ids associated with this VPC. Only populated for AWS, AWSGov and Azure VPC.'
            subnet_id: '- ID of this subnet.'
            subnet_size: '- (Optional) Subnet size. Only supported for AWS, Azure provider. Example: 24. Available in provider version R2.17+.'
            subnets: '- (Optional) List of subnets to be specify for GCP provider. Required to be non-empty for GCP provider, and empty for other providers.'
            vpc_id: '- ID of the VPC to be created.'
        importStatements: []
    aviatrix_vpn_cert_download:
        subCategory: OpenVPN
        description: Creates and Manages Aviatrix VPN Users
        name: aviatrix_vpn_cert_download
        title: aviatrix_vpn_cert_download
        examples:
            - name: test_vpn_cert_download
              manifest: |-
                {
                  "download_enabled": true,
                  "saml_endpoints": [
                    "saml_endpoint_name"
                  ]
                }
        argumentDocs:
            download_enabled: '- (Optional) Whether the VPN Certificate download is enabled. Supported Values: "true", "false".'
            saml_endpoints: '- (Optional) List of SAML endpoint names for which the downloading should be enabled . Currently, only a single endpoint is supported. Example: ["saml_endpoint_1"].'
        importStatements: []
    aviatrix_vpn_profile:
        subCategory: OpenVPN
        description: Creates and manages Aviatrix VPN User Profiles
        name: aviatrix_vpn_profile
        title: aviatrix_vpn_profile
        examples:
            - name: test_vpn_profile
              manifest: |-
                {
                  "base_rule": "allow_all",
                  "name": "my_profile",
                  "policy": [
                    {
                      "action": "deny",
                      "port": "443",
                      "proto": "tcp",
                      "target": "10.0.0.0/32"
                    },
                    {
                      "action": "deny",
                      "port": "443",
                      "proto": "tcp",
                      "target": "10.0.0.1/32"
                    }
                  ],
                  "users": [
                    "user1",
                    "user2"
                  ]
                }
        argumentDocs:
            action: '- (Required) Should be the opposite of the base rule for correct behavior. Valid values for action: "allow", "deny".'
            base_rule: '- (Optional) Base policy rule of the profile to be added. Enter "allow_all" or "deny_all", based on whether you want a whitelist or blacklist.'
            manage_user_attachment: '- (Optional) This parameter is a switch used to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the aviatrix_vpn_user resource. Valid values: true, false. Default value: true.'
            name: '- (Required) Enter any name for the VPN profile.'
            policy: '- (Optional) New security policy for the profile. Each policy has the following attributes:'
            port: '- (Required) Port to be allowed or denied. Valid values for port: a single port or a range of port numbers e.g.: "25", "25:1024". For "all" and "icmp", port should only be "0:65535".'
            proto: '- (Required) Protocol to allow or deny. Valid values for protocol: "all", "tcp", "udp", "icmp", "sctp", "rdp", "dccp".'
            target: '- (Required) CIDR to be allowed or denied. Valid values for target: IPv4 CIDRs. Example: "10.30.0.0/16".'
            users: '- (Optional) List of VPN users to attach to this profile. This should be set to null if manage_user_attachment is set to false.'
        importStatements: []
    aviatrix_vpn_user:
        subCategory: OpenVPN
        description: Creates and Manages Aviatrix VPN Users
        name: aviatrix_vpn_user
        title: aviatrix_vpn_user
        examples:
            - name: test_vpn_user
              manifest: |-
                {
                  "gw_name": "gw1",
                  "user_email": "user@aviatrix.com",
                  "user_name": "username1",
                  "vpc_id": "vpc-abcd1234"
                }
            - name: test_vpn_user
              manifest: |-
                {
                  "dns_name": "vpn.testuser.com",
                  "user_email": "user@aviatrix.com",
                  "user_name": "username1"
                }
            - name: test_vpn_user
              manifest: |-
                {
                  "gw_name": "gw1",
                  "user_email": "user@aviatrix.com",
                  "user_name": "username1",
                  "vpc_id": "${aviatrix_vpc.test_vpc.vpc_id}~-~${aviatrix_account.test_account.gcloud_project_id}"
                }
        argumentDocs:
            dns_name: '- (Optional) FQDN of a DNS based VPN service such as GeoVPN or UDP load balancer. Example: "vpn.testuser.com".'
            gw_name: '- (Optional) If ELB is enabled, this will be the name of the ELB, else it will be the name of the Aviatrix VPN gateway. Used together with vpc_id. Example: "gw1".'
            manage_user_attachment: '- (Optional) This parameter is a switch to determine whether or not to manage VPN user attachments to the VPN profile using this resource. If this is set to false, attachment must be managed using the aviatrix_vpn_profile resource. Valid values: true, false. Default value: false.'
            profiles: '- (Optional) List of VPN profiles for user to attach to. This should be set to null if manage_user_attachment is set to false.'
            saml_endpoint: '- (Optional) This is the name of the SAML endpoint to which the user is to be associated. This is required if adding user to a SAML gateway/LB.'
            user_email: '- (Optional) VPN user''s email. Example: "abc@xyz.com".'
            user_name: '- (Required) VPN user name. Example: "user".'
            vpc_id: '- (Optional) VPC ID of Aviatrix VPN gateway. Used together with gw_name. Example: "vpc-abcd1234".'
        importStatements: []
    aviatrix_vpn_user_accelerator:
        subCategory: OpenVPN
        description: Manages the Aviatrix VPN User Accelerator
        name: aviatrix_vpn_user_accelerator
        title: aviatrix_vpn_user_accelerator
        examples:
            - name: test_vpc_accelerator
              manifest: |-
                {
                  "elb_name": "Aviatrix-vpc-abcd2134"
                }
        argumentDocs:
            elb_name: '- (Required) Name of ELB to be added to VPN User Accelerator. Example: "Aviatrix-vpc-abcd2134".'
        importStatements: []
